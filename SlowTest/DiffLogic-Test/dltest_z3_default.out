(QF-LIA probe check)
(QF-AUFLIA probe check)
(QF-LRA probe check)
(QF-LIRA probe check)
(ILP probe check)
(QF-NIA probe check)
(QF-NRA probe check)
(NIA probe check)
(NRA probe check)
(NIRA probe check)
(LIA probe check)
(LRA probe check)
(LIRA probe check)
(AF-UFNRA probe check)
	(SMT TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
(NRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(LIRA probe check)
(LIRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
	(SMT TACTIC)
(QF-LRA probe check)
	(SMT TACTIC)
(QF-AUFLIA probe check)
		(QF-LIA TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
(ILP probe check)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
(ILP probe check)
(QF-LIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
before return mk_combined_solver...
func-decl AST:
(declare-fun %lbl%+0 () Bool)
func-decl AST:
(declare-fun %lbl%@1 () Bool)
func-decl AST:
(declare-fun x () Int)
func-decl AST:
(declare-fun y () Int)
func-decl AST:
(declare-fun %lbl%@2 () Bool)
func-decl AST:
(declare-fun %lbl%+3 () Bool)
(smt.collecting-features)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.simplifying :time 0.00 :before-memory 2.66 :after-memory 2.66)
(started "check-sat")
check_sat AST:
(let ((a!1 (=> (< x y) (< (* 2 x) (* 2 y))))
      (a!2 (or %lbl%@2 (=> (<= (* 2 x) (* 2 y)) (<= (* 3 x) (* 3 y))))))
(let ((a!3 (=> (! (and %lbl%+0 true) :lblpos +0)
               (and (! (or %lbl%@1 a!1) :lblneg @1) (=> a!1 (! a!2 :lblneg @2))))))
  (not (=> (! (and %lbl%+3 true) :lblpos +3) a!3))))
(combined-solver "using solver 2 (without a timeout)")
(smt.propagate-values)
(smt.nnf-cnf)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
unsat
	(SMT TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
(NRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(LIRA probe check)
(LIRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
	(SMT TACTIC)
(QF-LRA probe check)
	(SMT TACTIC)
(QF-AUFLIA probe check)
		(QF-LIA TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
(ILP probe check)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
(ILP probe check)
(QF-LIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
before return mk_combined_solver...
func-decl AST:
(declare-fun %lbl%+0 () Bool)
func-decl AST:
(declare-fun %lbl%@1 () Bool)
func-decl AST:
(declare-fun x () Int)
func-decl AST:
(declare-fun y () Int)
func-decl AST:
(declare-fun %lbl%+2 () Bool)
(smt.collecting-features)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.simplifying :time 0.00 :before-memory 2.66 :after-memory 2.66)
(started "check-sat")
check_sat AST:
(let ((a!1 (! (or %lbl%@1 (= (* x y) (* y x))) :lblneg @1)))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0) a!1))))
  (not a!2)))
(combined-solver "using solver 2 (without a timeout)")
(smt.propagate-values)
(smt.nnf-cnf)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
unsat
	(SMT TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
(NRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(LIRA probe check)
(LIRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
	(SMT TACTIC)
(QF-LRA probe check)
	(SMT TACTIC)
(QF-AUFLIA probe check)
		(QF-LIA TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
(ILP probe check)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
(ILP probe check)
(QF-LIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
before return mk_combined_solver...
func-decl AST:
(declare-fun %lbl%+0 () Bool)
func-decl AST:
(declare-fun %lbl%@1 () Bool)
func-decl AST:
(declare-fun x () Int)
func-decl AST:
(declare-fun y () Int)
func-decl AST:
(declare-fun %lbl%+2 () Bool)
(smt.collecting-features)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.simplifying :time 0.00 :before-memory 2.66 :after-memory 2.66)
(started "check-sat")
check_sat AST:
(let ((a!1 (=> (and (< 0 (* x y)) (< (* x y) 10)) (< x 10))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2)))
(combined-solver "using solver 2 (without a timeout)")
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)
(smt.diff_logic: non-diff logic expression (* x y))
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 2.66 :after-memory 2.66)
(combined-solver "solver 2 failed, trying solver1")
(combined-solver "using solver 1")
(simplifier :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(simplifier :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(propagate-values :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(ctx-simplify :num-steps 138)
(ctx-simplify :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(simplifier :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(solve_eqs :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(elim-uncnstr :num-exprs 22 :num-asts 213 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(simplifier :num-exprs 22 :num-asts 210 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.tactic start)
(smt.simplifying :time 0.00 :before-memory 2.96 :after-memory 2.96)
(smt.simplifying :time 0.00 :before-memory 2.96 :after-memory 2.96)
(smt.simplifying :time 0.00 :before-memory 2.96 :after-memory 2.96)
(smt.collecting-features)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)
(smt.diff_logic: non-diff logic expression (* x y))
(smt.preprocessing :time 0.00 :before-memory 3.06 :after-memory 3.06)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 3.06 :after-memory 3.06)
(smt :num-exprs 22 :num-asts 210 :time 0.00 :before-memory 2.66 :after-memory 2.71)
(tactic-exception "smt tactic failed to show goal to be sat/unsat (incomplete (theory difference-logic))")
unknown
	(SMT TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
(NRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(LIRA probe check)
(LIRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
	(SMT TACTIC)
(QF-LRA probe check)
	(SMT TACTIC)
(QF-AUFLIA probe check)
		(QF-LIA TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
(ILP probe check)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
(ILP probe check)
(QF-LIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
before return mk_combined_solver...
func-decl AST:
(declare-fun %lbl%+0 () Bool)
func-decl AST:
(declare-fun %lbl%@1 () Bool)
func-decl AST:
(declare-fun y () Int)
func-decl AST:
(declare-fun x () Int)
func-decl AST:
(declare-fun %lbl%+2 () Bool)
(smt.collecting-features)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.simplifying :time 0.00 :before-memory 2.66 :after-memory 2.66)
(started "check-sat")
check_sat AST:
(let ((a!1 (=> (and (>= y 0) (> (- x y) 0)) (> x 0))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2)))
(combined-solver "using solver 2 (without a timeout)")
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.searching)
(smt.stats :time 0.00 :before-memory 2.66 :after-memory 2.66)
unsat
	(SMT TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
(NRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(LIRA probe check)
(LIRA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
(QF-NRA probe check)
	(SMT TACTIC)
(QF-LRA probe check)
	(SMT TACTIC)
(QF-AUFLIA probe check)
		(QF-LIA TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
(ILP probe check)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
(ILP probe check)
(QF-LIA probe check)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
before return mk_combined_solver...
func-decl AST:
(declare-fun %lbl%+0 () Bool)
func-decl AST:
(declare-fun %lbl%@1 () Bool)
func-decl AST:
(declare-fun x () Int)
func-decl AST:
(declare-fun y () Int)
func-decl AST:
(declare-fun %lbl%+2 () Bool)
(smt.collecting-features)
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.simplifying :time 0.00 :before-memory 2.66 :after-memory 2.66)
(started "check-sat")
check_sat AST:
(let ((a!1 (=> (and (> (+ x y) 10) (> y 0)) (> (+ (+ x y) y) 9))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2)))
(combined-solver "using solver 2 (without a timeout)")
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)
(smt.diff_logic: non-diff logic expression (+ x (* 2 y)))
(smt.preprocessing :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 2.66 :after-memory 2.66)
(combined-solver "solver 2 failed, trying solver1")
(combined-solver "using solver 1")
(simplifier :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(simplifier :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(propagate-values :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(ctx-simplify :num-steps 138)
(ctx-simplify :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(simplifier :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(solve_eqs :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(elim-uncnstr :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(simplifier :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.66)
(smt.tactic start)
(smt.simplifying :time 0.00 :before-memory 2.96 :after-memory 2.96)
(smt.simplifying :time 0.00 :before-memory 2.96 :after-memory 2.96)
(smt.simplifying :time 0.00 :before-memory 2.96 :after-memory 2.96)
(smt.collecting-features)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)
(smt.diff_logic: non-diff logic expression (+ x (* 2 y)))
(smt.preprocessing :time 0.00 :before-memory 3.06 :after-memory 3.06)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 3.06 :after-memory 3.06)
(smt :num-exprs 26 :num-asts 217 :time 0.00 :before-memory 2.66 :after-memory 2.71)
(tactic-exception "smt tactic failed to show goal to be sat/unsat (incomplete (theory difference-logic))")
unknown
		(QF-LIA TACTIC)
	(PREAMBLE TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
(ILP probe check)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
	(mk-lia2pb-tactic)
	(SMT TACTIC)
(ILP probe check)
	(SMT TACTIC)
(simplifier :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(propagate-values :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(ctx-simplify :num-steps 82)
(ctx-simplify :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(simplifier :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(solve_eqs :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(elim-uncnstr :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(simplifier :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.91)
(ilp-model-finder-tactic start)
(ilp-model-finder-tactic done)
(pb-tactic start)
(pb-tactic done)
(bounded-tactic start)
(bounded-tactic done)
(smt.tactic start)
(smt.simplifying :time 0.00 :before-memory 3.20 :after-memory 3.20)
(smt.simplifying :time 0.00 :before-memory 3.20 :after-memory 3.20)
(smt.simplifying :time 0.00 :before-memory 3.20 :after-memory 3.20)
(smt.collecting-features)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)
(smt.diff_logic: non-diff logic expression (+ x y))
(smt.preprocessing :time 0.00 :before-memory 3.30 :after-memory 3.30)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 3.30 :after-memory 3.30)
(smt :num-exprs 23 :num-asts 215 :time 0.00 :before-memory 2.91 :after-memory 2.96)
(tactic-exception "smt tactic failed to show goal to be sat/unsat (incomplete (theory difference-logic))")
unknown
