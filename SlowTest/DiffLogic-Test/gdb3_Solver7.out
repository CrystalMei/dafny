(QF-LIA probe check)
(QF-AUFLIA probe check)
(QF-LRA probe check)
(QF-LIRA probe check)
(ILP probe check)
(QF-NIA probe check)
(QF-NRA probe check)
(NIA probe check)
(NRA probe check)
(NIRA probe check)
(LIA probe check)
(LRA probe check)
(LIRA probe check)
(AF-UFNRA probe check)
	(Quantifier Probe)
	(mk SMT tactic)
	(mk preamble tactic)
	(mk QF_FP tactic)
	(mk SMT tactic)
	(mk QF_NRA tactic)
	(mk QF_NRA SAT solver)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QF_NRA SAT solver)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QF_FP tactic)
	(mk SMT tactic)
	(mk QF_NRA tactic)
	(mk QF_NRA SAT solver)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QF_NRA SAT solver)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk NRA tactic)
	(mk SMT tactic)
(QF-NRA probe check)
(NRA probe check)
	(mk LIRA tactic)
	(mk LRA tactic)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QSAT tactic)
(LIRA probe check)
	(Quantifier Probe)
	(mk quant preprocessor)
(LIRA probe check)
	(mk QF_NIA tactic)
	(mk QF_NIA SMT solver)
	(mk SMT tactic)
	(mk QF_NIA NLSAT solver)
	(mk QF_NIA SMT solver)
	(mk SMT tactic)
	(mk QF_NIA SAT solver)
	(mk QF_NIA BV solver)
	(mk QF_NIA preamble tactic)
(QF-NIA probe check)
	(mk QF_NRA tactic)
	(mk QF_NRA SAT solver)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QF_NRA SAT solver)
	(mk SMT tactic)
(QF-NRA probe check)
	(mk QF_LRA tactic)
	(mk SMT tactic)
(QF-LRA probe check)
	(mk QF_AUFLIA tactic)
	(mk SMT tactic)
(QF-AUFLIA probe check)
	(mk QF-LIA tactic)
	(mk preamble tactic)
	(mk SMT tactic)
	(mk bounded tactic)
	(mk no_cut_smt tactic)
	(mk SMT tactic)
	(mk no_cut_no_relevancy_smt tactic)
	(mk SMT tactic)
	(mk no_cut_smt tactic)
	(mk SMT tactic)
	(mk lia2sat tactic)
	(mk bv2sat tactic)
	(mk-lia2pb-tactic)
	(mk pb tactic)
	(mk bv2sat tactic)
(ILP probe check)
	(mk ilp_model_finder tactic)
	(mk lia2sat tactic)
	(mk bv2sat tactic)
	(mk-lia2pb-tactic)
	(mk no_cut_smt tactic)
	(mk SMT tactic)
	(mk lia2sat tactic)
	(mk bv2sat tactic)
	(mk-lia2pb-tactic)
	(mk no_cut_smt tactic)
	(mk SMT tactic)
(ILP probe check)
(QF-LIA probe check)
	(mk QF_AUFBV tactic)
	(mk QF_AUFBV preamble tactic)
	(mk SMT tactic)
	(mk QF_BV tactic)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QF_BV preamble tactic)
	(mk QF_BV tactic)
	(mk SMT tactic)
	(mk SMT tactic)
	(mk QF_BV preamble tactic)
	(mk FD tactic)
	(mk FD tactic)
mk_combined_solver...
	(mk SMT solver)

mk_bool_var: creating boolean variable: 0 with ast-ID #1:
true
mk_bool_var: created boolean variable: 0 with lbool(l_undef):
true

	(unknown logic setup)
	(setup arith: Weaken Diff Logic)
	(setup arith: Weaken Diff Logic - theory_weak_rdl)
W-DL: enode mk_var: 0
W-DL: set_sort: 0
W-DL: enode mk_var: 1
W-DL: set_sort: 0.0
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, (+ 1 x)
mk_eq_core: mk_le_ge_eq_core
mk_eq_core: (:var 0), x
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
mk_eq_core: (+ y (* (- 1) x)), 1
mk_eq_core: mk_le_ge_eq_core
mk_eq_core: (:var 0), x
mk_eq_core: (:var 0), x
mk_eq_core: (+ y (* (- 1) x)), 1
mk_eq_core: mk_le_ge_eq_core
(smt.nnf-cnf)
mk_eq_core: (+ y (* (- 1) x)), 1
mk_eq_core: mk_le_ge_eq_core
mk_eq_core: i!0, x
(smt.reduce-asserted)
mk_eq_core: (+ y (* (- 1) x)), 1
mk_eq_core: EQ = LE & GE
mk_eq_core: i!0, x
mk_eq_core: EQ = LE & GE
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= (+ y (* (- 1) x)) 1)

internalize_assertion:
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

assert_default: expr #50:
(<= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

literal true:
(<= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)


internalize_theory_atom: #50 with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal true:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal true:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 1 with ast-ID #50:
(<= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= (+ y (* (- 1) x)) 1)

W-DL: expr:
(<= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #3, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) 1)
edge:
(not p1) (<= (+ y (* (- 1) x)) 1) 
	pos #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0

internalize_theory_atom: #50  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) 1)

literal p1:
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 50
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy_to_args # 25
y
propagate_relevancy_to_args # 26
x
propagate_relevancy_to_args # 43
(- 1)
assignment after one internalize_assertion:
current assignment:
#50 - l_true: (<= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) 1)

internalize_assertion:
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

assert_default: expr #49:
(>= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

literal p-1:
(>= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)


internalize_theory_atom: #49 with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 2 with ast-ID #49:
(>= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= (+ y (* (- 1) x)) 1)

W-DL: expr:
(>= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #2, dst_id #3, weight: -1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) 1)
edge:
(not p2) (>= (+ y (* (- 1) x)) 1) 
	pos #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0

internalize_theory_atom: #49  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) 1)

literal p2:
(>= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 49
(>= (+ y (* (- 1) x)) 1)
assignment after one internalize_assertion:
current assignment:
#50 - l_true: (<= (+ y (* -1 x)) 1)
#49 - l_true: (>= (+ y (* -1 x)) 1)


before internalize_assertion:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))

internalize_assertion:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
#74 := (if #72 #68 #51)
(not #74)

assert_default: expr #75:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))

internalize_rec with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
#74 := (if #72 #68 #51)
(not #74)

literal (not p33):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))

internalize_formula: with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
#74 := (if #72 #68 #51)
(not #74)


internalize_rec with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
(if #72 #68 #51)

literal p33:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))

internalize_formula: with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
(if #72 #68 #51)


internalize_theory_atom: #74 with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
(if #72 #68 #51)


internalize_formular_core with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
#56 := (* -1 i!0)
#48 := (+ y #56)
#51 := (>= #48 1)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
#68 := (if #64 #65 #67)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
#72 := (or #54 #71)
(if #72 #68 #51)


internalize_formular_core: call rec with is_gate: 1
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
(or #54 #71)


internalize_rec with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
(or #54 #71)

literal p48:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))

internalize_formula: with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
(or #54 #71)


internalize_theory_atom: #72 with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
(or #54 #71)


internalize_formular_core with gate_ctx(1):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
#71 := (not #64)
#62 := (>= #63 0)
#54 := (not #62)
(or #54 #71)


internalize_formular_core: call rec with is_gate: 1
(not (>= (+ x (* (- 1) i!0)) 0))
#56 := (* -1 i!0)
#63 := (+ x #56)
#62 := (>= #63 0)
(not #62)


internalize_rec with gate_ctx(1):
(not (>= (+ x (* (- 1) i!0)) 0))
#56 := (* -1 i!0)
#63 := (+ x #56)
#62 := (>= #63 0)
(not #62)

literal (not p49):
(not (>= (+ x (* (- 1) i!0)) 0))

internalize_formula: with gate_ctx(1):
(not (>= (+ x (* (- 1) i!0)) 0))
#56 := (* -1 i!0)
#63 := (+ x #56)
#62 := (>= #63 0)
(not #62)


internalize_rec with gate_ctx(1):
(>= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(>= #63 0)

literal p49:
(>= (+ x (* (- 1) i!0)) 0)

internalize_formula: with gate_ctx(1):
(>= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(>= #63 0)


internalize_theory_atom: #62 with gate_ctx(1):
(>= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(>= #63 0)

W-DL: internalize_atom with gate_ctx(1): (>= (+ x (* (- 1) i!0)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!0))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!0

internalize_rec with gate_ctx(0):
i!0
i!0

literal p-1:
i!0

internalize_uninterpreted:
i!0
i!0

W-DL: enode mk_var: 4
W-DL: set_sort: i!0
W-DL: mk_var returns: i!0 |-> 4

mk_bool_var: creating boolean variable: 3 with ast-ID #62:
(>= (+ x (* (- 1) i!0)) 0)
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(>= (+ x (* (- 1) i!0)) 0)

W-DL: expr:
(>= (+ x (* (- 1) i!0)) 0)
W-DL: edge: src_id #3, dst_id #4, weight: 0, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ x (* (- 1) i!0)) 0)
edge:
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
	pos #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #62  with gate_ctx(1) internalization succeeded
(>= (+ x (* (- 1) i!0)) 0)


internalize_formular_core: call rec with is_gate: 1
(not (<= (+ x (* (- 1) i!0)) 0))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
(not #64)


internalize_rec with gate_ctx(1):
(not (<= (+ x (* (- 1) i!0)) 0))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
(not #64)

literal false:
(not (<= (+ x (* (- 1) i!0)) 0))

internalize_formula: with gate_ctx(1):
(not (<= (+ x (* (- 1) i!0)) 0))
#56 := (* -1 i!0)
#63 := (+ x #56)
#64 := (<= #63 0)
(not #64)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(<= #63 0)

literal true:
(<= (+ x (* (- 1) i!0)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(<= #63 0)


internalize_theory_atom: #64 with gate_ctx(1):
(<= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(<= #63 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!0)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!0))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!0
W-DL: mk_var returns: i!0 |-> 4

mk_bool_var: creating boolean variable: 4 with ast-ID #64:
(<= (+ x (* (- 1) i!0)) 0)
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(<= (+ x (* (- 1) i!0)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!0)) 0)
W-DL: edge: src_id #4, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!0)) 0)
edge:
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
	pos #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #64  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!0)) 0)


mk_bool_var: creating boolean variable: 5 with ast-ID #72:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
mk_bool_var: created boolean variable: 5 with lbool(l_undef):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))


internalize_formular_core: call rec with is_gate: 1
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
(if #64 #65 #67)


internalize_rec with gate_ctx(1):
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
(if #64 #65 #67)

literal p-1:
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))

internalize_formula: with gate_ctx(1):
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
(if #64 #65 #67)


internalize_theory_atom: #68 with gate_ctx(1):
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
(if #64 #65 #67)


internalize_formular_core with gate_ctx(1):
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
#67 := (not #66)
#65 := (<= #48 0)
#63 := (+ x #56)
#64 := (<= #63 0)
(if #64 #65 #67)


internalize_formular_core: call rec with is_gate: 1
(<= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(<= #63 0)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(<= #63 0)

literal p4:
(<= (+ x (* (- 1) i!0)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#63 := (+ x #56)
(<= #63 0)


internalize_formular_core: call rec with is_gate: 1
(<= (+ y (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 0)


internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 0)

literal p-1:
(<= (+ y (* (- 1) i!0)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 0)


internalize_theory_atom: #65 with gate_ctx(1):
(<= (+ y (* (- 1) i!0)) 0)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) i!0)) 0)
W-DL: internalize_atom: LHS = (+ y (* (- 1) i!0))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: i!0
W-DL: mk_var returns: i!0 |-> 4

mk_bool_var: creating boolean variable: 6 with ast-ID #65:
(<= (+ y (* (- 1) i!0)) 0)
mk_bool_var: created boolean variable: 6 with lbool(l_undef):
(<= (+ y (* (- 1) i!0)) 0)

W-DL: expr:
(<= (+ y (* (- 1) i!0)) 0)
W-DL: edge: src_id #4, dst_id #2, weight: 0, gate_ctx(1)
DL Graph: add_edge #8: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #9: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) i!0)) 0)
edge:
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
	pos #8: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
	neg #9: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #65  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) i!0)) 0)


internalize_formular_core: call rec with is_gate: 1
(not (<= (+ y (* (- 1) i!0)) 1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
(not #66)


internalize_rec with gate_ctx(1):
(not (<= (+ y (* (- 1) i!0)) 1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
(not #66)

literal (not p-1):
(not (<= (+ y (* (- 1) i!0)) 1))

internalize_formula: with gate_ctx(1):
(not (<= (+ y (* (- 1) i!0)) 1))
#56 := (* -1 i!0)
#48 := (+ y #56)
#66 := (<= #48 1)
(not #66)


internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 1)

literal p-1:
(<= (+ y (* (- 1) i!0)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 1)


internalize_theory_atom: #66 with gate_ctx(1):
(<= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(<= #48 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) i!0)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) i!0))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: i!0
W-DL: mk_var returns: i!0 |-> 4

mk_bool_var: creating boolean variable: 7 with ast-ID #66:
(<= (+ y (* (- 1) i!0)) 1)
mk_bool_var: created boolean variable: 7 with lbool(l_undef):
(<= (+ y (* (- 1) i!0)) 1)

W-DL: expr:
(<= (+ y (* (- 1) i!0)) 1)
W-DL: edge: src_id #4, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #10: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #11: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) i!0)) 1)
edge:
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
	pos #10: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
	neg #11: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #66  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) i!0)) 1)


mk_bool_var: creating boolean variable: 8 with ast-ID #68:
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
mk_bool_var: created boolean variable: 8 with lbool(l_undef):
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))


internalize_formular_core: call rec with is_gate: 1
(>= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(>= #48 1)


internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(>= #48 1)

literal p-1:
(>= (+ y (* (- 1) i!0)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(>= #48 1)


internalize_theory_atom: #51 with gate_ctx(1):
(>= (+ y (* (- 1) i!0)) 1)
#56 := (* -1 i!0)
#48 := (+ y #56)
(>= #48 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) i!0)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) i!0))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: i!0
W-DL: mk_var returns: i!0 |-> 4

mk_bool_var: creating boolean variable: 9 with ast-ID #51:
(>= (+ y (* (- 1) i!0)) 1)
mk_bool_var: created boolean variable: 9 with lbool(l_undef):
(>= (+ y (* (- 1) i!0)) 1)

W-DL: expr:
(>= (+ y (* (- 1) i!0)) 1)
W-DL: edge: src_id #2, dst_id #4, weight: -1, gate_ctx(1)
DL Graph: add_edge #12: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #13: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) i!0)) 1)
edge:
(not p9) (>= (+ y (* (- 1) i!0)) 1) 
	pos #12: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
	neg #13: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
(not p9) (>= (+ y (* (- 1) i!0)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #51  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) i!0)) 1)


mk_bool_var: creating boolean variable: 10 with ast-ID #74:
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
mk_bool_var: created boolean variable: 10 with lbool(l_undef):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))

literal (not p10):
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
(let ((a!5 (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
  (not a!5))))
propagate_relevancy: marking as relevant:
(if (or (not #62) (not #64)) (if (<= #63 0) (<= #48 0) (not #66)) (>= (+ y #56) 1))
scope_level: 1
propagate_relevancy_to_args # 74
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0)))
      (a!3 (not (<= (+ y (* (- 1) i!0)) 1))))
(let ((a!4 (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!3)))
  (ite (or a!1 a!2) a!4 (>= (+ y (* (- 1) i!0)) 1))))
propagate_relevancy: marking as relevant:
(or (not (>= #63 0)) (not (<= #63 0)))
scope_level: 1
propagate_relevancy_to_args # 72
(let ((a!1 (not (>= (+ x (* (- 1) i!0)) 0)))
      (a!2 (not (<= (+ x (* (- 1) i!0)) 0))))
  (or a!1 a!2))
assignment after one internalize_assertion:
current assignment:
#50 - l_true: (<= (+ y (* -1 x)) 1)
#49 - l_true: (>= (+ y (* -1 x)) 1)
(not #74) - l_true: (not (if (or (not #62) (not #64)) (if (<= #63 0) (<= #48 0) (not #66)) (>= (+ y #56) 1)))

assignment after internalize_assertions():
current assignment:
#50 - l_true: (<= (+ y (* -1 x)) 1)
#49 - l_true: (>= (+ y (* -1 x)) 1)
(not #74) - l_true: (not (if (or (not #62) (not #64)) (if (<= #63 0) (<= #48 0) (not #66)) (>= (+ y #56) 1)))

(smt.searching)
propagating... 0:3
propagate_atoms: #50
(<= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #49
(>= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}

(smt.simplifying-clause-set :num-deleted-clauses 2)
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 

propagating... 3:4
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 

propagating... 4:5
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 

propagating... 5:6
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 

propagating... 8:9
propagate_relevancy: marking as relevant:
(not (<= (+ x #56) 0))
scope_level: 5
propagate_relevancy: marking as relevant:
(not (>= (+ x #56) 0))
scope_level: 5
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 i!0)) 1)
scope_level: 5
propagate_relevancy_to_args # 71
(not (<= (+ x (* (- 1) i!0)) 0))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!0)) 0)
scope_level: 5
propagate_relevancy_to_args # 54
(not (>= (+ x (* (- 1) i!0)) 0))
propagate_relevancy: marking as relevant:
(>= (+ x (* -1 i!0)) 0)
scope_level: 5
propagate_relevancy_to_args # 51
(>= (+ y (* (- 1) i!0)) 1)
propagate_relevancy: marking as relevant:
(+ y (* -1 i!0))
scope_level: 5
propagate_relevancy_to_args # 64
(<= (+ x (* (- 1) i!0)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 5
propagate_relevancy: marking as relevant:
(+ x (* -1 i!0))
scope_level: 5
propagate_relevancy_to_args # 62
(>= (+ x (* (- 1) i!0)) 0)
propagate_relevancy_to_args # 48
(+ y (* (- 1) i!0))
propagate_relevancy: marking as relevant:
(* -1 i!0)
scope_level: 5
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 63
(+ x (* (- 1) i!0))
propagate_relevancy_to_args # 56
(* (- 1) i!0)
propagate_relevancy: marking as relevant:
i!0
scope_level: 5
propagate_relevancy_to_args # 42
i!0
propagate_atoms: #51
(>= (+ y (* (- 1) i!0)) 1)
W-DL: assign_eh: 9: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim src, keep tgt
DL Graph: add_edge #14: p9 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
DL Graph: add_edge #15: (not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #64
(<= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #62
(>= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 3: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 4 3
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim tgt, keep src

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 0 
W-DL: propagate_core
W-DL: propagate_atom: atom = p9 (>= (+ y (* (- 1) i!0)) 1) 
DL Graph: try enable edge #15: (not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
DL Graph: enable disabled edge #15: (not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}

W-DL: propagate_atom: atom = (not p4) (<= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}

W-DL: propagate_atom: atom = (not p3) (>= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
p7 (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
(not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0

W-DL: neg_cycle_conflict:
#62(>= (+ x (* (- 1) i!0)) 0) relevant: 1, val: l_true
(not #51)(not (>= (+ y (* (- 1) i!0)) 1)) relevant: 1, val: l_true

W-DL: pop_scope_eh: 2

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 


W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0
propagate_relevancy: marking as relevant:
(>= (+ x (* -1 i!0)) 0)
scope_level: 3
propagate_relevancy_to_args # 62
(>= (+ x (* (- 1) i!0)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 3
propagate_relevancy: marking as relevant:
(+ x (* -1 i!0))
scope_level: 3
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 63
(+ x (* (- 1) i!0))
propagate_relevancy: marking as relevant:
(* -1 i!0)
scope_level: 3
propagate_relevancy_to_args # 56
(* (- 1) i!0)
propagate_relevancy: marking as relevant:
i!0
scope_level: 3
propagate_relevancy_to_args # 42
i!0
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 i!0)) 1)
scope_level: 3
propagate_relevancy_to_args # 51
(>= (+ y (* (- 1) i!0)) 1)
propagate_relevancy: marking as relevant:
(+ y (* -1 i!0))
scope_level: 3
propagate_relevancy_to_args # 48
(+ y (* (- 1) i!0))
propagating... 5:6
propagate_relevancy: marking as relevant:
(not (>= (+ x #56) 0))
scope_level: 3
propagate_relevancy: marking as relevant:
(if (<= (+ x #56) 0) (<= (+ y #56) 0) (not (<= #48 1)))
scope_level: 3
propagate_relevancy_to_args # 54
(not (>= (+ x (* (- 1) i!0)) 0))
propagate_relevancy_to_args # 68
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!0)) 0)
scope_level: 3
propagate_relevancy_to_args # 64
(<= (+ x (* (- 1) i!0)) 0)
propagate_atoms: #51
(>= (+ y (* (- 1) i!0)) 1)
W-DL: assign_eh: 9: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim src, keep tgt
DL Graph: add_edge #14: p9 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
DL Graph: add_edge #15: (not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #62
(>= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 3: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = p9 (>= (+ y (* (- 1) i!0)) 1) 
DL Graph: try enable edge #15: (not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
DL Graph: enable disabled edge #15: (not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}

W-DL: propagate_atom: atom = p3 (>= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}

(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 

propagating... 7:8
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!0)) 0)
scope_level: 4
propagate_relevancy_to_args # 65
(<= (+ y (* (- 1) i!0)) 0)
propagate_atoms: #64
(<= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #65
(<= (+ y (* (- 1) i!0)) 0)
W-DL: assign_eh: 6: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #16: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
DL Graph: add_edge #17: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p4) (<= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
DL Graph: enable disabled edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}

W-DL: propagate_atom: atom = p6 (<= (+ y (* (- 1) i!0)) 0) 
DL Graph: try enable edge #17: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
DL Graph: enable disabled edge #17: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 5}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
p7 (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
(not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
(not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
disabled edge: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
(not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 5}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0

W-DL: neg_cycle_conflict:
(not #65)(not (<= (+ y (* (- 1) i!0)) 0)) relevant: 1, val: l_true
(not #51)(not (>= (+ y (* (- 1) i!0)) 1)) relevant: 1, val: l_true

W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 


W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
(not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
(not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!0)) 0)
scope_level: 3
propagate_relevancy_to_args # 65
(<= (+ y (* (- 1) i!0)) 0)
propagating... 7:8
propagate_relevancy: marking as relevant:
(not (<= (+ y #56) 1))
scope_level: 3
propagate_relevancy_to_args # 67
(not (<= (+ y (* (- 1) i!0)) 1))
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!0)) 1)
scope_level: 3
propagate_relevancy_to_args # 66
(<= (+ y (* (- 1) i!0)) 1)
propagate_atoms: #65
(<= (+ y (* (- 1) i!0)) 0)
W-DL: assign_eh: 6: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #16: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
DL Graph: add_edge #17: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #64
(<= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 4: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #66
(<= (+ y (* (- 1) i!0)) 1)
W-DL: assign_eh: 7: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #18: p7 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
DL Graph: add_edge #19: (not p7) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 4}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p6) (<= (+ y (* (- 1) i!0)) 0) 
DL Graph: try enable edge #16: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
DL Graph: enable disabled edge #16: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}

W-DL: propagate_atom: atom = p4 (<= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 5}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ x (* (- 1) i!0)) 0) 
p4 (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
(not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
(not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 5}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
(not p9) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
disabled edge: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: p7 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
disabled edge: (not p7) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 4}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0

W-DL: neg_cycle_conflict:
(not #64)(not (<= (+ x (* (- 1) i!0)) 0)) relevant: 1, val: l_true
#65(<= (+ y (* (- 1) i!0)) 0) relevant: 1, val: l_true

W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 


W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
(not p9) (>= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 5}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!0)) 0)
scope_level: 2
propagate_relevancy_to_args # 65
(<= (+ y (* (- 1) i!0)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 2
propagate_relevancy: marking as relevant:
(+ y (* -1 i!0))
scope_level: 2
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 48
(+ y (* (- 1) i!0))
propagate_relevancy: marking as relevant:
(* -1 i!0)
scope_level: 2
propagate_relevancy_to_args # 56
(* (- 1) i!0)
propagate_relevancy: marking as relevant:
i!0
scope_level: 2
propagate_relevancy_to_args # 42
i!0
propagate_relevancy: marking as relevant:
(if (<= (+ x #56) 0) (<= (+ y #56) 0) (not (<= #48 1)))
scope_level: 2
propagate_relevancy_to_args # 68
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!0)) 0)
scope_level: 2
propagate_relevancy_to_args # 64
(<= (+ x (* (- 1) i!0)) 0)
propagate_relevancy: marking as relevant:
(+ x (* -1 i!0))
scope_level: 2
propagate_relevancy_to_args # 63
(+ x (* (- 1) i!0))
propagating... 4:5
propagate_atoms: #65
(<= (+ y (* (- 1) i!0)) 0)
W-DL: assign_eh: 6: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #14: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
DL Graph: add_edge #15: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = p6 (<= (+ y (* (- 1) i!0)) 0) 
DL Graph: try enable edge #15: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
DL Graph: enable disabled edge #15: (not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}

(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 

propagating... 7:8
propagate_relevancy: marking as relevant:
(not (<= (+ y #56) 1))
scope_level: 3
propagate_relevancy: marking as relevant:
(not (<= (+ x #56) 0))
scope_level: 3
propagate_relevancy_to_args # 67
(not (<= (+ y (* (- 1) i!0)) 1))
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!0)) 1)
scope_level: 3
propagate_relevancy_to_args # 71
(not (<= (+ x (* (- 1) i!0)) 0))
propagate_relevancy_to_args # 66
(<= (+ y (* (- 1) i!0)) 1)
propagate_atoms: #64
(<= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 4: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #66
(<= (+ y (* (- 1) i!0)) 1)
W-DL: assign_eh: 7: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #16: p7 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
DL Graph: add_edge #17: (not p7) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = p4 (<= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 5}
DL Graph: enable disabled edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}

W-DL: propagate_atom: atom = (not p7) (<= (+ y (* (- 1) i!0)) 1) 
DL Graph: try enable edge #16: p7 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
DL Graph: enable disabled edge #16: p7 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
p4 (<= (+ x (* (- 1) i!0)) 0) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
(not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
(not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
p7 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
disabled edge: (not p7) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := -2

W-DL: neg_cycle_conflict:
#66(<= (+ y (* (- 1) i!0)) 1) relevant: 1, val: l_true
(not #64)(not (<= (+ x (* (- 1) i!0)) 0)) relevant: 1, val: l_true

W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 


W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
(not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := -2
propagating... 7:8
propagate_relevancy: marking as relevant:
(not (>= (+ x #56) 0))
scope_level: 2
propagate_relevancy_to_args # 54
(not (>= (+ x (* (- 1) i!0)) 0))
propagate_relevancy: marking as relevant:
(>= (+ x (* -1 i!0)) 0)
scope_level: 2
propagate_relevancy_to_args # 62
(>= (+ x (* (- 1) i!0)) 0)
propagate_atoms: #64
(<= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #62
(>= (+ x (* (- 1) i!0)) 0)
W-DL: assign_eh: 3: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p4) (<= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 4}
DL Graph: enable disabled edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}

W-DL: propagate_atom: atom = p3 (>= (+ x (* (- 1) i!0)) 0) 
DL Graph: try enable edge #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 3}
DL Graph: enable disabled edge #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
p9 (>= (+ y (* (- 1) i!0)) 1) 
p6 (<= (+ y (* (- 1) i!0)) 0) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
(not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 2}
(not p6) (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := -2
$4 := -2

W-DL: neg_cycle_conflict:
(not #62)(not (>= (+ x (* (- 1) i!0)) 0)) relevant: 1, val: l_true
(not #65)(not (<= (+ y (* (- 1) i!0)) 0)) relevant: 1, val: l_true

W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 


W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!0)) 0) 
(not p4) (<= (+ x (* (- 1) i!0)) 0) 
(not p6) (<= (+ y (* (- 1) i!0)) 0) 
(not p7) (<= (+ y (* (- 1) i!0)) 1) 
(not p9) (>= (+ y (* (- 1) i!0)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 4}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 4}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}
disabled edge: p6 (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: p7 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p7) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p9 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p9) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := -2
$4 := -2
propagate_relevancy: marking as relevant:
(if (<= (+ x #56) 0) (<= (+ y #56) 0) (not (<= #48 1)))
scope_level: 1
propagate_relevancy_to_args # 68
(let ((a!1 (not (<= (+ y (* (- 1) i!0)) 1))))
  (ite (<= (+ x (* (- 1) i!0)) 0) (<= (+ y (* (- 1) i!0)) 0) a!1))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!0)) 0)
scope_level: 1
propagate_relevancy_to_args # 64
(<= (+ x (* (- 1) i!0)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!0))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 63
(+ x (* (- 1) i!0))
propagate_relevancy: marking as relevant:
(* -1 i!0)
scope_level: 1
propagate_relevancy_to_args # 56
(* (- 1) i!0)
propagate_relevancy: marking as relevant:
i!0
scope_level: 1
propagate_relevancy_to_args # 42
i!0
propagating... 3:4
unsat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := -2
$4 := -2
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, (+ 1 x)
mk_eq_core: EQ = LE & GE
mk_eq_core: z, (+ 1 y)
mk_eq_core: EQ = LE & GE
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= (+ y (* (- 1) x)) 1)

internalize_assertion:
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

assert_default: expr #74:
(<= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

literal p-1:
(<= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)


internalize_theory_atom: #74 with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal p-1:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal p-1:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 1 with ast-ID #74:
(<= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= (+ y (* (- 1) x)) 1)

W-DL: expr:
(<= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #3, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) 1)
edge:
(not p1) (<= (+ y (* (- 1) x)) 1) 
	pos #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := -2

internalize_theory_atom: #74  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) 1)

literal p1:
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 74
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy_to_args # 25
y
propagate_relevancy_to_args # 26
x
propagate_relevancy_to_args # 43
(- 1)
assignment after one internalize_assertion:
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) 1)

internalize_assertion:
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

assert_default: expr #75:
(>= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

literal p21856:
(>= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)


internalize_theory_atom: #75 with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 2 with ast-ID #75:
(>= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= (+ y (* (- 1) x)) 1)

W-DL: expr:
(>= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #2, dst_id #3, weight: -1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) 1)
edge:
(not p2) (>= (+ y (* (- 1) x)) 1) 
	pos #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := -2

internalize_theory_atom: #75  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) 1)

literal p2:
(>= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 75
(>= (+ y (* (- 1) x)) 1)
assignment after one internalize_assertion:
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) z)) (- 1))

internalize_assertion:
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)

assert_default: expr #57:
(>= (+ y (* (- 1) z)) (- 1))

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)

literal p-1:
(>= (+ y (* (- 1) z)) (- 1))

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)


internalize_theory_atom: #57 with gate_ctx(1):
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) z)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) z))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: z

internalize_rec with gate_ctx(0):
z
z

literal p-1:
z

internalize_uninterpreted:
z
z

W-DL: enode mk_var: 4
W-DL: set_sort: z
W-DL: mk_var returns: z |-> 4

mk_bool_var: creating boolean variable: 3 with ast-ID #57:
(>= (+ y (* (- 1) z)) (- 1))
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(>= (+ y (* (- 1) z)) (- 1))

W-DL: expr:
(>= (+ y (* (- 1) z)) (- 1))
W-DL: edge: src_id #2, dst_id #4, weight: 1, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) z)) (- 1))
edge:
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
	pos #4: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #57  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) z)) (- 1))

literal p3:
(>= (+ y (* (- 1) z)) (- 1))
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 z)) -1)
scope_level: 1
propagate_relevancy_to_args # 57
(>= (+ y (* (- 1) z)) (- 1))
propagate_relevancy: marking as relevant:
(+ y (* -1 z))
scope_level: 1
propagate_relevancy_to_args # 60
(+ y (* (- 1) z))
propagate_relevancy: marking as relevant:
(* -1 z)
scope_level: 1
propagate_relevancy_to_args # 73
(* (- 1) z)
propagate_relevancy: marking as relevant:
z
scope_level: 1
propagate_relevancy_to_args # 30
z
assignment after one internalize_assertion:
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 z)) -1)


before internalize_assertion:
(<= (+ y (* (- 1) z)) (- 1))

internalize_assertion:
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)

assert_default: expr #47:
(<= (+ y (* (- 1) z)) (- 1))

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)

literal p-1:
(<= (+ y (* (- 1) z)) (- 1))

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)


internalize_theory_atom: #47 with gate_ctx(1):
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) z)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) z))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: z
W-DL: mk_var returns: z |-> 4

mk_bool_var: creating boolean variable: 4 with ast-ID #47:
(<= (+ y (* (- 1) z)) (- 1))
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(<= (+ y (* (- 1) z)) (- 1))

W-DL: expr:
(<= (+ y (* (- 1) z)) (- 1))
W-DL: edge: src_id #4, dst_id #2, weight: -1, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) z)) (- 1))
edge:
(not p4) (<= (+ y (* (- 1) z)) (- 1)) 
	pos #6: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ y (* (- 1) z)) (- 1)) 
(not p4) (<= (+ y (* (- 1) z)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0

internalize_theory_atom: #47  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) z)) (- 1))

literal p4:
(<= (+ y (* (- 1) z)) (- 1))
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 z)) -1)
scope_level: 1
propagate_relevancy_to_args # 47
(<= (+ y (* (- 1) z)) (- 1))
assignment after one internalize_assertion:
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 z)) -1)
#47 - l_true: (<= (+ y (* -1 z)) -1)


before internalize_assertion:
(not (<= (+ x (* (- 1) i!1)) 0))

internalize_assertion:
(not (<= (+ x (* (- 1) i!1)) 0))
#50 := (* -1 i!1)
#53 := (+ x #50)
#52 := (<= #53 0)
(not #52)

assert_default: expr #51:
(not (<= (+ x (* (- 1) i!1)) 0))

internalize_rec with gate_ctx(1):
(not (<= (+ x (* (- 1) i!1)) 0))
#50 := (* -1 i!1)
#53 := (+ x #50)
#52 := (<= #53 0)
(not #52)

literal (not p-1):
(not (<= (+ x (* (- 1) i!1)) 0))

internalize_formula: with gate_ctx(1):
(not (<= (+ x (* (- 1) i!1)) 0))
#50 := (* -1 i!1)
#53 := (+ x #50)
#52 := (<= #53 0)
(not #52)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!1)) 0)
#50 := (* -1 i!1)
#53 := (+ x #50)
(<= #53 0)

literal p-1:
(<= (+ x (* (- 1) i!1)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!1)) 0)
#50 := (* -1 i!1)
#53 := (+ x #50)
(<= #53 0)


internalize_theory_atom: #52 with gate_ctx(1):
(<= (+ x (* (- 1) i!1)) 0)
#50 := (* -1 i!1)
#53 := (+ x #50)
(<= #53 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!1)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!1))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!1

internalize_rec with gate_ctx(0):
i!1
i!1

literal p-1:
i!1

internalize_uninterpreted:
i!1
i!1

W-DL: enode mk_var: 5
W-DL: set_sort: i!1
W-DL: mk_var returns: i!1 |-> 5

mk_bool_var: creating boolean variable: 5 with ast-ID #52:
(<= (+ x (* (- 1) i!1)) 0)
mk_bool_var: created boolean variable: 5 with lbool(l_undef):
(<= (+ x (* (- 1) i!1)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!1)) 0)
W-DL: edge: src_id #5, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #8: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #9: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!1)) 0)
edge:
(not p5) (<= (+ x (* (- 1) i!1)) 0) 
	pos #8: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
	neg #9: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ y (* (- 1) z)) (- 1)) 
p4 (<= (+ y (* (- 1) z)) (- 1)) 
(not p5) (<= (+ x (* (- 1) i!1)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #52  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!1)) 0)

literal (not p5):
(not (<= (+ x (* (- 1) i!1)) 0))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!1)) 0)
scope_level: 1
propagate_relevancy_to_args # 52
(<= (+ x (* (- 1) i!1)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!1))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 53
(+ x (* (- 1) i!1))
propagate_relevancy: marking as relevant:
(* -1 i!1)
scope_level: 1
propagate_relevancy_to_args # 50
(* (- 1) i!1)
propagate_relevancy: marking as relevant:
i!1
scope_level: 1
propagate_relevancy_to_args # 58
i!1
assignment after one internalize_assertion:
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 z)) -1)
#47 - l_true: (<= (+ y (* -1 z)) -1)
(not #52) - l_true: (not (<= (+ x (* -1 i!1)) 0))


before internalize_assertion:
(<= (+ z (* (- 1) i!1)) 3)

internalize_assertion:
(<= (+ z (* (- 1) i!1)) 3)
#50 := (* -1 i!1)
#59 := (+ z #50)
(<= #59 3)

assert_default: expr #49:
(<= (+ z (* (- 1) i!1)) 3)

internalize_rec with gate_ctx(1):
(<= (+ z (* (- 1) i!1)) 3)
#50 := (* -1 i!1)
#59 := (+ z #50)
(<= #59 3)

literal p-1:
(<= (+ z (* (- 1) i!1)) 3)

internalize_formula: with gate_ctx(1):
(<= (+ z (* (- 1) i!1)) 3)
#50 := (* -1 i!1)
#59 := (+ z #50)
(<= #59 3)


internalize_theory_atom: #49 with gate_ctx(1):
(<= (+ z (* (- 1) i!1)) 3)
#50 := (* -1 i!1)
#59 := (+ z #50)
(<= #59 3)

W-DL: internalize_atom with gate_ctx(1): (<= (+ z (* (- 1) i!1)) 3)
W-DL: internalize_atom: LHS = (+ z (* (- 1) i!1))
W-DL: internalize_atom: RHS = 3
W-DL: is_sign: (- 1)
W-DL: mk_var starts: z
W-DL: mk_var returns: z |-> 4
W-DL: mk_var starts: i!1
W-DL: mk_var returns: i!1 |-> 5

mk_bool_var: creating boolean variable: 6 with ast-ID #49:
(<= (+ z (* (- 1) i!1)) 3)
mk_bool_var: created boolean variable: 6 with lbool(l_undef):
(<= (+ z (* (- 1) i!1)) 3)

W-DL: expr:
(<= (+ z (* (- 1) i!1)) 3)
W-DL: edge: src_id #5, dst_id #4, weight: 3, gate_ctx(1)
DL Graph: add_edge #10: p6 (<= (- dst$4 src$5) [weight: 3] ) {timestamp: 0}
DL Graph: add_edge #11: (not p6) (<= (- dst$5 src$4) [weight: -4] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ z (* (- 1) i!1)) 3)
edge:
(not p6) (<= (+ z (* (- 1) i!1)) 3) 
	pos #10: p6 (<= (- dst$4 src$5) [weight: 3] ) {timestamp: 0}
	neg #11: (not p6) (<= (- dst$5 src$4) [weight: -4] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ y (* (- 1) z)) (- 1)) 
p4 (<= (+ y (* (- 1) z)) (- 1)) 
p5 (<= (+ x (* (- 1) i!1)) 0) 
(not p6) (<= (+ z (* (- 1) i!1)) 3) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$4 src$5) [weight: 3] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$5 src$4) [weight: -4] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #49  with gate_ctx(1) internalization succeeded
(<= (+ z (* (- 1) i!1)) 3)

literal p6:
(<= (+ z (* (- 1) i!1)) 3)
propagate_relevancy: marking as relevant:
(<= (+ z (* -1 i!1)) 3)
scope_level: 1
propagate_relevancy_to_args # 49
(<= (+ z (* (- 1) i!1)) 3)
propagate_relevancy: marking as relevant:
3
scope_level: 1
propagate_relevancy: marking as relevant:
(+ z (* -1 i!1))
scope_level: 1
propagate_relevancy_to_args # 36
3
propagate_relevancy_to_args # 59
(+ z (* (- 1) i!1))
assignment after one internalize_assertion:
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 z)) -1)
#47 - l_true: (<= (+ y (* -1 z)) -1)
(not #52) - l_true: (not (<= (+ x (* -1 i!1)) 0))
#49 - l_true: (<= (+ z (* -1 i!1)) 3)

assignment after internalize_assertions():
current assignment:
#74 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 z)) -1)
#47 - l_true: (<= (+ y (* -1 z)) -1)
(not #52) - l_true: (not (<= (+ x (* -1 i!1)) 0))
#49 - l_true: (<= (+ z (* -1 i!1)) 3)

(smt.searching)
propagating... 0:6
propagate_atoms: #74
(<= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #75
(>= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #57
(>= (+ y (* (- 1) z)) (- 1))
W-DL: assign_eh: 3: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 3
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim src, keep tgt
DL Graph: add_edge #12: p3 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}
DL Graph: add_edge #13: (not p3) (<= (- dst$3 src$4) [weight: -3] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #47
(<= (+ y (* (- 1) z)) (- 1))
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 4
W-DL: EQUAL
W-DL: eliminable tgt, get tgt_old
W-DL: elim src
DL Graph: add_edge #14: p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: add_edge #15: p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 2 
propagate_atoms: #52
(<= (+ x (* (- 1) i!1)) 0)
W-DL: assign_eh: 5: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 2 
propagate_atoms: #49
(<= (+ z (* (- 1) i!1)) 3)
W-DL: assign_eh: 6: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #16: p6 (<= (- dst$3 src$5) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #17: (not p6) (<= (- dst$5 src$3) [weight: -2] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 2 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}

W-DL: propagate_atom: atom = (not p3) (>= (+ y (* (- 1) z)) (- 1)) 
DL Graph: try enable edge #14: p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: enable disabled edge #14: p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 2}

W-DL: propagate_atom: atom = (not p4) (<= (+ y (* (- 1) z)) (- 1)) 
DL Graph: try enable edge #15: p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}
DL Graph: enable disabled edge #15: p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 3}

W-DL: propagate_atom: atom = p5 (<= (+ x (* (- 1) i!1)) 0) 
DL Graph: try enable edge #9: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #9: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 4}

W-DL: propagate_atom: atom = (not p6) (<= (+ z (* (- 1) i!1)) 3) 
DL Graph: try enable edge #16: p6 (<= (- dst$3 src$5) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #16: p6 (<= (- dst$3 src$5) [weight: 1] ) {timestamp: 5}


W-DL: final_check_eh
W-DL: final_check - done
sat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := -2
$4 := 0
$5 := -3
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, (+ 1 x)
mk_eq_core: EQ = LE & GE
mk_eq_core: z, (+ 1 y)
mk_eq_core: EQ = LE & GE
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= (+ y (* (- 1) x)) 1)

internalize_assertion:
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

assert_default: expr #47:
(<= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

literal p-1:
(<= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)


internalize_theory_atom: #47 with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal p-1:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal p-1:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 1 with ast-ID #47:
(<= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= (+ y (* (- 1) x)) 1)

W-DL: expr:
(<= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #3, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) 1)
edge:
(not p1) (<= (+ y (* (- 1) x)) 1) 
	pos #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := -3

internalize_theory_atom: #47  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) 1)

literal p1:
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 47
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy_to_args # 25
y
propagate_relevancy_to_args # 26
x
propagate_relevancy_to_args # 43
(- 1)
assignment after one internalize_assertion:
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) 1)

internalize_assertion:
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

assert_default: expr #57:
(>= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

literal p-1:
(>= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)


internalize_theory_atom: #57 with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 2 with ast-ID #57:
(>= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= (+ y (* (- 1) x)) 1)

W-DL: expr:
(>= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #2, dst_id #3, weight: -1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) 1)
edge:
(not p2) (>= (+ y (* (- 1) x)) 1) 
	pos #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := -3

internalize_theory_atom: #57  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) 1)

literal p2:
(>= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 57
(>= (+ y (* (- 1) x)) 1)
assignment after one internalize_assertion:
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) z)) (- 1))

internalize_assertion:
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)

assert_default: expr #46:
(>= (+ y (* (- 1) z)) (- 1))

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)

literal p-1:
(>= (+ y (* (- 1) z)) (- 1))

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)


internalize_theory_atom: #46 with gate_ctx(1):
(>= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(>= #60 -1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) z)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) z))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: z

internalize_rec with gate_ctx(0):
z
z

literal p-1:
z

internalize_uninterpreted:
z
z

W-DL: enode mk_var: 4
W-DL: set_sort: z
W-DL: mk_var returns: z |-> 4

mk_bool_var: creating boolean variable: 3 with ast-ID #46:
(>= (+ y (* (- 1) z)) (- 1))
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(>= (+ y (* (- 1) z)) (- 1))

W-DL: expr:
(>= (+ y (* (- 1) z)) (- 1))
W-DL: edge: src_id #2, dst_id #4, weight: 1, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) z)) (- 1))
edge:
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
	pos #4: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := -3

internalize_theory_atom: #46  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) z)) (- 1))

literal p3:
(>= (+ y (* (- 1) z)) (- 1))
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 z)) -1)
scope_level: 1
propagate_relevancy_to_args # 46
(>= (+ y (* (- 1) z)) (- 1))
propagate_relevancy: marking as relevant:
(+ y (* -1 z))
scope_level: 1
propagate_relevancy_to_args # 60
(+ y (* (- 1) z))
propagate_relevancy: marking as relevant:
(* -1 z)
scope_level: 1
propagate_relevancy_to_args # 73
(* (- 1) z)
propagate_relevancy: marking as relevant:
z
scope_level: 1
propagate_relevancy_to_args # 30
z
assignment after one internalize_assertion:
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 x)) 1)
#46 - l_true: (>= (+ y (* -1 z)) -1)


before internalize_assertion:
(<= (+ y (* (- 1) z)) (- 1))

internalize_assertion:
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)

assert_default: expr #76:
(<= (+ y (* (- 1) z)) (- 1))

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)

literal true:
(<= (+ y (* (- 1) z)) (- 1))

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)


internalize_theory_atom: #76 with gate_ctx(1):
(<= (+ y (* (- 1) z)) (- 1))
#73 := (* -1 z)
#60 := (+ y #73)
(<= #60 -1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) z)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) z))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: z
W-DL: mk_var returns: z |-> 4

mk_bool_var: creating boolean variable: 4 with ast-ID #76:
(<= (+ y (* (- 1) z)) (- 1))
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(<= (+ y (* (- 1) z)) (- 1))

W-DL: expr:
(<= (+ y (* (- 1) z)) (- 1))
W-DL: edge: src_id #4, dst_id #2, weight: -1, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) z)) (- 1))
edge:
(not p4) (<= (+ y (* (- 1) z)) (- 1)) 
	pos #6: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ y (* (- 1) z)) (- 1)) 
(not p4) (<= (+ y (* (- 1) z)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := -3

internalize_theory_atom: #76  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) z)) (- 1))

literal p4:
(<= (+ y (* (- 1) z)) (- 1))
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 z)) -1)
scope_level: 1
propagate_relevancy_to_args # 76
(<= (+ y (* (- 1) z)) (- 1))
assignment after one internalize_assertion:
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 x)) 1)
#46 - l_true: (>= (+ y (* -1 z)) -1)
#76 - l_true: (<= (+ y (* -1 z)) -1)


before internalize_assertion:
(<= (+ z (* (- 1) i!2)) 2)

internalize_assertion:
(<= (+ z (* (- 1) i!2)) 2)
#74 := (* -1 i!2)
#70 := (+ z #74)
(<= #70 2)

assert_default: expr #75:
(<= (+ z (* (- 1) i!2)) 2)

internalize_rec with gate_ctx(1):
(<= (+ z (* (- 1) i!2)) 2)
#74 := (* -1 i!2)
#70 := (+ z #74)
(<= #70 2)

literal p-1:
(<= (+ z (* (- 1) i!2)) 2)

internalize_formula: with gate_ctx(1):
(<= (+ z (* (- 1) i!2)) 2)
#74 := (* -1 i!2)
#70 := (+ z #74)
(<= #70 2)


internalize_theory_atom: #75 with gate_ctx(1):
(<= (+ z (* (- 1) i!2)) 2)
#74 := (* -1 i!2)
#70 := (+ z #74)
(<= #70 2)

W-DL: internalize_atom with gate_ctx(1): (<= (+ z (* (- 1) i!2)) 2)
W-DL: internalize_atom: LHS = (+ z (* (- 1) i!2))
W-DL: internalize_atom: RHS = 2
W-DL: is_sign: (- 1)
W-DL: mk_var starts: z
W-DL: mk_var returns: z |-> 4
W-DL: mk_var starts: i!2

internalize_rec with gate_ctx(0):
i!2
i!2

literal true:
i!2

internalize_uninterpreted:
i!2
i!2

W-DL: enode mk_var: 5
W-DL: set_sort: i!2
W-DL: mk_var returns: i!2 |-> 5

mk_bool_var: creating boolean variable: 5 with ast-ID #75:
(<= (+ z (* (- 1) i!2)) 2)
mk_bool_var: created boolean variable: 5 with lbool(l_undef):
(<= (+ z (* (- 1) i!2)) 2)

W-DL: expr:
(<= (+ z (* (- 1) i!2)) 2)
W-DL: edge: src_id #5, dst_id #4, weight: 2, gate_ctx(1)
DL Graph: add_edge #8: p5 (<= (- dst$4 src$5) [weight: 2] ) {timestamp: 0}
DL Graph: add_edge #9: (not p5) (<= (- dst$5 src$4) [weight: -3] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ z (* (- 1) i!2)) 2)
edge:
(not p5) (<= (+ z (* (- 1) i!2)) 2) 
	pos #8: p5 (<= (- dst$4 src$5) [weight: 2] ) {timestamp: 0}
	neg #9: (not p5) (<= (- dst$5 src$4) [weight: -3] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ y (* (- 1) z)) (- 1)) 
p4 (<= (+ y (* (- 1) z)) (- 1)) 
(not p5) (<= (+ z (* (- 1) i!2)) 2) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$4 src$5) [weight: 2] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$5 src$4) [weight: -3] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #75  with gate_ctx(1) internalization succeeded
(<= (+ z (* (- 1) i!2)) 2)

literal p5:
(<= (+ z (* (- 1) i!2)) 2)
propagate_relevancy: marking as relevant:
(<= (+ z (* -1 i!2)) 2)
scope_level: 1
propagate_relevancy_to_args # 75
(<= (+ z (* (- 1) i!2)) 2)
propagate_relevancy: marking as relevant:
2
scope_level: 1
propagate_relevancy: marking as relevant:
(+ z (* -1 i!2))
scope_level: 1
propagate_relevancy_to_args # 37
2
propagate_relevancy_to_args # 70
(+ z (* (- 1) i!2))
propagate_relevancy: marking as relevant:
(* -1 i!2)
scope_level: 1
propagate_relevancy_to_args # 74
(* (- 1) i!2)
propagate_relevancy: marking as relevant:
i!2
scope_level: 1
propagate_relevancy_to_args # 81
i!2
assignment after one internalize_assertion:
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 x)) 1)
#46 - l_true: (>= (+ y (* -1 z)) -1)
#76 - l_true: (<= (+ y (* -1 z)) -1)
#75 - l_true: (<= (+ z (* -1 i!2)) 2)


before internalize_assertion:
(not (<= (+ x (* (- 1) i!2)) 0))

internalize_assertion:
(not (<= (+ x (* (- 1) i!2)) 0))
#74 := (* -1 i!2)
#68 := (+ x #74)
#66 := (<= #68 0)
(not #66)

assert_default: expr #78:
(not (<= (+ x (* (- 1) i!2)) 0))

internalize_rec with gate_ctx(1):
(not (<= (+ x (* (- 1) i!2)) 0))
#74 := (* -1 i!2)
#68 := (+ x #74)
#66 := (<= #68 0)
(not #66)

literal (not p-1):
(not (<= (+ x (* (- 1) i!2)) 0))

internalize_formula: with gate_ctx(1):
(not (<= (+ x (* (- 1) i!2)) 0))
#74 := (* -1 i!2)
#68 := (+ x #74)
#66 := (<= #68 0)
(not #66)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!2)) 0)
#74 := (* -1 i!2)
#68 := (+ x #74)
(<= #68 0)

literal p-1:
(<= (+ x (* (- 1) i!2)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!2)) 0)
#74 := (* -1 i!2)
#68 := (+ x #74)
(<= #68 0)


internalize_theory_atom: #66 with gate_ctx(1):
(<= (+ x (* (- 1) i!2)) 0)
#74 := (* -1 i!2)
#68 := (+ x #74)
(<= #68 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!2)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!2))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!2
W-DL: mk_var returns: i!2 |-> 5

mk_bool_var: creating boolean variable: 6 with ast-ID #66:
(<= (+ x (* (- 1) i!2)) 0)
mk_bool_var: created boolean variable: 6 with lbool(l_undef):
(<= (+ x (* (- 1) i!2)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!2)) 0)
W-DL: edge: src_id #5, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #10: p6 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #11: (not p6) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!2)) 0)
edge:
(not p6) (<= (+ x (* (- 1) i!2)) 0) 
	pos #10: p6 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
	neg #11: (not p6) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ y (* (- 1) z)) (- 1)) 
p4 (<= (+ y (* (- 1) z)) (- 1)) 
p5 (<= (+ z (* (- 1) i!2)) 2) 
(not p6) (<= (+ x (* (- 1) i!2)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$4 src$5) [weight: 2] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$5 src$4) [weight: -3] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #66  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!2)) 0)

literal (not p6):
(not (<= (+ x (* (- 1) i!2)) 0))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!2)) 0)
scope_level: 1
propagate_relevancy_to_args # 66
(<= (+ x (* (- 1) i!2)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!2))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 68
(+ x (* (- 1) i!2))
assignment after one internalize_assertion:
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 x)) 1)
#46 - l_true: (>= (+ y (* -1 z)) -1)
#76 - l_true: (<= (+ y (* -1 z)) -1)
#75 - l_true: (<= (+ z (* -1 i!2)) 2)
(not #66) - l_true: (not (<= (+ x (* -1 i!2)) 0))

assignment after internalize_assertions():
current assignment:
#47 - l_true: (<= (+ y (* -1 x)) 1)
#57 - l_true: (>= (+ y (* -1 x)) 1)
#46 - l_true: (>= (+ y (* -1 z)) -1)
#76 - l_true: (<= (+ y (* -1 z)) -1)
#75 - l_true: (<= (+ z (* -1 i!2)) 2)
(not #66) - l_true: (not (<= (+ x (* -1 i!2)) 0))

(smt.searching)
propagating... 0:6
propagate_atoms: #47
(<= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #57
(>= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #46
(>= (+ y (* (- 1) z)) (- 1))
W-DL: assign_eh: 3: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 3
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim src, keep tgt
DL Graph: add_edge #12: p3 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}
DL Graph: add_edge #13: (not p3) (<= (- dst$3 src$4) [weight: -3] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #76
(<= (+ y (* (- 1) z)) (- 1))
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 4
W-DL: EQUAL
W-DL: eliminable tgt, get tgt_old
W-DL: elim src
DL Graph: add_edge #14: p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: add_edge #15: p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 2 
propagate_atoms: #75
(<= (+ z (* (- 1) i!2)) 2)
W-DL: assign_eh: 5: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 4 2
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #16: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #17: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 2 
propagate_atoms: #66
(<= (+ x (* (- 1) i!2)) 0)
W-DL: assign_eh: 6: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 2 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}

W-DL: propagate_atom: atom = (not p3) (>= (+ y (* (- 1) z)) (- 1)) 
DL Graph: try enable edge #14: p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: enable disabled edge #14: p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 2}

W-DL: propagate_atom: atom = (not p4) (<= (+ y (* (- 1) z)) (- 1)) 
DL Graph: try enable edge #15: p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}
DL Graph: enable disabled edge #15: p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 3}

W-DL: propagate_atom: atom = (not p5) (<= (+ z (* (- 1) i!2)) 2) 
DL Graph: try enable edge #16: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #16: p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 4}

W-DL: propagate_atom: atom = p6 (<= (+ x (* (- 1) i!2)) 0) 
DL Graph: try enable edge #11: (not p6) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #11: (not p6) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 5}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
(not p4) (<= (+ y (* (- 1) z)) (- 1)) 
(not p5) (<= (+ z (* (- 1) i!2)) 2) 
p6 (<= (+ x (* (- 1) i!2)) 0) 
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
(not p3) (>= (+ y (* (- 1) z)) (- 1)) 
(not p4) (<= (+ y (* (- 1) z)) (- 1)) 
(not p5) (<= (+ z (* (- 1) i!2)) 2) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$2 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$4 src$5) [weight: 2] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$5 src$4) [weight: -3] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 0}
(not p6) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 5}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -3] ) {timestamp: 0}
p3 (<= (- dst$3 src$4) [weight: -2] ) {timestamp: 2}
p4 (<= (- dst$4 src$3) [weight: 2] ) {timestamp: 3}
p5 (<= (- dst$3 src$5) [weight: 0] ) {timestamp: 4}
disabled edge: (not p5) (<= (- dst$5 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := -2
$4 := 0
$5 := 0

W-DL: neg_cycle_conflict:
(not #66)(not (<= (+ x (* (- 1) i!2)) 0)) relevant: 1, val: l_true
#75(<= (+ z (* (- 1) i!2)) 2) relevant: 1, val: l_true

unsat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := -2
$4 := 0
$5 := 0
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, (+ 1 x)
mk_eq_core: EQ = LE & GE
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= (+ y (* (- 1) x)) 1)

internalize_assertion:
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

assert_default: expr #66:
(<= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

literal p-1:
(<= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)


internalize_theory_atom: #66 with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal p-1:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal p-1:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 1 with ast-ID #66:
(<= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= (+ y (* (- 1) x)) 1)

W-DL: expr:
(<= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #3, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) 1)
edge:
(not p1) (<= (+ y (* (- 1) x)) 1) 
	pos #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #66  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) 1)

literal p1:
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 66
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy_to_args # 25
y
propagate_relevancy_to_args # 26
x
propagate_relevancy_to_args # 43
(- 1)
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) 1)

internalize_assertion:
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

assert_default: expr #78:
(>= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

literal true:
(>= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)


internalize_theory_atom: #78 with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 2 with ast-ID #78:
(>= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= (+ y (* (- 1) x)) 1)

W-DL: expr:
(>= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #2, dst_id #3, weight: -1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) 1)
edge:
(not p2) (>= (+ y (* (- 1) x)) 1) 
	pos #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #78  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) 1)

literal p2:
(>= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 78
(>= (+ y (* (- 1) x)) 1)
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) 1)
#78 - l_true: (>= (+ y (* -1 x)) 1)


before internalize_assertion:
(<= (+ y (* (- 1) i!3)) 1)

internalize_assertion:
(<= (+ y (* (- 1) i!3)) 1)
#41 := (* -1 i!3)
#68 := (+ y #41)
(<= #68 1)

assert_default: expr #51:
(<= (+ y (* (- 1) i!3)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) i!3)) 1)
#41 := (* -1 i!3)
#68 := (+ y #41)
(<= #68 1)

literal p-1:
(<= (+ y (* (- 1) i!3)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) i!3)) 1)
#41 := (* -1 i!3)
#68 := (+ y #41)
(<= #68 1)


internalize_theory_atom: #51 with gate_ctx(1):
(<= (+ y (* (- 1) i!3)) 1)
#41 := (* -1 i!3)
#68 := (+ y #41)
(<= #68 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) i!3)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) i!3))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: i!3

internalize_rec with gate_ctx(0):
i!3
i!3

literal p-1:
i!3

internalize_uninterpreted:
i!3
i!3

W-DL: enode mk_var: 4
W-DL: set_sort: i!3
W-DL: mk_var returns: i!3 |-> 4

mk_bool_var: creating boolean variable: 3 with ast-ID #51:
(<= (+ y (* (- 1) i!3)) 1)
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(<= (+ y (* (- 1) i!3)) 1)

W-DL: expr:
(<= (+ y (* (- 1) i!3)) 1)
W-DL: edge: src_id #4, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) i!3)) 1)
edge:
(not p3) (<= (+ y (* (- 1) i!3)) 1) 
	pos #4: p3 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (<= (+ y (* (- 1) i!3)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #51  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) i!3)) 1)

literal p3:
(<= (+ y (* (- 1) i!3)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!3)) 1)
scope_level: 1
propagate_relevancy_to_args # 51
(<= (+ y (* (- 1) i!3)) 1)
propagate_relevancy: marking as relevant:
(+ y (* -1 i!3))
scope_level: 1
propagate_relevancy_to_args # 68
(+ y (* (- 1) i!3))
propagate_relevancy: marking as relevant:
(* -1 i!3)
scope_level: 1
propagate_relevancy_to_args # 41
(* (- 1) i!3)
propagate_relevancy: marking as relevant:
i!3
scope_level: 1
propagate_relevancy_to_args # 70
i!3
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) 1)
#78 - l_true: (>= (+ y (* -1 x)) 1)
#51 - l_true: (<= (+ y (* -1 i!3)) 1)


before internalize_assertion:
(not (<= (+ x (* (- 1) i!3)) 0))

internalize_assertion:
(not (<= (+ x (* (- 1) i!3)) 0))
#41 := (* -1 i!3)
#59 := (+ x #41)
#65 := (<= #59 0)
(not #65)

assert_default: expr #88:
(not (<= (+ x (* (- 1) i!3)) 0))

internalize_rec with gate_ctx(1):
(not (<= (+ x (* (- 1) i!3)) 0))
#41 := (* -1 i!3)
#59 := (+ x #41)
#65 := (<= #59 0)
(not #65)

literal (not p-1):
(not (<= (+ x (* (- 1) i!3)) 0))

internalize_formula: with gate_ctx(1):
(not (<= (+ x (* (- 1) i!3)) 0))
#41 := (* -1 i!3)
#59 := (+ x #41)
#65 := (<= #59 0)
(not #65)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!3)) 0)
#41 := (* -1 i!3)
#59 := (+ x #41)
(<= #59 0)

literal p-1:
(<= (+ x (* (- 1) i!3)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!3)) 0)
#41 := (* -1 i!3)
#59 := (+ x #41)
(<= #59 0)


internalize_theory_atom: #65 with gate_ctx(1):
(<= (+ x (* (- 1) i!3)) 0)
#41 := (* -1 i!3)
#59 := (+ x #41)
(<= #59 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!3)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!3))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!3
W-DL: mk_var returns: i!3 |-> 4

mk_bool_var: creating boolean variable: 4 with ast-ID #65:
(<= (+ x (* (- 1) i!3)) 0)
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(<= (+ x (* (- 1) i!3)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!3)) 0)
W-DL: edge: src_id #4, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!3)) 0)
edge:
(not p4) (<= (+ x (* (- 1) i!3)) 0) 
	pos #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (<= (+ y (* (- 1) i!3)) 1) 
(not p4) (<= (+ x (* (- 1) i!3)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #65  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!3)) 0)

literal (not p4):
(not (<= (+ x (* (- 1) i!3)) 0))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!3)) 0)
scope_level: 1
propagate_relevancy_to_args # 65
(<= (+ x (* (- 1) i!3)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!3))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 59
(+ x (* (- 1) i!3))
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) 1)
#78 - l_true: (>= (+ y (* -1 x)) 1)
#51 - l_true: (<= (+ y (* -1 i!3)) 1)
(not #65) - l_true: (not (<= (+ x (* -1 i!3)) 0))

assignment after internalize_assertions():
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) 1)
#78 - l_true: (>= (+ y (* -1 x)) 1)
#51 - l_true: (<= (+ y (* -1 i!3)) 1)
(not #65) - l_true: (not (<= (+ x (* -1 i!3)) 0))

(smt.searching)
propagating... 0:4
propagate_atoms: #66
(<= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #78
(>= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #51
(<= (+ y (* (- 1) i!3)) 1)
W-DL: assign_eh: 3: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 3
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #8: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #9: (not p3) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #65
(<= (+ x (* (- 1) i!3)) 0)
W-DL: assign_eh: 4: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}

W-DL: propagate_atom: atom = (not p3) (<= (+ y (* (- 1) i!3)) 1) 
DL Graph: try enable edge #8: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #8: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 2}

W-DL: propagate_atom: atom = p4 (<= (+ x (* (- 1) i!3)) 0) 
DL Graph: try enable edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (<= (+ y (* (- 1) i!3)) 1) 
p4 (<= (+ x (* (- 1) i!3)) 0) 
(not p3) (<= (+ y (* (- 1) i!3)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
(not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 3}
p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 2}
disabled edge: (not p3) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0
$5 := 0

W-DL: neg_cycle_conflict:
(not #65)(not (<= (+ x (* (- 1) i!3)) 0)) relevant: 1, val: l_true
#51(<= (+ y (* (- 1) i!3)) 1) relevant: 1, val: l_true

unsat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := -1
$4 := 0
$5 := 0
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, (+ (- 1) x)
mk_eq_core: EQ = LE & GE
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= (+ y (* (- 1) x)) (- 1))

internalize_assertion:
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)

assert_default: expr #66:
(<= (+ y (* (- 1) x)) (- 1))

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)

literal p-1:
(<= (+ y (* (- 1) x)) (- 1))

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)


internalize_theory_atom: #66 with gate_ctx(1):
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal p-1:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal p-1:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 1 with ast-ID #66:
(<= (+ y (* (- 1) x)) (- 1))
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= (+ y (* (- 1) x)) (- 1))

W-DL: expr:
(<= (+ y (* (- 1) x)) (- 1))
W-DL: edge: src_id #3, dst_id #2, weight: -1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) (- 1))
edge:
(not p1) (<= (+ y (* (- 1) x)) (- 1)) 
	pos #0: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #66  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) (- 1))

literal p1:
(<= (+ y (* (- 1) x)) (- 1))
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) -1)
scope_level: 1
propagate_relevancy_to_args # 66
(<= (+ y (* (- 1) x)) (- 1))
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 43
(- 1)
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy_to_args # 25
y
propagate_relevancy_to_args # 26
x
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) -1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) (- 1))

internalize_assertion:
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)

assert_default: expr #52:
(>= (+ y (* (- 1) x)) (- 1))

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)

literal p-1:
(>= (+ y (* (- 1) x)) (- 1))

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)


internalize_theory_atom: #52 with gate_ctx(1):
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 2 with ast-ID #52:
(>= (+ y (* (- 1) x)) (- 1))
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= (+ y (* (- 1) x)) (- 1))

W-DL: expr:
(>= (+ y (* (- 1) x)) (- 1))
W-DL: edge: src_id #2, dst_id #3, weight: 1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) (- 1))
edge:
(not p2) (>= (+ y (* (- 1) x)) (- 1)) 
	pos #2: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) (- 1)) 
(not p2) (>= (+ y (* (- 1) x)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #52  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) (- 1))

literal p2:
(>= (+ y (* (- 1) x)) (- 1))
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) -1)
scope_level: 1
propagate_relevancy_to_args # 52
(>= (+ y (* (- 1) x)) (- 1))
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) -1)
#52 - l_true: (>= (+ y (* -1 x)) -1)


before internalize_assertion:
(not (<= (+ x (* (- 1) i!4)) 0))

internalize_assertion:
(not (<= (+ x (* (- 1) i!4)) 0))
#59 := (* -1 i!4)
#65 := (+ x #59)
#76 := (<= #65 0)
(not #76)

assert_default: expr #86:
(not (<= (+ x (* (- 1) i!4)) 0))

internalize_rec with gate_ctx(1):
(not (<= (+ x (* (- 1) i!4)) 0))
#59 := (* -1 i!4)
#65 := (+ x #59)
#76 := (<= #65 0)
(not #76)

literal (not p-1):
(not (<= (+ x (* (- 1) i!4)) 0))

internalize_formula: with gate_ctx(1):
(not (<= (+ x (* (- 1) i!4)) 0))
#59 := (* -1 i!4)
#65 := (+ x #59)
#76 := (<= #65 0)
(not #76)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!4)) 0)
#59 := (* -1 i!4)
#65 := (+ x #59)
(<= #65 0)

literal p-1:
(<= (+ x (* (- 1) i!4)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!4)) 0)
#59 := (* -1 i!4)
#65 := (+ x #59)
(<= #65 0)


internalize_theory_atom: #76 with gate_ctx(1):
(<= (+ x (* (- 1) i!4)) 0)
#59 := (* -1 i!4)
#65 := (+ x #59)
(<= #65 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!4)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!4))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!4

internalize_rec with gate_ctx(0):
i!4
i!4

literal true:
i!4

internalize_uninterpreted:
i!4
i!4

W-DL: enode mk_var: 4
W-DL: set_sort: i!4
W-DL: mk_var returns: i!4 |-> 4

mk_bool_var: creating boolean variable: 3 with ast-ID #76:
(<= (+ x (* (- 1) i!4)) 0)
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(<= (+ x (* (- 1) i!4)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!4)) 0)
W-DL: edge: src_id #4, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!4)) 0)
edge:
(not p3) (<= (+ x (* (- 1) i!4)) 0) 
	pos #4: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) (- 1)) 
p2 (>= (+ y (* (- 1) x)) (- 1)) 
(not p3) (<= (+ x (* (- 1) i!4)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #76  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!4)) 0)

literal (not p3):
(not (<= (+ x (* (- 1) i!4)) 0))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!4)) 0)
scope_level: 1
propagate_relevancy_to_args # 76
(<= (+ x (* (- 1) i!4)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!4))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 65
(+ x (* (- 1) i!4))
propagate_relevancy: marking as relevant:
(* -1 i!4)
scope_level: 1
propagate_relevancy_to_args # 59
(* (- 1) i!4)
propagate_relevancy: marking as relevant:
i!4
scope_level: 1
propagate_relevancy_to_args # 88
i!4
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) -1)
#52 - l_true: (>= (+ y (* -1 x)) -1)
(not #76) - l_true: (not (<= (+ x (* -1 i!4)) 0))


before internalize_assertion:
(<= (+ y (* (- 1) i!4)) 1)

internalize_assertion:
(<= (+ y (* (- 1) i!4)) 1)
#59 := (* -1 i!4)
#51 := (+ y #59)
(<= #51 1)

assert_default: expr #68:
(<= (+ y (* (- 1) i!4)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) i!4)) 1)
#59 := (* -1 i!4)
#51 := (+ y #59)
(<= #51 1)

literal p-1:
(<= (+ y (* (- 1) i!4)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) i!4)) 1)
#59 := (* -1 i!4)
#51 := (+ y #59)
(<= #51 1)


internalize_theory_atom: #68 with gate_ctx(1):
(<= (+ y (* (- 1) i!4)) 1)
#59 := (* -1 i!4)
#51 := (+ y #59)
(<= #51 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) i!4)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) i!4))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: i!4
W-DL: mk_var returns: i!4 |-> 4

mk_bool_var: creating boolean variable: 4 with ast-ID #68:
(<= (+ y (* (- 1) i!4)) 1)
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(<= (+ y (* (- 1) i!4)) 1)

W-DL: expr:
(<= (+ y (* (- 1) i!4)) 1)
W-DL: edge: src_id #4, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) i!4)) 1)
edge:
(not p4) (<= (+ y (* (- 1) i!4)) 1) 
	pos #6: p4 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) (- 1)) 
p2 (>= (+ y (* (- 1) x)) (- 1)) 
p3 (<= (+ x (* (- 1) i!4)) 0) 
(not p4) (<= (+ y (* (- 1) i!4)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #68  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) i!4)) 1)

literal p4:
(<= (+ y (* (- 1) i!4)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 i!4)) 1)
scope_level: 1
propagate_relevancy_to_args # 68
(<= (+ y (* (- 1) i!4)) 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 i!4))
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 51
(+ y (* (- 1) i!4))
assignment after one internalize_assertion:
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) -1)
#52 - l_true: (>= (+ y (* -1 x)) -1)
(not #76) - l_true: (not (<= (+ x (* -1 i!4)) 0))
#68 - l_true: (<= (+ y (* -1 i!4)) 1)

assignment after internalize_assertions():
current assignment:
#66 - l_true: (<= (+ y (* -1 x)) -1)
#52 - l_true: (>= (+ y (* -1 x)) -1)
(not #76) - l_true: (not (<= (+ x (* -1 i!4)) 0))
#68 - l_true: (<= (+ y (* -1 i!4)) 1)

(smt.searching)
propagating... 0:4
propagate_atoms: #66
(<= (+ y (* (- 1) x)) (- 1))
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #52
(>= (+ y (* (- 1) x)) (- 1))
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: not exist before
W-DL: positive weight, elim tgt, keep src

W-DL: equation list display:
keep: 2 
elim: 3 
weig: 1 
propagate_atoms: #76
(<= (+ x (* (- 1) i!4)) 0)
W-DL: assign_eh: 3: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #8: p3 (<= (- dst$2 src$4) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #9: (not p3) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}

W-DL: equation list display:
keep: 2 
elim: 3 
weig: 1 
propagate_atoms: #68
(<= (+ y (* (- 1) i!4)) 1)
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 2 
elim: 3 
weig: 1 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= (+ y (* (- 1) x)) (- 1)) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= (+ y (* (- 1) x)) (- 1)) 
DL Graph: try enable edge #2: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 1}

W-DL: propagate_atom: atom = p3 (<= (+ x (* (- 1) i!4)) 0) 
DL Graph: try enable edge #9: (not p3) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #9: (not p3) (<= (- dst$4 src$2) [weight: 0] ) {timestamp: 2}

W-DL: propagate_atom: atom = (not p4) (<= (+ y (* (- 1) i!4)) 1) 
DL Graph: try enable edge #6: p4 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #6: p4 (<= (- dst$2 src$4) [weight: 1] ) {timestamp: 3}


W-DL: final_check_eh
W-DL: final_check - done
sat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := 0
$1 := 0
$2 := -1
$3 := 0
$4 := -1
$5 := 0
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, 1
mk_eq_core: EQ = LE & GE
mk_eq_core: y, (+ (- 1) x)
mk_eq_core: EQ = LE & GE
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= y 1)

internalize_assertion:
(<= y 1)
(<= y 1)

assert_default: expr #65:
(<= y 1)

internalize_rec with gate_ctx(1):
(<= y 1)
(<= y 1)

literal p-1:
(<= y 1)

internalize_formula: with gate_ctx(1):
(<= y 1)
(<= y 1)


internalize_theory_atom: #65 with gate_ctx(1):
(<= y 1)
(<= y 1)

W-DL: internalize_atom with gate_ctx(1): (<= y 1)
W-DL: internalize_atom: LHS = y
W-DL: internalize_atom: RHS = 1
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal p-1:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2

mk_bool_var: creating boolean variable: 1 with ast-ID #65:
(<= y 1)
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= y 1)

W-DL: expr:
(<= y 1)
W-DL: edge: src_id #0, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= y 1)
edge:
(not p1) (<= y 1) 
	pos #0: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= y 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := -1
$5 := 0

internalize_theory_atom: #65  with gate_ctx(1) internalization succeeded
(<= y 1)

literal p1:
(<= y 1)
propagate_relevancy: marking as relevant:
(<= y 1)
scope_level: 1
propagate_relevancy_to_args # 65
(<= y 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 25
y
assignment after one internalize_assertion:
current assignment:
#65 - l_true: (<= y 1)


before internalize_assertion:
(>= y 1)

internalize_assertion:
(>= y 1)
(>= y 1)

assert_default: expr #68:
(>= y 1)

internalize_rec with gate_ctx(1):
(>= y 1)
(>= y 1)

literal p-1:
(>= y 1)

internalize_formula: with gate_ctx(1):
(>= y 1)
(>= y 1)


internalize_theory_atom: #68 with gate_ctx(1):
(>= y 1)
(>= y 1)

W-DL: internalize_atom with gate_ctx(1): (>= y 1)
W-DL: internalize_atom: LHS = y
W-DL: internalize_atom: RHS = 1
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2

mk_bool_var: creating boolean variable: 2 with ast-ID #68:
(>= y 1)
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= y 1)

W-DL: expr:
(>= y 1)
W-DL: edge: src_id #2, dst_id #0, weight: -1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= y 1)
edge:
(not p2) (>= y 1) 
	pos #2: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= y 1) 
(not p2) (>= y 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := -1
$5 := 0

internalize_theory_atom: #68  with gate_ctx(1) internalization succeeded
(>= y 1)

literal p2:
(>= y 1)
propagate_relevancy: marking as relevant:
(>= y 1)
scope_level: 1
propagate_relevancy_to_args # 68
(>= y 1)
assignment after one internalize_assertion:
current assignment:
#65 - l_true: (<= y 1)
#68 - l_true: (>= y 1)


before internalize_assertion:
(<= (+ y (* (- 1) x)) (- 1))

internalize_assertion:
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)

assert_default: expr #47:
(<= (+ y (* (- 1) x)) (- 1))

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)

literal p-1:
(<= (+ y (* (- 1) x)) (- 1))

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)


internalize_theory_atom: #47 with gate_ctx(1):
(<= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 -1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal p-1:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 3 with ast-ID #47:
(<= (+ y (* (- 1) x)) (- 1))
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(<= (+ y (* (- 1) x)) (- 1))

W-DL: expr:
(<= (+ y (* (- 1) x)) (- 1))
W-DL: edge: src_id #3, dst_id #2, weight: -1, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) (- 1))
edge:
(not p3) (<= (+ y (* (- 1) x)) (- 1)) 
	pos #4: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= y 1) 
p2 (>= y 1) 
(not p3) (<= (+ y (* (- 1) x)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := -1
$5 := 0

internalize_theory_atom: #47  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) (- 1))

literal p3:
(<= (+ y (* (- 1) x)) (- 1))
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) -1)
scope_level: 1
propagate_relevancy_to_args # 47
(<= (+ y (* (- 1) x)) (- 1))
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 43
(- 1)
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy_to_args # 26
x
assignment after one internalize_assertion:
current assignment:
#65 - l_true: (<= y 1)
#68 - l_true: (>= y 1)
#47 - l_true: (<= (+ y (* -1 x)) -1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) (- 1))

internalize_assertion:
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)

assert_default: expr #67:
(>= (+ y (* (- 1) x)) (- 1))

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)

literal p-1:
(>= (+ y (* (- 1) x)) (- 1))

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)


internalize_theory_atom: #67 with gate_ctx(1):
(>= (+ y (* (- 1) x)) (- 1))
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 -1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) (- 1))
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = (- 1)
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 4 with ast-ID #67:
(>= (+ y (* (- 1) x)) (- 1))
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(>= (+ y (* (- 1) x)) (- 1))

W-DL: expr:
(>= (+ y (* (- 1) x)) (- 1))
W-DL: edge: src_id #2, dst_id #3, weight: 1, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) (- 1))
edge:
(not p4) (>= (+ y (* (- 1) x)) (- 1)) 
	pos #6: p4 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= y 1) 
p2 (>= y 1) 
p3 (<= (+ y (* (- 1) x)) (- 1)) 
(not p4) (>= (+ y (* (- 1) x)) (- 1)) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := -1
$5 := 0

internalize_theory_atom: #67  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) (- 1))

literal p4:
(>= (+ y (* (- 1) x)) (- 1))
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) -1)
scope_level: 1
propagate_relevancy_to_args # 67
(>= (+ y (* (- 1) x)) (- 1))
assignment after one internalize_assertion:
current assignment:
#65 - l_true: (<= y 1)
#68 - l_true: (>= y 1)
#47 - l_true: (<= (+ y (* -1 x)) -1)
#67 - l_true: (>= (+ y (* -1 x)) -1)


before internalize_assertion:
(>= i!5 2)

internalize_assertion:
(>= i!5 2)
(>= i!5 2)

assert_default: expr #75:
(>= i!5 2)

internalize_rec with gate_ctx(1):
(>= i!5 2)
(>= i!5 2)

literal p-1:
(>= i!5 2)

internalize_formula: with gate_ctx(1):
(>= i!5 2)
(>= i!5 2)


internalize_theory_atom: #75 with gate_ctx(1):
(>= i!5 2)
(>= i!5 2)

W-DL: internalize_atom with gate_ctx(1): (>= i!5 2)
W-DL: internalize_atom: LHS = i!5
W-DL: internalize_atom: RHS = 2
W-DL: mk_var starts: i!5

internalize_rec with gate_ctx(0):
i!5
i!5

literal p-1:
i!5

internalize_uninterpreted:
i!5
i!5

W-DL: enode mk_var: 4
W-DL: set_sort: i!5
W-DL: mk_var returns: i!5 |-> 4

mk_bool_var: creating boolean variable: 5 with ast-ID #75:
(>= i!5 2)
mk_bool_var: created boolean variable: 5 with lbool(l_undef):
(>= i!5 2)

W-DL: expr:
(>= i!5 2)
W-DL: edge: src_id #4, dst_id #0, weight: -2, gate_ctx(1)
DL Graph: add_edge #8: p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: add_edge #9: (not p5) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= i!5 2)
edge:
(not p5) (>= i!5 2) 
	pos #8: p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
	neg #9: (not p5) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= y 1) 
p2 (>= y 1) 
p3 (<= (+ y (* (- 1) x)) (- 1)) 
p4 (>= (+ y (* (- 1) x)) (- 1)) 
(not p5) (>= i!5 2) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #75  with gate_ctx(1) internalization succeeded
(>= i!5 2)

literal p5:
(>= i!5 2)
propagate_relevancy: marking as relevant:
(>= i!5 2)
scope_level: 1
propagate_relevancy_to_args # 75
(>= i!5 2)
propagate_relevancy: marking as relevant:
2
scope_level: 1
propagate_relevancy: marking as relevant:
i!5
scope_level: 1
propagate_relevancy_to_args # 37
2
propagate_relevancy_to_args # 66
i!5
assignment after one internalize_assertion:
current assignment:
#65 - l_true: (<= y 1)
#68 - l_true: (>= y 1)
#47 - l_true: (<= (+ y (* -1 x)) -1)
#67 - l_true: (>= (+ y (* -1 x)) -1)
#75 - l_true: (>= i!5 2)


before internalize_assertion:
(not (<= (+ x (* (- 1) i!5)) 0))

internalize_assertion:
(not (<= (+ x (* (- 1) i!5)) 0))
#86 := (* -1 i!5)
#52 := (+ x #86)
#76 := (<= #52 0)
(not #76)

assert_default: expr #87:
(not (<= (+ x (* (- 1) i!5)) 0))

internalize_rec with gate_ctx(1):
(not (<= (+ x (* (- 1) i!5)) 0))
#86 := (* -1 i!5)
#52 := (+ x #86)
#76 := (<= #52 0)
(not #76)

literal (not p-1):
(not (<= (+ x (* (- 1) i!5)) 0))

internalize_formula: with gate_ctx(1):
(not (<= (+ x (* (- 1) i!5)) 0))
#86 := (* -1 i!5)
#52 := (+ x #86)
#76 := (<= #52 0)
(not #76)


internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!5)) 0)
#86 := (* -1 i!5)
#52 := (+ x #86)
(<= #52 0)

literal p-1:
(<= (+ x (* (- 1) i!5)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!5)) 0)
#86 := (* -1 i!5)
#52 := (+ x #86)
(<= #52 0)


internalize_theory_atom: #76 with gate_ctx(1):
(<= (+ x (* (- 1) i!5)) 0)
#86 := (* -1 i!5)
#52 := (+ x #86)
(<= #52 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!5)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!5))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!5
W-DL: mk_var returns: i!5 |-> 4

mk_bool_var: creating boolean variable: 6 with ast-ID #76:
(<= (+ x (* (- 1) i!5)) 0)
mk_bool_var: created boolean variable: 6 with lbool(l_undef):
(<= (+ x (* (- 1) i!5)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!5)) 0)
W-DL: edge: src_id #4, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #10: p6 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #11: (not p6) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!5)) 0)
edge:
(not p6) (<= (+ x (* (- 1) i!5)) 0) 
	pos #10: p6 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
	neg #11: (not p6) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= y 1) 
p2 (>= y 1) 
p3 (<= (+ y (* (- 1) x)) (- 1)) 
p4 (>= (+ y (* (- 1) x)) (- 1)) 
p5 (>= i!5 2) 
(not p6) (<= (+ x (* (- 1) i!5)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := 0
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #76  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!5)) 0)

literal (not p6):
(not (<= (+ x (* (- 1) i!5)) 0))
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!5)) 0)
scope_level: 1
propagate_relevancy_to_args # 76
(<= (+ x (* (- 1) i!5)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!5))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 52
(+ x (* (- 1) i!5))
propagate_relevancy: marking as relevant:
(* -1 i!5)
scope_level: 1
propagate_relevancy_to_args # 86
(* (- 1) i!5)
assignment after one internalize_assertion:
current assignment:
#65 - l_true: (<= y 1)
#68 - l_true: (>= y 1)
#47 - l_true: (<= (+ y (* -1 x)) -1)
#67 - l_true: (>= (+ y (* -1 x)) -1)
#75 - l_true: (>= i!5 2)
(not #76) - l_true: (not (<= (+ x (* -1 i!5)) 0))

assignment after internalize_assertions():
current assignment:
#65 - l_true: (<= y 1)
#68 - l_true: (>= y 1)
#47 - l_true: (<= (+ y (* -1 x)) -1)
#67 - l_true: (>= (+ y (* -1 x)) -1)
#75 - l_true: (>= i!5 2)
(not #76) - l_true: (not (<= (+ x (* -1 i!5)) 0))

(smt.searching)
propagating... 0:6
propagate_atoms: #65
(<= y 1)
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #68
(>= y 1)
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 0 2
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 0 
elim: 2 
weig: 1 
propagate_atoms: #47
(<= (+ y (* (- 1) x)) (- 1))
W-DL: assign_eh: 3: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 0
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #12: p3 (<= (- dst$0 src$3) [weight: -2] ) {timestamp: 0}
DL Graph: add_edge #13: (not p3) (<= (- dst$3 src$0) [weight: 1] ) {timestamp: 0}

W-DL: equation list display:
keep: 0 
elim: 2 
weig: 1 
propagate_atoms: #67
(>= (+ y (* (- 1) x)) (- 1))
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: eliminable src, get src_old
W-DL: elim tgt
DL Graph: add_edge #14: p3 (<= (- dst$0 src$3) [weight: -2] ) {timestamp: 0}
DL Graph: add_edge #15: p4 (<= (- dst$3 src$0) [weight: 2] ) {timestamp: 0}

W-DL: equation list display:
keep: 0 0 
elim: 2 3 
weig: 1 2 
propagate_atoms: #75
(>= i!5 2)
W-DL: assign_eh: 5: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 3
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 0 0 
elim: 2 3 
weig: 1 2 
propagate_atoms: #76
(<= (+ x (* (- 1) i!5)) 0)
W-DL: assign_eh: 6: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim tgt, keep src
DL Graph: add_edge #16: p6 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: add_edge #17: (not p6) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}

W-DL: equation list display:
keep: 0 0 
elim: 2 3 
weig: 1 2 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= y 1) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= y 1) 
DL Graph: try enable edge #2: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 1}

W-DL: propagate_atom: atom = (not p3) (<= (+ y (* (- 1) x)) (- 1)) 
DL Graph: try enable edge #14: p3 (<= (- dst$0 src$3) [weight: -2] ) {timestamp: 0}
DL Graph: enable disabled edge #14: p3 (<= (- dst$0 src$3) [weight: -2] ) {timestamp: 2}

W-DL: propagate_atom: atom = (not p4) (>= (+ y (* (- 1) x)) (- 1)) 
DL Graph: try enable edge #15: p4 (<= (- dst$3 src$0) [weight: 2] ) {timestamp: 0}
DL Graph: enable disabled edge #15: p4 (<= (- dst$3 src$0) [weight: 2] ) {timestamp: 3}

W-DL: propagate_atom: atom = (not p5) (>= i!5 2) 
DL Graph: try enable edge #8: p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
DL Graph: enable disabled edge #8: p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 4}

W-DL: propagate_atom: atom = p6 (<= (+ x (* (- 1) i!5)) 0) 
DL Graph: try enable edge #17: (not p6) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #17: (not p6) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 5}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= y 1) 
(not p2) (>= y 1) 
(not p3) (<= (+ y (* (- 1) x)) (- 1)) 
(not p4) (>= (+ y (* (- 1) x)) (- 1)) 
(not p5) (>= i!5 2) 
p6 (<= (+ x (* (- 1) i!5)) 0) 
(not p3) (<= (+ y (* (- 1) x)) (- 1)) 
(not p3) (<= (+ y (* (- 1) x)) (- 1)) 
(not p4) (>= (+ y (* (- 1) x)) (- 1)) 
p6 (<= (+ x (* (- 1) i!5)) 0) 
graph
	edge
p1 (<= (- dst$2 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$0 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$0 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$0) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$2 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$2) [weight: 0] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$2) [weight: 1] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$2 src$3) [weight: -2] ) {timestamp: 0}
p5 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 4}
disabled edge: (not p5) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 0}
disabled edge: p6 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p6) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$0 src$3) [weight: -2] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$0) [weight: 1] ) {timestamp: 0}
p3 (<= (- dst$0 src$3) [weight: -2] ) {timestamp: 2}
p4 (<= (- dst$3 src$0) [weight: 2] ) {timestamp: 3}
disabled edge: p6 (<= (- dst$0 src$4) [weight: -2] ) {timestamp: 0}
(not p6) (<= (- dst$4 src$0) [weight: 1] ) {timestamp: 5}
	assignment
$0 := -2
$1 := 0
$2 := -1
$3 := 0
$4 := 0
$5 := 0

W-DL: neg_cycle_conflict:
(not #76)(not (<= (+ x (* (- 1) i!5)) 0)) relevant: 1, val: l_true
#75(>= i!5 2) relevant: 1, val: l_true

unsat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := -2
$1 := 0
$2 := -1
$3 := 0
$4 := 0
$5 := 0
(smt.simplifier-start)
propagating... 0:0
W-DL: propagate_core
(smt.simplifier-start)
W-DL: push_scope_eh
W-DL: push_equations

W-DL: equation list display:
keep: 
elim: 
weig: 

mk_eq_core: y, (+ 1 x)
mk_eq_core: EQ = LE & GE
mk_eq_core: (:var 0), x
mk_eq_core: EQ = LE & GE
	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

before internalize_assertion:
(<= (+ y (* (- 1) x)) 1)

internalize_assertion:
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

assert_default: expr #87:
(<= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

literal true:
(<= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)


internalize_theory_atom: #87 with gate_ctx(1):
(<= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(<= #45 1)

W-DL: internalize_atom with gate_ctx(1): (<= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y

internalize_rec with gate_ctx(0):
y
y

literal p-1:
y

internalize_uninterpreted:
y
y

W-DL: enode mk_var: 2
W-DL: set_sort: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x

internalize_rec with gate_ctx(0):
x
x

literal p-1:
x

internalize_uninterpreted:
x
x

W-DL: enode mk_var: 3
W-DL: set_sort: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 1 with ast-ID #87:
(<= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 1 with lbool(l_undef):
(<= (+ y (* (- 1) x)) 1)

W-DL: expr:
(<= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #3, dst_id #2, weight: 1, gate_ctx(1)
DL Graph: add_edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: add_edge #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ y (* (- 1) x)) 1)
edge:
(not p1) (<= (+ y (* (- 1) x)) 1) 
	pos #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
	neg #1: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #87  with gate_ctx(1) internalization succeeded
(<= (+ y (* (- 1) x)) 1)

literal p1:
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(<= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 87
(<= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
1
scope_level: 1
propagate_relevancy: marking as relevant:
(+ y (* -1 x))
scope_level: 1
propagate_relevancy_to_args # 27
1
propagate_relevancy_to_args # 45
(+ y (* (- 1) x))
propagate_relevancy: marking as relevant:
(* -1 x)
scope_level: 1
propagate_relevancy: marking as relevant:
y
scope_level: 1
propagate_relevancy_to_args # 44
(* (- 1) x)
propagate_relevancy: marking as relevant:
x
scope_level: 1
propagate_relevancy: marking as relevant:
-1
scope_level: 1
propagate_relevancy_to_args # 25
y
propagate_relevancy_to_args # 26
x
propagate_relevancy_to_args # 43
(- 1)
assignment after one internalize_assertion:
current assignment:
#87 - l_true: (<= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ y (* (- 1) x)) 1)

internalize_assertion:
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

assert_default: expr #75:
(>= (+ y (* (- 1) x)) 1)

internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

literal p-1:
(>= (+ y (* (- 1) x)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)


internalize_theory_atom: #75 with gate_ctx(1):
(>= (+ y (* (- 1) x)) 1)
#44 := (* -1 x)
#45 := (+ y #44)
(>= #45 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) x)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) x))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3

mk_bool_var: creating boolean variable: 2 with ast-ID #75:
(>= (+ y (* (- 1) x)) 1)
mk_bool_var: created boolean variable: 2 with lbool(l_undef):
(>= (+ y (* (- 1) x)) 1)

W-DL: expr:
(>= (+ y (* (- 1) x)) 1)
W-DL: edge: src_id #2, dst_id #3, weight: -1, gate_ctx(1)
DL Graph: add_edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) x)) 1)
edge:
(not p2) (>= (+ y (* (- 1) x)) 1) 
	pos #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
	neg #3: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #75  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) x)) 1)

literal p2:
(>= (+ y (* (- 1) x)) 1)
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 x)) 1)
scope_level: 1
propagate_relevancy_to_args # 75
(>= (+ y (* (- 1) x)) 1)
assignment after one internalize_assertion:
current assignment:
#87 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)


before internalize_assertion:
(>= (+ x (* (- 1) i!6)) 0)

internalize_assertion:
(>= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(>= #52 0)

assert_default: expr #86:
(>= (+ x (* (- 1) i!6)) 0)

internalize_rec with gate_ctx(1):
(>= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(>= #52 0)

literal p-1:
(>= (+ x (* (- 1) i!6)) 0)

internalize_formula: with gate_ctx(1):
(>= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(>= #52 0)


internalize_theory_atom: #86 with gate_ctx(1):
(>= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(>= #52 0)

W-DL: internalize_atom with gate_ctx(1): (>= (+ x (* (- 1) i!6)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!6))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!6

internalize_rec with gate_ctx(0):
i!6
i!6

literal p-1:
i!6

internalize_uninterpreted:
i!6
i!6

W-DL: enode mk_var: 4
W-DL: set_sort: i!6
W-DL: mk_var returns: i!6 |-> 4

mk_bool_var: creating boolean variable: 3 with ast-ID #86:
(>= (+ x (* (- 1) i!6)) 0)
mk_bool_var: created boolean variable: 3 with lbool(l_undef):
(>= (+ x (* (- 1) i!6)) 0)

W-DL: expr:
(>= (+ x (* (- 1) i!6)) 0)
W-DL: edge: src_id #3, dst_id #4, weight: 0, gate_ctx(1)
DL Graph: add_edge #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ x (* (- 1) i!6)) 0)
edge:
(not p3) (>= (+ x (* (- 1) i!6)) 0) 
	pos #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
	neg #5: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!6)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #86  with gate_ctx(1) internalization succeeded
(>= (+ x (* (- 1) i!6)) 0)

literal p3:
(>= (+ x (* (- 1) i!6)) 0)
propagate_relevancy: marking as relevant:
(>= (+ x (* -1 i!6)) 0)
scope_level: 1
propagate_relevancy_to_args # 86
(>= (+ x (* (- 1) i!6)) 0)
propagate_relevancy: marking as relevant:
0
scope_level: 1
propagate_relevancy: marking as relevant:
(+ x (* -1 i!6))
scope_level: 1
propagate_relevancy_to_args # 23
0
propagate_relevancy_to_args # 52
(+ x (* (- 1) i!6))
propagate_relevancy: marking as relevant:
(* -1 i!6)
scope_level: 1
propagate_relevancy_to_args # 51
(* (- 1) i!6)
propagate_relevancy: marking as relevant:
i!6
scope_level: 1
propagate_relevancy_to_args # 67
i!6
assignment after one internalize_assertion:
current assignment:
#87 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#86 - l_true: (>= (+ x (* -1 i!6)) 0)


before internalize_assertion:
(<= (+ x (* (- 1) i!6)) 0)

internalize_assertion:
(<= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(<= #52 0)

assert_default: expr #76:
(<= (+ x (* (- 1) i!6)) 0)

internalize_rec with gate_ctx(1):
(<= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(<= #52 0)

literal p-1:
(<= (+ x (* (- 1) i!6)) 0)

internalize_formula: with gate_ctx(1):
(<= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(<= #52 0)


internalize_theory_atom: #76 with gate_ctx(1):
(<= (+ x (* (- 1) i!6)) 0)
#51 := (* -1 i!6)
#52 := (+ x #51)
(<= #52 0)

W-DL: internalize_atom with gate_ctx(1): (<= (+ x (* (- 1) i!6)) 0)
W-DL: internalize_atom: LHS = (+ x (* (- 1) i!6))
W-DL: internalize_atom: RHS = 0
W-DL: is_sign: (- 1)
W-DL: mk_var starts: x
W-DL: mk_var returns: x |-> 3
W-DL: mk_var starts: i!6
W-DL: mk_var returns: i!6 |-> 4

mk_bool_var: creating boolean variable: 4 with ast-ID #76:
(<= (+ x (* (- 1) i!6)) 0)
mk_bool_var: created boolean variable: 4 with lbool(l_undef):
(<= (+ x (* (- 1) i!6)) 0)

W-DL: expr:
(<= (+ x (* (- 1) i!6)) 0)
W-DL: edge: src_id #4, dst_id #3, weight: 0, gate_ctx(1)
DL Graph: add_edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(<= (+ x (* (- 1) i!6)) 0)
edge:
(not p4) (<= (+ x (* (- 1) i!6)) 0) 
	pos #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
	neg #7: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ x (* (- 1) i!6)) 0) 
(not p4) (<= (+ x (* (- 1) i!6)) 0) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #76  with gate_ctx(1) internalization succeeded
(<= (+ x (* (- 1) i!6)) 0)

literal p4:
(<= (+ x (* (- 1) i!6)) 0)
propagate_relevancy: marking as relevant:
(<= (+ x (* -1 i!6)) 0)
scope_level: 1
propagate_relevancy_to_args # 76
(<= (+ x (* (- 1) i!6)) 0)
assignment after one internalize_assertion:
current assignment:
#87 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#86 - l_true: (>= (+ x (* -1 i!6)) 0)
#76 - l_true: (<= (+ x (* -1 i!6)) 0)


before internalize_assertion:
(not (>= (+ y (* (- 1) i!6)) 1))

internalize_assertion:
(not (>= (+ y (* (- 1) i!6)) 1))
#51 := (* -1 i!6)
#65 := (+ y #51)
#46 := (>= #65 1)
(not #46)

assert_default: expr #82:
(not (>= (+ y (* (- 1) i!6)) 1))

internalize_rec with gate_ctx(1):
(not (>= (+ y (* (- 1) i!6)) 1))
#51 := (* -1 i!6)
#65 := (+ y #51)
#46 := (>= #65 1)
(not #46)

literal (not p-1):
(not (>= (+ y (* (- 1) i!6)) 1))

internalize_formula: with gate_ctx(1):
(not (>= (+ y (* (- 1) i!6)) 1))
#51 := (* -1 i!6)
#65 := (+ y #51)
#46 := (>= #65 1)
(not #46)


internalize_rec with gate_ctx(1):
(>= (+ y (* (- 1) i!6)) 1)
#51 := (* -1 i!6)
#65 := (+ y #51)
(>= #65 1)

literal p-1:
(>= (+ y (* (- 1) i!6)) 1)

internalize_formula: with gate_ctx(1):
(>= (+ y (* (- 1) i!6)) 1)
#51 := (* -1 i!6)
#65 := (+ y #51)
(>= #65 1)


internalize_theory_atom: #46 with gate_ctx(1):
(>= (+ y (* (- 1) i!6)) 1)
#51 := (* -1 i!6)
#65 := (+ y #51)
(>= #65 1)

W-DL: internalize_atom with gate_ctx(1): (>= (+ y (* (- 1) i!6)) 1)
W-DL: internalize_atom: LHS = (+ y (* (- 1) i!6))
W-DL: internalize_atom: RHS = 1
W-DL: is_sign: (- 1)
W-DL: mk_var starts: y
W-DL: mk_var returns: y |-> 2
W-DL: mk_var starts: i!6
W-DL: mk_var returns: i!6 |-> 4

mk_bool_var: creating boolean variable: 5 with ast-ID #46:
(>= (+ y (* (- 1) i!6)) 1)
mk_bool_var: created boolean variable: 5 with lbool(l_undef):
(>= (+ y (* (- 1) i!6)) 1)

W-DL: expr:
(>= (+ y (* (- 1) i!6)) 1)
W-DL: edge: src_id #2, dst_id #4, weight: -1, gate_ctx(1)
DL Graph: add_edge #8: p5 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: add_edge #9: (not p5) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
W-DL: internalize_atom done:
expr:
(>= (+ y (* (- 1) i!6)) 1)
edge:
(not p5) (>= (+ y (* (- 1) i!6)) 1) 
	pos #8: p5 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
	neg #9: (not p5) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}

W-DL: dl-graph display:
atoms
p1 (<= (+ y (* (- 1) x)) 1) 
p2 (>= (+ y (* (- 1) x)) 1) 
p3 (>= (+ x (* (- 1) i!6)) 0) 
p4 (<= (+ x (* (- 1) i!6)) 0) 
(not p5) (>= (+ y (* (- 1) i!6)) 1) 
graph
	edge
disabled edge: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
disabled edge: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
disabled edge: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := 0
$4 := 0
$5 := 0

internalize_theory_atom: #46  with gate_ctx(1) internalization succeeded
(>= (+ y (* (- 1) i!6)) 1)

literal (not p5):
(not (>= (+ y (* (- 1) i!6)) 1))
propagate_relevancy: marking as relevant:
(>= (+ y (* -1 i!6)) 1)
scope_level: 1
propagate_relevancy_to_args # 46
(>= (+ y (* (- 1) i!6)) 1)
propagate_relevancy: marking as relevant:
(+ y (* -1 i!6))
scope_level: 1
propagate_relevancy_to_args # 65
(+ y (* (- 1) i!6))
assignment after one internalize_assertion:
current assignment:
#87 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#86 - l_true: (>= (+ x (* -1 i!6)) 0)
#76 - l_true: (<= (+ x (* -1 i!6)) 0)
(not #46) - l_true: (not (>= (+ y (* -1 i!6)) 1))

assignment after internalize_assertions():
current assignment:
#87 - l_true: (<= (+ y (* -1 x)) 1)
#75 - l_true: (>= (+ y (* -1 x)) 1)
#86 - l_true: (>= (+ x (* -1 i!6)) 0)
#76 - l_true: (<= (+ x (* -1 i!6)) 0)
(not #46) - l_true: (not (>= (+ y (* -1 i!6)) 1))

(smt.searching)
propagating... 0:5
propagate_atoms: #87
(<= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 1: 1
W-DL: keep src and tgt

W-DL: equation list display:
keep: 
elim: 
weig: 
propagate_atoms: #75
(>= (+ y (* (- 1) x)) 1)
W-DL: assign_eh: 2: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 2
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #86
(>= (+ x (* (- 1) i!6)) 0)
W-DL: assign_eh: 3: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 2 3
W-DL: not EQUAL - previous is not a positive edge
W-DL: keep src and tgt

W-DL: equation list display:
keep: 3 
elim: 2 
weig: 1 
propagate_atoms: #76
(<= (+ x (* (- 1) i!6)) 0)
W-DL: assign_eh: 4: 1
W-DL: check EQUAL first
W-DL: previous and current are true
W-DL: previous src and tgt: 3 4
W-DL: EQUAL
W-DL: not exist before
W-DL: negative weight, elim src, keep tgt

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 0 
propagate_atoms: #46
(>= (+ y (* (- 1) i!6)) 1)
W-DL: assign_eh: 5: 0
W-DL: check EQUAL first
W-DL: not EQUAL - previous is not a positive edge
W-DL: elim src and tgt
DL Graph: add_edge #10: p5 (<= (- dst$3 src$3) [weight: 0] ) {timestamp: 0}
DL Graph: add_edge #11: (not p5) (<= (- dst$3 src$3) [weight: -1] ) {timestamp: 0}

W-DL: equation list display:
keep: 3 3 
elim: 2 4 
weig: 1 0 
W-DL: propagate_core
W-DL: propagate_atom: atom = (not p1) (<= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
DL Graph: enable disabled edge #0: p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}

W-DL: propagate_atom: atom = (not p2) (>= (+ y (* (- 1) x)) 1) 
DL Graph: try enable edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #2: p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}

W-DL: propagate_atom: atom = (not p3) (>= (+ x (* (- 1) i!6)) 0) 
DL Graph: try enable edge #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #4: p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}

W-DL: propagate_atom: atom = (not p4) (<= (+ x (* (- 1) i!6)) 0) 
DL Graph: try enable edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 0}
DL Graph: enable disabled edge #6: p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}

W-DL: propagate_atom: atom = p5 (>= (+ y (* (- 1) i!6)) 1) 
DL Graph: try enable edge #11: (not p5) (<= (- dst$3 src$3) [weight: -1] ) {timestamp: 0}
DL Graph: enable disabled edge #11: (not p5) (<= (- dst$3 src$3) [weight: -1] ) {timestamp: 4}

W-DL: propagate_atom: before set_neg_cycle_conflict
atoms
(not p1) (<= (+ y (* (- 1) x)) 1) 
(not p2) (>= (+ y (* (- 1) x)) 1) 
(not p3) (>= (+ x (* (- 1) i!6)) 0) 
(not p4) (<= (+ x (* (- 1) i!6)) 0) 
p5 (>= (+ y (* (- 1) i!6)) 1) 
p5 (>= (+ y (* (- 1) i!6)) 1) 
graph
	edge
p1 (<= (- dst$2 src$3) [weight: 1] ) {timestamp: 0}
disabled edge: (not p1) (<= (- dst$3 src$2) [weight: -2] ) {timestamp: 0}
p2 (<= (- dst$3 src$2) [weight: -1] ) {timestamp: 1}
disabled edge: (not p2) (<= (- dst$2 src$3) [weight: 0] ) {timestamp: 0}
p3 (<= (- dst$4 src$3) [weight: 0] ) {timestamp: 2}
disabled edge: (not p3) (<= (- dst$3 src$4) [weight: -1] ) {timestamp: 0}
p4 (<= (- dst$3 src$4) [weight: 0] ) {timestamp: 3}
disabled edge: (not p4) (<= (- dst$4 src$3) [weight: -1] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$4 src$2) [weight: -1] ) {timestamp: 0}
disabled edge: (not p5) (<= (- dst$2 src$4) [weight: 0] ) {timestamp: 0}
disabled edge: p5 (<= (- dst$3 src$3) [weight: 0] ) {timestamp: 0}
(not p5) (<= (- dst$3 src$3) [weight: -1] ) {timestamp: 4}
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := -1
$4 := -1
$5 := 0

W-DL: neg_cycle_conflict:
(not #46)(not (>= (+ y (* (- 1) i!6)) 1)) relevant: 1, val: l_true

unsat
W-DL: pop_scope_eh: 1

W-DL: equation list display:
keep: 
elim: 
weig: 


W-DL: dl-graph display:
atoms
graph
	edge
	assignment
$0 := -2
$1 := 0
$2 := 0
$3 := -1
$4 := -1
$5 := 0
