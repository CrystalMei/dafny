(QF-LIA probe check)
(QF-AUFLIA probe check)
(QF-LRA probe check)
(QF-LIRA probe check)
(ILP probe check)
(QF-NIA probe check)
(QF-NRA probe check)
(NIA probe check)
(NRA probe check)
(NIRA probe check)
(LIA probe check)
(LRA probe check)
(LIRA probe check)
(AF-UFNRA probe check)
	(Quantifier Probe)
	(mk DLA tactic)
	(mk-lia2pb-tactic)
	(mk SMT tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
func-decl AST: (declare-fun real_pow (Real Real) Real)
func-decl AST: (declare-fun UOrdering2 (T@U T@U) Bool)
func-decl AST: (declare-fun UOrdering3 (T@T T@U T@U) Bool)
func-decl AST: (declare-fun tickleBool (Bool) Bool)
(smt.simplifying :time 0.00 :before-memory 0.49 :after-memory 0.49)
func-decl AST: (declare-fun Ctor (T@T) Int)
func-decl AST: (declare-fun intType () T@T)
func-decl AST: (declare-fun realType () T@T)
func-decl AST: (declare-fun boolType () T@T)
func-decl AST: (declare-fun rmodeType () T@T)
func-decl AST: (declare-fun stringType () T@T)
func-decl AST: (declare-fun regexType () T@T)
func-decl AST: (declare-fun int_2_U (Int) T@U)
func-decl AST: (declare-fun U_2_int (T@U) Int)
func-decl AST: (declare-fun type (T@U) T@T)
func-decl AST: (declare-fun real_2_U (Real) T@U)
func-decl AST: (declare-fun U_2_real (T@U) Real)
func-decl AST: (declare-fun bool_2_U (Bool) T@U)
func-decl AST: (declare-fun U_2_bool (T@U) Bool)
func-decl AST: (declare-fun rmode_2_U (RoundingMode) T@U)
func-decl AST: (declare-fun U_2_rmode (T@U) RoundingMode)
func-decl AST: (declare-fun string_2_U (String) T@U)
func-decl AST: (declare-fun U_2_string (T@U) String)
func-decl AST: (declare-fun regex_2_U ((RegEx String)) T@U)
func-decl AST: (declare-fun U_2_regex (T@U) (RegEx String))
(smt.simplifying :time 0.00 :before-memory 0.49 :after-memory 0.49)
(smt.simplifying :time 0.00 :before-memory 0.49 :after-memory 0.49)
(smt.simplifying :time 0.00 :before-memory 0.49 :after-memory 0.49)
(smt.simplifying :time 0.00 :before-memory 0.49 :after-memory 0.49)
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun |a#0| () Int)
func-decl AST: (declare-fun |b#0| () Int)
func-decl AST: (declare-fun %lbl%+2 () Bool)
func-decl AST: (declare-fun %lbl%+3 () Bool)
func-decl AST: (declare-fun %lbl%+4 () Bool)
func-decl AST: (declare-fun %lbl%+5 () Bool)
func-decl AST: (declare-fun %lbl%+6 () Bool)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
	(setup arith: Dense Diff Logic)
	(setup arith: Dense Diff Logic - theory_dense_mi)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
(= (Ctor intType) 0)
(= (Ctor realType) 1)
(= (Ctor boolType) 2)
(= (Ctor rmodeType) 3)
(= (Ctor stringType) 4)
(= (Ctor regexType) 5)
(forall ((arg0 Int))
  (! (= (U_2_int (int_2_U arg0)) arg0)
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|))
(forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|))
(forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|))
(forall ((arg0@@1 Real))
  (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|))
(forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|))
(forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|))
(forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|))
(forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|))
(forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|))
(forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|))
(forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|))
(forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|))
(forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|))
(forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|))
(forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|))
(forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|))
(forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|))
(forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|))
(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :no-pattern (U_2_int x@@5)
     :no-pattern (U_2_bool x@@5)
     :qid |bg:subtype-refl|))
(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (let ((a!1 (not (and (= (type y) (type x@@6))
                          (= (type z) (type x@@6))
                          (UOrdering2 x@@6 y)
                          (UOrdering2 y z)))))
       (or a!1 (UOrdering2 x@@6 z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))
(forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)))
         (not (= (type y@@0) (type x@@7))))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.inferred-patterns :qid bg:subtype-refl
  ((UOrdering2 (:var 0) (:var 0)))
)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
(<= (Ctor intType) 0)
(>= (Ctor intType) 0)
(<= (Ctor realType) 1)
(>= (Ctor realType) 1)
(<= (Ctor boolType) 2)
(>= (Ctor boolType) 2)
(<= (Ctor rmodeType) 3)
(>= (Ctor rmodeType) 3)
(<= (Ctor stringType) 4)
(>= (Ctor stringType) 4)
(<= (Ctor regexType) 5)
(>= (Ctor regexType) 5)
(forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|))
(forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|))
(forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|))
(forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|))
(forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|))
(forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|))
(forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|))
(forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|))
(forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|))
(forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|))
(forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|))
(forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|))
(forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|))
(forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|))
(forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|))
(forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|))
(forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|))
(forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|))
(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|))
(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))
(forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))
inconsistent: 0

after internalize_assertions()...
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
#1 := true
#22 := (tickleBool true)
#2 := false
#23 := (tickleBool false)
#27 := 0
#25 := intType
#26 := (Ctor intType)
#221 := (<= #26 0)
#220 := (>= #26 0)
#31 := 1
#29 := realType
#30 := (Ctor realType)
#228 := (<= #30 1)
#227 := (>= #30 1)
#36 := 2
#34 := boolType
#35 := (Ctor boolType)
#235 := (<= #35 2)
#234 := (>= #35 2)
#41 := 3
#39 := rmodeType
#40 := (Ctor rmodeType)
#242 := (<= #40 3)
#241 := (>= #40 3)
#46 := 4
#44 := stringType
#45 := (Ctor stringType)
#249 := (<= #45 4)
#248 := (>= #45 4)
#51 := 5
#49 := regexType
#50 := (Ctor regexType)
#256 := (<= #50 5)
#255 := (>= #50 5)
#54 := (:var 0 Int)
#55 := (int_2_U #54)
#58 := (pattern #55)
#56 := (U_2_int #55)
#265 := -1
#268 := (* -1 #56)
#269 := (+ #54 #268)
#267 := (<= #269 0)
#271 := (not #267)
#266 := (>= #269 0)
#270 := (not #266)
#272 := (or #270 #271)
#273 := (not #272)
#274 := (forall (vars (arg0 Int)) (:pat #58) #273)
#61 := (:var 0 T@U)
#64 := (U_2_int #61)
#68 := (pattern #64)
#65 := (int_2_U #64)
#66 := (= #65 #61)
#62 := (type #61)
#63 := (= #62 intType)
#169 := (not #63)
#170 := (or #169 #66)
#171 := (forall (vars (x T@U)) (:pat #68) #170)
#71 := (type #55)
#72 := (= #71 intType)
#73 := (forall (vars (arg0@@0 Int)) (:pat #58) #72)
#6 := (:var 0 Real)
#75 := (real_2_U #6)
#78 := (pattern #75)
#277 := 0.0
#76 := (U_2_real #75)
#275 := -1.0
#279 := (* -1.0 #76)
#280 := (+ #6 #279)
#278 := (<= #280 0.0)
#282 := (not #278)
#276 := (>= #280 0.0)
#281 := (not #276)
#283 := (or #281 #282)
#284 := (not #283)
#285 := (forall (vars (arg0@@1 Real)) (:pat #78) #284)
#82 := (U_2_real #61)
#86 := (pattern #82)
#83 := (real_2_U #82)
#84 := (= #83 #61)
#81 := (= #62 realType)
#172 := (not #81)
#173 := (or #172 #84)
#174 := (forall (vars (x@@0 T@U)) (:pat #86) #173)
#89 := (type #75)
#90 := (= #89 realType)
#91 := (forall (vars (arg0@@2 Real)) (:pat #78) #90)
#93 := (:var 0 Bool)
#94 := (bool_2_U #93)
#97 := (pattern #94)
#95 := (U_2_bool #94)
#96 := (= #95 #93)
#98 := (forall (vars (arg0@@3 Bool)) (:pat #97) #96)
#101 := (U_2_bool #61)
#105 := (pattern #101)
#102 := (bool_2_U #101)
#103 := (= #102 #61)
#100 := (= #62 boolType)
#175 := (not #100)
#176 := (or #175 #103)
#177 := (forall (vars (x@@1 T@U)) (:pat #105) #176)
#108 := (type #94)
#109 := (= #108 boolType)
#110 := (forall (vars (arg0@@4 Bool)) (:pat #97) #109)
#112 := (:var 0 RoundingMode)
#113 := (rmode_2_U #112)
#116 := (pattern #113)
#114 := (U_2_rmode #113)
#115 := (= #114 #112)
#117 := (forall (vars (arg0@@5 RoundingMode)) (:pat #116) #115)
#120 := (U_2_rmode #61)
#124 := (pattern #120)
#121 := (rmode_2_U #120)
#122 := (= #121 #61)
#119 := (= #62 rmodeType)
#178 := (not #119)
#179 := (or #178 #122)
#180 := (forall (vars (x@@2 T@U)) (:pat #124) #179)
#127 := (type #113)
#128 := (= #127 rmodeType)
#129 := (forall (vars (arg0@@6 RoundingMode)) (:pat #116) #128)
#131 := (:var 0 String[bv[8]])
#132 := (string_2_U #131)
#135 := (pattern #132)
#133 := (U_2_string #132)
#134 := (= #133 #131)
#136 := (forall (vars (arg0@@7 String[bv[8]])) (:pat #135) #134)
#139 := (U_2_string #61)
#143 := (pattern #139)
#140 := (string_2_U #139)
#141 := (= #140 #61)
#138 := (= #62 stringType)
#181 := (not #138)
#182 := (or #181 #141)
#183 := (forall (vars (x@@3 T@U)) (:pat #143) #182)
#146 := (type #132)
#147 := (= #146 stringType)
#148 := (forall (vars (arg0@@8 String[bv[8]])) (:pat #135) #147)
#150 := (:var 0 RegEx[String[bv[8]]])
#151 := (regex_2_U #150)
#154 := (pattern #151)
#152 := (U_2_regex #151)
#153 := (= #152 #150)
#155 := (forall (vars (arg0@@9 RegEx[String[bv[8]]])) (:pat #154) #153)
#158 := (U_2_regex #61)
#162 := (pattern #158)
#159 := (regex_2_U #158)
#160 := (= #159 #61)
#157 := (= #62 regexType)
#184 := (not #157)
#185 := (or #184 #160)
#186 := (forall (vars (x@@4 T@U)) (:pat #162) #185)
#165 := (type #151)
#166 := (= #165 regexType)
#167 := (forall (vars (arg0@@10 RegEx[String[bv[8]]])) (:pat #154) #166)
#187 := (UOrdering2 #61 #61)
#216 := (pattern #187)
#219 := (forall (vars (x@@5 T@U)) (:pat #216) #187)
#190 := (:var 1 T@U)
#197 := (UOrdering2 #190 #61)
#189 := (:var 2 T@U)
#196 := (UOrdering2 #189 #190)
#202 := (pattern #196 #197)
#286 := (not #197)
#264 := (not #196)
#191 := (type #189)
#194 := (= #62 #191)
#263 := (not #194)
#192 := (type #190)
#193 := (= #192 #191)
#262 := (not #193)
#200 := (UOrdering2 #189 #61)
#288 := (or #200 #262 #263 #264 #286)
#287 := (forall (vars (x@@6 T@U) (y T@U) (z T@U)) (:pat #202) #288)
#209 := (UOrdering2 #61 #190)
#214 := (pattern #197 #209)
#289 := (not #209)
#208 := (= #62 #192)
#218 := (not #208)
#211 := (= #190 #61)
#292 := (or #211 #218 #286 #289)
#293 := (forall (vars (x@@7 T@U) (y@@0 T@U)) (:pat #214) #292)
asserted formulas:
#22 #23 #221 #220 #228 #227 #235 #234 #242 #241 #249 #248 #256 #255 #274 #171 #73 #285 #174 #91 #98 #177 #110 #117 #180 #129 #136 #183 #148 #155 #186 #167 #219 #287 #293 
current assignment:
#22: (tickleBool true)
#23: (tickleBool false)
#221: (<= (Ctor intType) 0)
#220: (>= (Ctor intType) 0)
#228: (<= (Ctor realType) 1)
#227: (>= (Ctor realType) 1)
#235: (<= (Ctor boolType) 2)
#234: (>= (Ctor boolType) 2)
#242: (<= (Ctor rmodeType) 3)
#241: (>= (Ctor rmodeType) 3)
#249: (<= (Ctor stringType) 4)
#248: (>= (Ctor stringType) 4)
#256: (<= (Ctor regexType) 5)
#255: (>= (Ctor regexType) 5)
#274: #274
#171: #171
#73: #73
#285: #285
#174: #174
#91: #91
#98: #98
#177: #177
#110: #110
#117: #117
#180: #180
#129: #129
#136: #136
#183: #183
#148: #148
#155: #155
#186: #186
#167: #167
#219: #219
#287: #287
#293: #293
expression -> bool_var:
(#1 -> true) (#22 -> p1) (#23 -> p2) (#221 -> p3) (#220 -> p4) (#228 -> p5) (#227 -> p6) (#235 -> p7) (#234 -> p8) (#242 -> p9) (#241 -> p10) (#249 -> p11) (#248 -> p12) (#256 -> p13) (#255 -> p14) (#274 -> p15) (#171 -> p16) (#73 -> p17) (#285 -> p18) (#174 -> p19) (#91 -> p20) (#98 -> p21) (#177 -> p22) (#110 -> p23) (#117 -> p24) (#180 -> p25) (#129 -> p26) (#136 -> p27) (#183 -> p28) (#148 -> p29) (#155 -> p30) (#186 -> p31) (#167 -> p32) (#219 -> p33) (#287 -> p34) (#293 -> p35) 
expression -> enode:
(#1 -> e!0) (#2 -> e!1) (#22 -> e!2) (#23 -> e!3) (#27 -> e!4) (#25 -> e!5) (#26 -> e!6) (#29 -> e!7) (#30 -> e!8) (#34 -> e!9) (#35 -> e!10) (#39 -> e!11) (#40 -> e!12) (#44 -> e!13) (#45 -> e!14) (#49 -> e!15) (#50 -> e!16) 
relevant exprs:
#22 #1 #23 #2 #221 #27 #26 #25 #220 #228 #31 #30 #29 #227 #235 #36 #35 #34 #234 #242 #41 #40 #39 #241 #249 #46 #45 #44 #248 #256 #51 #50 #49 #255 #274 #171 #73 #285 #174 #91 #98 #177 #110 #117 #180 #129 #136 #183 #148 #155 #186 #167 #219 #287 #293 
	Theory Display
5
Theory dense difference logic:
v0 -> #27
v1 -> #26
v2 -> #30
v3 -> #35
v4 -> #40
v5 -> #45
v6 -> #50
atoms:
#26    - #27    <= 0                 assignment: l_true
#27    - #26    <= 0                 assignment: l_true
#30    - #27    <= 1                 assignment: l_true
#27    - #30    <= -1                assignment: l_true
#35    - #27    <= 2                 assignment: l_true
#27    - #35    <= -2                assignment: l_true
#40    - #27    <= 3                 assignment: l_true
#27    - #40    <= -3                assignment: l_true
#45    - #27    <= 4                 assignment: l_true
#27    - #45    <= -4                assignment: l_true
#50    - #27    <= 5                 assignment: l_true
#27    - #50    <= -5                assignment: l_true
8
7
6
9
recfun
disabled guards:

13
10
12
11
decl2enodes:
id 136 -> #22 #23
id 137 -> #26 #30 #35 #40 #45 #50
hot bool vars:

(smt.preprocessing :time 0.07 :before-memory 0.58 :after-memory 0.58)
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.58 :after-memory 0.58)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (forall ((arg0 Int))
             (! (= (U_2_int (int_2_U arg0)) arg0)
                :pattern ((int_2_U arg0))
                :qid |typeInv:U_2_int|)))
      (a!2 (forall ((x T@U))
             (! (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
                :pattern ((U_2_int x))
                :qid |cast:U_2_int|)))
      (a!3 (forall ((arg0@@0 Int))
             (! (= (type (int_2_U arg0@@0)) intType)
                :pattern ((int_2_U arg0@@0))
                :qid |funType:int_2_U|)))
      (a!4 (forall ((arg0@@1 Real))
             (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
                :pattern ((real_2_U arg0@@1))
                :qid |typeInv:U_2_real|)))
      (a!5 (forall ((x@@0 T@U))
             (! (=> (= (type x@@0) realType)
                    (= (real_2_U (U_2_real x@@0)) x@@0))
                :pattern ((U_2_real x@@0))
                :qid |cast:U_2_real|)))
      (a!6 (forall ((arg0@@2 Real))
             (! (= (type (real_2_U arg0@@2)) realType)
                :pattern ((real_2_U arg0@@2))
                :qid |funType:real_2_U|)))
      (a!7 (forall ((arg0@@3 Bool))
             (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
                :pattern ((bool_2_U arg0@@3))
                :qid |typeInv:U_2_bool|)))
      (a!8 (forall ((x@@1 T@U))
             (! (=> (= (type x@@1) boolType)
                    (= (bool_2_U (U_2_bool x@@1)) x@@1))
                :pattern ((U_2_bool x@@1))
                :qid |cast:U_2_bool|)))
      (a!9 (forall ((arg0@@4 Bool))
             (! (= (type (bool_2_U arg0@@4)) boolType)
                :pattern ((bool_2_U arg0@@4))
                :qid |funType:bool_2_U|)))
      (a!10 (forall ((arg0@@5 RoundingMode))
              (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
                 :pattern ((rmode_2_U arg0@@5))
                 :qid |typeInv:U_2_rmode|)))
      (a!11 (forall ((x@@2 T@U))
              (! (=> (= (type x@@2) rmodeType)
                     (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
                 :pattern ((U_2_rmode x@@2))
                 :qid |cast:U_2_rmode|)))
      (a!12 (forall ((arg0@@6 RoundingMode))
              (! (= (type (rmode_2_U arg0@@6)) rmodeType)
                 :pattern ((rmode_2_U arg0@@6))
                 :qid |funType:rmode_2_U|)))
      (a!13 (forall ((arg0@@7 String))
              (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
                 :pattern ((string_2_U arg0@@7))
                 :qid |typeInv:U_2_string|)))
      (a!14 (forall ((x@@3 T@U))
              (! (=> (= (type x@@3) stringType)
                     (= (string_2_U (U_2_string x@@3)) x@@3))
                 :pattern ((U_2_string x@@3))
                 :qid |cast:U_2_string|)))
      (a!15 (forall ((arg0@@8 String))
              (! (= (type (string_2_U arg0@@8)) stringType)
                 :pattern ((string_2_U arg0@@8))
                 :qid |funType:string_2_U|)))
      (a!16 (forall ((arg0@@9 (RegEx String)))
              (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
                 :pattern ((regex_2_U arg0@@9))
                 :qid |typeInv:U_2_regex|)))
      (a!17 (forall ((x@@4 T@U))
              (! (=> (= (type x@@4) regexType)
                     (= (regex_2_U (U_2_regex x@@4)) x@@4))
                 :pattern ((U_2_regex x@@4))
                 :qid |cast:U_2_regex|)))
      (a!18 (forall ((arg0@@10 (RegEx String)))
              (! (= (type (regex_2_U arg0@@10)) regexType)
                 :pattern ((regex_2_U arg0@@10))
                 :qid |funType:regex_2_U|))))
  (and (= (Ctor intType) 0)
       (= (Ctor realType) 1)
       (= (Ctor boolType) 2)
       (= (Ctor rmodeType) 3)
       (= (Ctor stringType) 4)
       (= (Ctor regexType) 5)
       a!1
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10
       a!11
       a!12
       a!13
       a!14
       a!15
       a!16
       a!17
       a!18))

(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :no-pattern (U_2_int x@@5)
     :no-pattern (U_2_bool x@@5)
     :qid |bg:subtype-refl|))

(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (=> (and (= (type y) (type x@@6))
              (= (type z) (type x@@6))
              (UOrdering2 x@@6 y)
              (UOrdering2 y z))
         (UOrdering2 x@@6 z))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))

(forall ((x@@7 T@U) (y@@0 T@U))
  (! (=> (= (type y@@0) (type x@@7))
         (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))

(let ((a!1 (or %lbl%@1
               (=> (and (= |a#0| 10) (= |b#0| 11)) (= (+ |a#0| |b#0|) 21)))))
(let ((a!2 (=> (and (= |a#0| 10) (= |b#0| 11))
               (=> (! (and %lbl%+0 true) :lblpos +0) (! a!1 :lblneg @1))))
      (a!3 (=> (not (and (= |a#0| 10) (= |b#0| 11)))
               (=> (! (and %lbl%+0 true) :lblpos +0) (! a!1 :lblneg @1)))))
(let ((a!4 (and (=> (! (and %lbl%+3 true) :lblpos +3) a!2)
                (=> (! (and %lbl%+2 true) :lblpos +2) a!3))))
(let ((a!5 (=> (! (and %lbl%+4 true) :lblpos +4) (=> (not (= |a#0| 10)) a!4))))
(let ((a!6 (and (=> (! (and %lbl%+5 true) :lblpos +5) (=> (= |a#0| 10) a!4))
                a!5)))
  (not (=> (! (and %lbl%+6 true) :lblpos +6) a!6)))))))

	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)

solver check_sat_core
(declare-sort T@U 0)
(declare-sort T@T 0)
(declare-fun tickleBool (Bool) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun UOrdering2 (T@U T@U) Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%+4 () Bool)
(declare-fun %lbl%+2 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun |b#0| () Int)
(declare-fun |a#0| () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+3 () Bool)
(declare-fun %lbl%+5 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (<= (Ctor intType) 0))
(assert (>= (Ctor intType) 0))
(assert (<= (Ctor realType) 1))
(assert (>= (Ctor realType) 1))
(assert (<= (Ctor boolType) 2))
(assert (>= (Ctor boolType) 2))
(assert (<= (Ctor rmodeType) 3))
(assert (>= (Ctor rmodeType) 3))
(assert (<= (Ctor stringType) 4))
(assert (>= (Ctor stringType) 4))
(assert (<= (Ctor regexType) 5))
(assert (>= (Ctor regexType) 5))
(assert (forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|)))
(assert (forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|)))
(assert (forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|)))
(assert (forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|)))
(assert (forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|)))
(assert (forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|)))
(assert (forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|)))
(assert (forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|)))
(assert (forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|)))
(assert (forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|)))
(assert (forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|)))
(assert (forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|)))
(assert (forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|)))
(assert (forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|)))
(assert (forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|)))
(assert (forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|)))
(assert (forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|)))
(assert (forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|)))
(assert (forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|)))
(assert (forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|)))
(assert (! %lbl%+6 :lblpos +6))
(assert (let ((a!1 (and (<= |a#0| 10) (>= |a#0| 10) (<= |b#0| 11) (>= |b#0| 11))))
(let ((a!2 (or %lbl%@1
               (and (<= (+ |a#0| |b#0|) 21) (>= (+ |a#0| |b#0|) 21))
               (not a!1))))
(let ((a!3 (and (or (not a!1)
                    (! a!2 :lblneg @1)
                    (not (! %lbl%+0 :lblpos +0))
                    (not (! %lbl%+3 :lblpos +3)))
                (or a!1
                    (! a!2 :lblneg @1)
                    (not (! %lbl%+0 :lblpos +0))
                    (not (! %lbl%+2 :lblpos +2))))))
(let ((a!4 (or a!3
               (not (and (<= |a#0| 10) (>= |a#0| 10)))
               (not (! %lbl%+5 :lblpos +5)))))
(let ((a!5 (and a!4
                (or (and (<= |a#0| 10) (>= |a#0| 10))
                    a!3
                    (not (! %lbl%+4 :lblpos +4))))))
  (not a!5)))))))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
(<= (Ctor intType) 0)
(>= (Ctor intType) 0)
(<= (Ctor realType) 1)
(>= (Ctor realType) 1)
(<= (Ctor boolType) 2)
(>= (Ctor boolType) 2)
(<= (Ctor rmodeType) 3)
(>= (Ctor rmodeType) 3)
(<= (Ctor stringType) 4)
(>= (Ctor stringType) 4)
(<= (Ctor regexType) 5)
(>= (Ctor regexType) 5)
(forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|))
(forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|))
(forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|))
(forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|))
(forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|))
(forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|))
(forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|))
(forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|))
(forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|))
(forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|))
(forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|))
(forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|))
(forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|))
(forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|))
(forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|))
(forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|))
(forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|))
(forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|))
(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|))
(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))
(forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))
[HEAD] ==>
(! %lbl%+6 :lblpos +6)
(let ((a!1 (and (<= |a#0| 10) (>= |a#0| 10) (<= |b#0| 11) (>= |b#0| 11))))
(let ((a!2 (or %lbl%@1
               (and (<= (+ |a#0| |b#0|) 21) (>= (+ |a#0| |b#0|) 21))
               (not a!1))))
(let ((a!3 (and (or (not a!1)
                    (! a!2 :lblneg @1)
                    (not (! %lbl%+0 :lblpos +0))
                    (not (! %lbl%+3 :lblpos +3)))
                (or a!1
                    (! a!2 :lblneg @1)
                    (not (! %lbl%+0 :lblpos +0))
                    (not (! %lbl%+2 :lblpos +2))))))
(let ((a!4 (or a!3
               (not (and (<= |a#0| 10) (>= |a#0| 10)))
               (not (! %lbl%+5 :lblpos +5)))))
(let ((a!5 (and a!4
                (or (and (<= |a#0| 10) (>= |a#0| 10))
                    a!3
                    (not (! %lbl%+4 :lblpos +4))))))
  (not a!5))))))
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
(<= (Ctor intType) 0)
(>= (Ctor intType) 0)
(<= (Ctor realType) 1)
(>= (Ctor realType) 1)
(<= (Ctor boolType) 2)
(>= (Ctor boolType) 2)
(<= (Ctor rmodeType) 3)
(>= (Ctor rmodeType) 3)
(<= (Ctor stringType) 4)
(>= (Ctor stringType) 4)
(<= (Ctor regexType) 5)
(>= (Ctor regexType) 5)
(forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|))
(forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|))
(forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|))
(forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|))
(forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|))
(forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|))
(forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|))
(forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|))
(forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|))
(forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|))
(forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|))
(forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|))
(forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|))
(forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|))
(forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|))
(forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|))
(forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|))
(forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|))
(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|))
(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))
(forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))
[HEAD] ==>
%lbl%+6
(! true :lblpos +6)
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (! true :lblpos +4) a!2 a!4)))
(or (! true :lblpos +4) %lbl%+5)
(or (! true :lblpos +4) (! true :lblpos +5))
(or (! true :lblpos +4) (<= |a#0| 10))
(or (! true :lblpos +4) (>= |a#0| 10))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (or a!2 a!4) (or a!2 a!4))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 %lbl%+5)))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (! true :lblpos +5))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (<= |a#0| 10))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (>= |a#0| 10))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) a!2 a!4)))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) %lbl%+5)
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (! true :lblpos +5))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (<= |a#0| 10))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (>= |a#0| 10))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or %lbl%+4 a!2 a!4)))
(or %lbl%+4 %lbl%+5)
(or %lbl%+4 (! true :lblpos +5))
(or %lbl%+4 (<= |a#0| 10))
(or %lbl%+4 (>= |a#0| 10))
inconsistent: 0

(smt.diff_logic: non-diff logic expression (<= (+ |a#0| |b#0|) 21))
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
after internalize_assertions()...
Logical context:
scope-lvl: 1
base-lvl:  1
search-lvl:  1
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
#1 := true
#22 := (tickleBool true)
#2 := false
#23 := (tickleBool false)
#27 := 0
#25 := intType
#26 := (Ctor intType)
#221 := (<= #26 0)
#220 := (>= #26 0)
#31 := 1
#29 := realType
#30 := (Ctor realType)
#228 := (<= #30 1)
#227 := (>= #30 1)
#36 := 2
#34 := boolType
#35 := (Ctor boolType)
#235 := (<= #35 2)
#234 := (>= #35 2)
#41 := 3
#39 := rmodeType
#40 := (Ctor rmodeType)
#242 := (<= #40 3)
#241 := (>= #40 3)
#46 := 4
#44 := stringType
#45 := (Ctor stringType)
#249 := (<= #45 4)
#248 := (>= #45 4)
#51 := 5
#49 := regexType
#50 := (Ctor regexType)
#256 := (<= #50 5)
#255 := (>= #50 5)
#54 := (:var 0 Int)
#55 := (int_2_U #54)
#58 := (pattern #55)
#56 := (U_2_int #55)
#265 := -1
#268 := (* -1 #56)
#269 := (+ #54 #268)
#267 := (<= #269 0)
#271 := (not #267)
#266 := (>= #269 0)
#270 := (not #266)
#272 := (or #270 #271)
#273 := (not #272)
#274 := (forall (vars (arg0 Int)) (:pat #58) #273)
#61 := (:var 0 T@U)
#64 := (U_2_int #61)
#68 := (pattern #64)
#65 := (int_2_U #64)
#66 := (= #65 #61)
#62 := (type #61)
#63 := (= #62 intType)
#169 := (not #63)
#170 := (or #169 #66)
#171 := (forall (vars (x T@U)) (:pat #68) #170)
#71 := (type #55)
#72 := (= #71 intType)
#73 := (forall (vars (arg0@@0 Int)) (:pat #58) #72)
#6 := (:var 0 Real)
#75 := (real_2_U #6)
#78 := (pattern #75)
#277 := 0.0
#76 := (U_2_real #75)
#275 := -1.0
#279 := (* -1.0 #76)
#280 := (+ #6 #279)
#278 := (<= #280 0.0)
#282 := (not #278)
#276 := (>= #280 0.0)
#281 := (not #276)
#283 := (or #281 #282)
#284 := (not #283)
#285 := (forall (vars (arg0@@1 Real)) (:pat #78) #284)
#82 := (U_2_real #61)
#86 := (pattern #82)
#83 := (real_2_U #82)
#84 := (= #83 #61)
#81 := (= #62 realType)
#172 := (not #81)
#173 := (or #172 #84)
#174 := (forall (vars (x@@0 T@U)) (:pat #86) #173)
#89 := (type #75)
#90 := (= #89 realType)
#91 := (forall (vars (arg0@@2 Real)) (:pat #78) #90)
#93 := (:var 0 Bool)
#94 := (bool_2_U #93)
#97 := (pattern #94)
#95 := (U_2_bool #94)
#96 := (= #95 #93)
#98 := (forall (vars (arg0@@3 Bool)) (:pat #97) #96)
#101 := (U_2_bool #61)
#105 := (pattern #101)
#102 := (bool_2_U #101)
#103 := (= #102 #61)
#100 := (= #62 boolType)
#175 := (not #100)
#176 := (or #175 #103)
#177 := (forall (vars (x@@1 T@U)) (:pat #105) #176)
#108 := (type #94)
#109 := (= #108 boolType)
#110 := (forall (vars (arg0@@4 Bool)) (:pat #97) #109)
#112 := (:var 0 RoundingMode)
#113 := (rmode_2_U #112)
#116 := (pattern #113)
#114 := (U_2_rmode #113)
#115 := (= #114 #112)
#117 := (forall (vars (arg0@@5 RoundingMode)) (:pat #116) #115)
#120 := (U_2_rmode #61)
#124 := (pattern #120)
#121 := (rmode_2_U #120)
#122 := (= #121 #61)
#119 := (= #62 rmodeType)
#178 := (not #119)
#179 := (or #178 #122)
#180 := (forall (vars (x@@2 T@U)) (:pat #124) #179)
#127 := (type #113)
#128 := (= #127 rmodeType)
#129 := (forall (vars (arg0@@6 RoundingMode)) (:pat #116) #128)
#131 := (:var 0 String[bv[8]])
#132 := (string_2_U #131)
#135 := (pattern #132)
#133 := (U_2_string #132)
#134 := (= #133 #131)
#136 := (forall (vars (arg0@@7 String[bv[8]])) (:pat #135) #134)
#139 := (U_2_string #61)
#143 := (pattern #139)
#140 := (string_2_U #139)
#141 := (= #140 #61)
#138 := (= #62 stringType)
#181 := (not #138)
#182 := (or #181 #141)
#183 := (forall (vars (x@@3 T@U)) (:pat #143) #182)
#146 := (type #132)
#147 := (= #146 stringType)
#148 := (forall (vars (arg0@@8 String[bv[8]])) (:pat #135) #147)
#150 := (:var 0 RegEx[String[bv[8]]])
#151 := (regex_2_U #150)
#154 := (pattern #151)
#152 := (U_2_regex #151)
#153 := (= #152 #150)
#155 := (forall (vars (arg0@@9 RegEx[String[bv[8]]])) (:pat #154) #153)
#158 := (U_2_regex #61)
#162 := (pattern #158)
#159 := (regex_2_U #158)
#160 := (= #159 #61)
#157 := (= #62 regexType)
#184 := (not #157)
#185 := (or #184 #160)
#186 := (forall (vars (x@@4 T@U)) (:pat #162) #185)
#165 := (type #151)
#166 := (= #165 regexType)
#167 := (forall (vars (arg0@@10 RegEx[String[bv[8]]])) (:pat #154) #166)
#187 := (UOrdering2 #61 #61)
#216 := (pattern #187)
#219 := (forall (vars (x@@5 T@U)) (:pat #216) #187)
#190 := (:var 1 T@U)
#197 := (UOrdering2 #190 #61)
#189 := (:var 2 T@U)
#196 := (UOrdering2 #189 #190)
#202 := (pattern #196 #197)
#286 := (not #197)
#264 := (not #196)
#191 := (type #189)
#194 := (= #62 #191)
#263 := (not #194)
#192 := (type #190)
#193 := (= #192 #191)
#262 := (not #193)
#200 := (UOrdering2 #189 #61)
#288 := (or #200 #262 #263 #264 #286)
#287 := (forall (vars (x@@6 T@U) (y T@U) (z T@U)) (:pat #202) #288)
#209 := (UOrdering2 #61 #190)
#214 := (pattern #197 #209)
#289 := (not #209)
#208 := (= #62 #192)
#218 := (not #208)
#211 := (= #190 #61)
#292 := (or #211 #218 #286 #289)
#293 := (forall (vars (x@@7 T@U) (y@@0 T@U)) (:pat #214) #292)
#298 := %lbl%+6
#312 := lbl-lit[+6]
#353 := lbl-lit[+4]
#226 := %lbl%@1
#337 := lbl-lit[@1]
#250 := %lbl%+3
#223 := %lbl%+0
#340 := lbl-lit[+0]
#342 := lbl-lit[+3]
#246 := 21
#232 := b#0
#222 := a#0
#245 := (+ a#0 b#0)
#316 := (<= #245 21)
#315 := (>= #245 21)
#338 := (not #315)
#322 := (not #316)
#341 := (or #322 #338)
#230 := 10
#307 := (<= a#0 10)
#306 := (>= a#0 10)
#233 := 11
#311 := (<= b#0 11)
#310 := (>= b#0 11)
#348 := (not #310)
#347 := (not #311)
#346 := (not #306)
#344 := (not #307)
#343 := (not #341)
#327 := (not lbl-lit[+3])
#325 := (not lbl-lit[+0])
#324 := (not %lbl%+0)
#323 := (not %lbl%+3)
#309 := (not lbl-lit[@1])
#328 := (or %lbl%@1 #309 #323 #324 #325 #327 #343 #344 #346 #347 #348)
#319 := (or #344 #346 #347 #348)
#261 := %lbl%+2
#345 := lbl-lit[+2]
#352 := (not lbl-lit[+2])
#351 := (not %lbl%+2)
#349 := (not #319)
#354 := (or %lbl%@1 #309 #324 #325 #343 #344 #346 #347 #348 #349 #351 #352)
#355 := (not #354)
#326 := (not #328)
#356 := (or #326 #355)
#291 := %lbl%+5
#350 := lbl-lit[+5]
#335 := (or #344 #346)
#236 := %lbl%+4
#403 := (or lbl-lit[+4] #356)
#404 := (or lbl-lit[+4] %lbl%+5)
#405 := (or lbl-lit[+4] lbl-lit[+5])
#393 := (or lbl-lit[+4] #307)
#406 := (or lbl-lit[+4] #306)
#407 := (or #356 #356)
#408 := (or #356 %lbl%+5)
#409 := (or #356 lbl-lit[+5])
#410 := (or #356 #307)
#411 := (or #356 #306)
#412 := (or #335 #356)
#413 := (or #335 %lbl%+5)
#414 := (or #335 lbl-lit[+5])
#415 := (or #335 #307)
#416 := (or #335 #306)
#417 := (or %lbl%+4 #356)
#418 := (or %lbl%+4 %lbl%+5)
#419 := (or %lbl%+4 lbl-lit[+5])
#420 := (or %lbl%+4 #307)
#421 := (or %lbl%+4 #306)
asserted formulas:
#22 #23 #221 #220 #228 #227 #235 #234 #242 #241 #249 #248 #256 #255 #274 #171 #73 #285 #174 #91 #98 #177 #110 #117 #180 #129 #136 #183 #148 #155 #186 #167 #219 #287 #293 #298 #312 #403 #404 #405 #393 #406 #407 #408 #409 #410 #411 #412 #413 #414 #415 #416 #417 #418 #419 #420 #421 
auxiliary clauses:
(<= (+ |a#0| |b#0|) 21) 
(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 

(>= (+ |a#0| |b#0|) 21) 
(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 

(not (<= (+ |a#0| |b#0|) 21)) 
(not (>= (+ |a#0| |b#0|) 21)) 
(not (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))) 

(not %lbl%@1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(! true :lblpos @1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

%lbl%+3 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

%lbl%+0 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(! true :lblpos +0) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(! true :lblpos +3) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(<= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(>= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(<= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(>= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

%lbl%@1 
(not (! true :lblpos @1)) 
(not %lbl%+3) 
(not %lbl%+0) 
(not (! true :lblpos +0)) 
(not (! true :lblpos +3)) 
(not (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))) 
(not (<= |a#0| 10)) 
(not (>= |a#0| 10)) 
(not (<= |b#0| 11)) 
(not (>= |b#0| 11)) 
(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))))) 

(<= |a#0| 10) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(>= |a#0| 10) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(<= |b#0| 11) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(>= |b#0| 11) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(not (<= |a#0| 10)) 
(not (>= |a#0| 10)) 
(not (<= |b#0| 11)) 
(not (>= |b#0| 11)) 
(not (or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11)))) 

(not %lbl%@1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(! true :lblpos @1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

%lbl%+0 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(! true :lblpos +0) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(<= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(>= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(<= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(>= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

%lbl%+2 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(! true :lblpos +2) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

%lbl%@1 
(not (! true :lblpos @1)) 
(not %lbl%+0) 
(not (! true :lblpos +0)) 
(not (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))) 
(not (<= |a#0| 10)) 
(not (>= |a#0| 10)) 
(not (<= |b#0| 11)) 
(not (>= |b#0| 11)) 
(not (or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11)))) 
(not %lbl%+2) 
(not (! true :lblpos +2)) 
(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2))))) 

(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4))) 

(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4))) 

(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))))) 
(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2))))) 
(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4)))) 

(! true :lblpos +4) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4))) 

(! true :lblpos +4) 
%lbl%+5 

(! true :lblpos +4) 
(! true :lblpos +5) 

(! true :lblpos +4) 
(<= |a#0| 10) 

(! true :lblpos +4) 
(>= |a#0| 10) 

(<= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(>= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(not (<= |a#0| 10)) 
(not (>= |a#0| 10)) 
(not (or (not (<= |a#0| 10)) (not (>= |a#0| 10)))) 

%lbl%+5 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(! true :lblpos +5) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(<= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(>= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

%lbl%+5 
%lbl%+4 

(! true :lblpos +5) 
%lbl%+4 

(<= |a#0| 10) 
%lbl%+4 

(>= |a#0| 10) 
%lbl%+4 

current assignment:
#22: (tickleBool true)
#23: (tickleBool false)
#221: (<= (Ctor intType) 0)
#220: (>= (Ctor intType) 0)
#228: (<= (Ctor realType) 1)
#227: (>= (Ctor realType) 1)
#235: (<= (Ctor boolType) 2)
#234: (>= (Ctor boolType) 2)
#242: (<= (Ctor rmodeType) 3)
#241: (>= (Ctor rmodeType) 3)
#249: (<= (Ctor stringType) 4)
#248: (>= (Ctor stringType) 4)
#256: (<= (Ctor regexType) 5)
#255: (>= (Ctor regexType) 5)
#274: #274
#171: #171
#73: #73
#285: #285
#174: #174
#91: #91
#98: #98
#177: #177
#110: #110
#117: #117
#180: #180
#129: #129
#136: #136
#183: #183
#148: #148
#155: #155
#186: #186
#167: #167
#219: #219
#287: #287
#293: #293
#298: %lbl%+6
#312: lbl-lit[+6]
#356: (or (not (or %lbl%@1 #309 #323 #324 #325 #327 #343 #344 #346 #347 #348)) (not (or %lbl%@1 #309 #324 #325 #343 #344 #346 #347 #348 #349 #351 #352)))
case-splits:
[HEAD2]=> #403 #404 #405 #393 #406 #407 #356 #408 #409 #410 #411 #412 #413 #414 #415 #416 #417 #418 #419 #420 #421 
expression -> bool_var:
(#1 -> true) (#22 -> p1) (#23 -> p2) (#221 -> p3) (#220 -> p4) (#228 -> p5) (#227 -> p6) (#235 -> p7) (#234 -> p8) (#242 -> p9) (#241 -> p10) (#249 -> p11) (#248 -> p12) (#256 -> p13) (#255 -> p14) (#274 -> p15) (#171 -> p16) (#73 -> p17) (#285 -> p18) (#174 -> p19) (#91 -> p20) (#98 -> p21) (#177 -> p22) (#110 -> p23) (#117 -> p24) (#180 -> p25) (#129 -> p26) (#136 -> p27) (#183 -> p28) (#148 -> p29) (#155 -> p30) (#186 -> p31) (#167 -> p32) (#219 -> p33) (#287 -> p34) (#293 -> p35) (#298 -> p36) (#312 -> p37) (#353 -> p38) (#226 -> p39) (#337 -> p40) (#250 -> p41) (#223 -> p42) (#340 -> p43) (#342 -> p44) (#316 -> p45) (#315 -> p46) (#341 -> p47) (#307 -> p48) (#306 -> p49) (#311 -> p50) (#310 -> p51) (#328 -> p52) (#319 -> p53) (#261 -> p54) (#345 -> p55) (#354 -> p56) (#356 -> p57) (#291 -> p58) (#350 -> p59) (#335 -> p60) (#236 -> p61) 
expression -> enode:
(#1 -> e!0) (#2 -> e!1) (#22 -> e!2) (#23 -> e!3) (#27 -> e!4) (#25 -> e!5) (#26 -> e!6) (#29 -> e!7) (#30 -> e!8) (#34 -> e!9) (#35 -> e!10) (#39 -> e!11) (#40 -> e!12) (#44 -> e!13) (#45 -> e!14) (#49 -> e!15) (#50 -> e!16) (#222 -> e!17) (#232 -> e!18) (#245 -> e!19) (#246 -> e!20) (#316 -> e!21) (#315 -> e!22) 
relevant exprs:
#22 #1 #23 #2 #221 #27 #26 #25 #220 #228 #31 #30 #29 #227 #235 #36 #35 #34 #234 #242 #41 #40 #39 #241 #249 #46 #45 #44 #248 #256 #51 #50 #49 #255 #274 #171 #73 #285 #174 #91 #98 #177 #110 #117 #180 #129 #136 #183 #148 #155 #186 #167 #219 #287 #293 #298 #312 #403 #404 #405 #393 #406 #407 #356 #408 #409 #410 #411 #412 #413 #414 #415 #416 #417 #418 #419 #420 #421 
	Theory Display
5
Theory dense difference logic:
v0 -> #27
v1 -> #26
v2 -> #30
v3 -> #35
v4 -> #40
v5 -> #45
v6 -> #50
v7 -> #246
v8 -> #222
v9 -> #232
#27    -- 0          : id1     --> #26
#27    -- 1          : id3     --> #30
#27    -- 2          : id5     --> #35
#27    -- 3          : id7     --> #40
#27    -- 4          : id9     --> #45
#27    -- 5          : id11    --> #50
#27    -- 21         : id13    --> #246
#26    -- 0          : id2     --> #27
#26    -- 1          : id3     --> #30
#26    -- 2          : id5     --> #35
#26    -- 3          : id7     --> #40
#26    -- 4          : id9     --> #45
#26    -- 5          : id11    --> #50
#26    -- 21         : id13    --> #246
#30    -- -1         : id4     --> #27
#30    -- -1         : id4     --> #26
#30    -- 1          : id5     --> #35
#30    -- 2          : id7     --> #40
#30    -- 3          : id9     --> #45
#30    -- 4          : id11    --> #50
#30    -- 20         : id13    --> #246
#35    -- -2         : id6     --> #27
#35    -- -2         : id6     --> #26
#35    -- -1         : id6     --> #30
#35    -- 1          : id7     --> #40
#35    -- 2          : id9     --> #45
#35    -- 3          : id11    --> #50
#35    -- 19         : id13    --> #246
#40    -- -3         : id8     --> #27
#40    -- -3         : id8     --> #26
#40    -- -2         : id8     --> #30
#40    -- -1         : id8     --> #35
#40    -- 1          : id9     --> #45
#40    -- 2          : id11    --> #50
#40    -- 18         : id13    --> #246
#45    -- -4         : id10    --> #27
#45    -- -4         : id10    --> #26
#45    -- -3         : id10    --> #30
#45    -- -2         : id10    --> #35
#45    -- -1         : id10    --> #40
#45    -- 1          : id11    --> #50
#45    -- 17         : id13    --> #246
#50    -- -5         : id12    --> #27
#50    -- -5         : id12    --> #26
#50    -- -4         : id12    --> #30
#50    -- -3         : id12    --> #35
#50    -- -2         : id12    --> #40
#50    -- -1         : id12    --> #45
#50    -- 16         : id13    --> #246
#246   -- -21        : id14    --> #27
#246   -- -21        : id14    --> #26
#246   -- -20        : id14    --> #30
#246   -- -19        : id14    --> #35
#246   -- -18        : id14    --> #40
#246   -- -17        : id14    --> #45
#246   -- -16        : id14    --> #50
atoms:
#26    - #27    <= 0                 assignment: l_true
#27    - #26    <= 0                 assignment: l_true
#30    - #27    <= 1                 assignment: l_true
#27    - #30    <= -1                assignment: l_true
#35    - #27    <= 2                 assignment: l_true
#27    - #35    <= -2                assignment: l_true
#40    - #27    <= 3                 assignment: l_true
#27    - #40    <= -3                assignment: l_true
#45    - #27    <= 4                 assignment: l_true
#27    - #45    <= -4                assignment: l_true
#50    - #27    <= 5                 assignment: l_true
#27    - #50    <= -5                assignment: l_true
#222   - #27    <= 10                assignment: l_undef
#27    - #222   <= -10               assignment: l_undef
#232   - #27    <= 11                assignment: l_undef
#27    - #232   <= -11               assignment: l_undef
8
7
6
9
recfun
disabled guards:

13
10
12
11
decl2enodes:
id 16 -> #316
id 17 -> #315
id 25 -> #245
id 136 -> #22 #23
id 137 -> #26 #30 #35 #40 #45 #50
hot bool vars:

(smt.preprocessing :time 0.32 :before-memory 0.80 :after-memory 0.80)
(smt.searching)
(smt.simplifying-clause-set :num-deleted-clauses 3)
(smt.simplifier-start)
(smt.simplifier-start)
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
	DenseDL: add_edge
	DenseDL: update_cells
(smt.simplifier-start)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.final-check "quantifiers")
(smt.stats :time 0.00 :before-memory 0.80 :after-memory 0.80)
unknown
(:reason-unknown "(incomplete (theory difference-logic))")
(labels +6 +4 @1 +0 +3 +5)
(smt.simplifying :time 0.00 :before-memory 0.80 :after-memory 0.80)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (forall ((arg0 Int))
             (! (= (U_2_int (int_2_U arg0)) arg0)
                :pattern ((int_2_U arg0))
                :qid |typeInv:U_2_int|)))
      (a!2 (forall ((x T@U))
             (! (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
                :pattern ((U_2_int x))
                :qid |cast:U_2_int|)))
      (a!3 (forall ((arg0@@0 Int))
             (! (= (type (int_2_U arg0@@0)) intType)
                :pattern ((int_2_U arg0@@0))
                :qid |funType:int_2_U|)))
      (a!4 (forall ((arg0@@1 Real))
             (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
                :pattern ((real_2_U arg0@@1))
                :qid |typeInv:U_2_real|)))
      (a!5 (forall ((x@@0 T@U))
             (! (=> (= (type x@@0) realType)
                    (= (real_2_U (U_2_real x@@0)) x@@0))
                :pattern ((U_2_real x@@0))
                :qid |cast:U_2_real|)))
      (a!6 (forall ((arg0@@2 Real))
             (! (= (type (real_2_U arg0@@2)) realType)
                :pattern ((real_2_U arg0@@2))
                :qid |funType:real_2_U|)))
      (a!7 (forall ((arg0@@3 Bool))
             (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
                :pattern ((bool_2_U arg0@@3))
                :qid |typeInv:U_2_bool|)))
      (a!8 (forall ((x@@1 T@U))
             (! (=> (= (type x@@1) boolType)
                    (= (bool_2_U (U_2_bool x@@1)) x@@1))
                :pattern ((U_2_bool x@@1))
                :qid |cast:U_2_bool|)))
      (a!9 (forall ((arg0@@4 Bool))
             (! (= (type (bool_2_U arg0@@4)) boolType)
                :pattern ((bool_2_U arg0@@4))
                :qid |funType:bool_2_U|)))
      (a!10 (forall ((arg0@@5 RoundingMode))
              (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
                 :pattern ((rmode_2_U arg0@@5))
                 :qid |typeInv:U_2_rmode|)))
      (a!11 (forall ((x@@2 T@U))
              (! (=> (= (type x@@2) rmodeType)
                     (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
                 :pattern ((U_2_rmode x@@2))
                 :qid |cast:U_2_rmode|)))
      (a!12 (forall ((arg0@@6 RoundingMode))
              (! (= (type (rmode_2_U arg0@@6)) rmodeType)
                 :pattern ((rmode_2_U arg0@@6))
                 :qid |funType:rmode_2_U|)))
      (a!13 (forall ((arg0@@7 String))
              (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
                 :pattern ((string_2_U arg0@@7))
                 :qid |typeInv:U_2_string|)))
      (a!14 (forall ((x@@3 T@U))
              (! (=> (= (type x@@3) stringType)
                     (= (string_2_U (U_2_string x@@3)) x@@3))
                 :pattern ((U_2_string x@@3))
                 :qid |cast:U_2_string|)))
      (a!15 (forall ((arg0@@8 String))
              (! (= (type (string_2_U arg0@@8)) stringType)
                 :pattern ((string_2_U arg0@@8))
                 :qid |funType:string_2_U|)))
      (a!16 (forall ((arg0@@9 (RegEx String)))
              (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
                 :pattern ((regex_2_U arg0@@9))
                 :qid |typeInv:U_2_regex|)))
      (a!17 (forall ((x@@4 T@U))
              (! (=> (= (type x@@4) regexType)
                     (= (regex_2_U (U_2_regex x@@4)) x@@4))
                 :pattern ((U_2_regex x@@4))
                 :qid |cast:U_2_regex|)))
      (a!18 (forall ((arg0@@10 (RegEx String)))
              (! (= (type (regex_2_U arg0@@10)) regexType)
                 :pattern ((regex_2_U arg0@@10))
                 :qid |funType:regex_2_U|))))
  (and (= (Ctor intType) 0)
       (= (Ctor realType) 1)
       (= (Ctor boolType) 2)
       (= (Ctor rmodeType) 3)
       (= (Ctor stringType) 4)
       (= (Ctor regexType) 5)
       a!1
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10
       a!11
       a!12
       a!13
       a!14
       a!15
       a!16
       a!17
       a!18))

(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :no-pattern (U_2_int x@@5)
     :no-pattern (U_2_bool x@@5)
     :qid |bg:subtype-refl|))

(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (=> (and (= (type y) (type x@@6))
              (= (type z) (type x@@6))
              (UOrdering2 x@@6 y)
              (UOrdering2 y z))
         (UOrdering2 x@@6 z))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))

(forall ((x@@7 T@U) (y@@0 T@U))
  (! (=> (= (type y@@0) (type x@@7))
         (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))

(let ((a!1 (or %lbl%@1
               (=> (and (= |a#0| 10) (= |b#0| 11)) (= (+ |a#0| |b#0|) 21)))))
(let ((a!2 (=> (and (= |a#0| 10) (= |b#0| 11))
               (=> (! (and %lbl%+0 true) :lblpos +0) (! a!1 :lblneg @1))))
      (a!3 (=> (not (and (= |a#0| 10) (= |b#0| 11)))
               (=> (! (and %lbl%+0 true) :lblpos +0) (! a!1 :lblneg @1)))))
(let ((a!4 (and (=> (! (and %lbl%+3 true) :lblpos +3) a!2)
                (=> (! (and %lbl%+2 true) :lblpos +2) a!3))))
(let ((a!5 (=> (! (and %lbl%+4 true) :lblpos +4) (=> (not (= |a#0| 10)) a!4))))
(let ((a!6 (and (=> (! (and %lbl%+5 true) :lblpos +5) (=> (= |a#0| 10) a!4))
                a!5)))
  (not (=> (! (and %lbl%+6 true) :lblpos +6) a!6)))))))

%lbl%@1

	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)

solver check_sat_core
(declare-sort T@U 0)
(declare-sort T@T 0)
(declare-fun tickleBool (Bool) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun UOrdering2 (T@U T@U) Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%+2 () Bool)
(declare-fun |b#0| () Int)
(declare-fun |a#0| () Int)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+3 () Bool)
(declare-fun %lbl%+5 () Bool)
(declare-fun %lbl%+4 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (<= (Ctor intType) 0))
(assert (>= (Ctor intType) 0))
(assert (<= (Ctor realType) 1))
(assert (>= (Ctor realType) 1))
(assert (<= (Ctor boolType) 2))
(assert (>= (Ctor boolType) 2))
(assert (<= (Ctor rmodeType) 3))
(assert (>= (Ctor rmodeType) 3))
(assert (<= (Ctor stringType) 4))
(assert (>= (Ctor stringType) 4))
(assert (<= (Ctor regexType) 5))
(assert (>= (Ctor regexType) 5))
(assert (forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|)))
(assert (forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|)))
(assert (forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|)))
(assert (forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|)))
(assert (forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|)))
(assert (forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|)))
(assert (forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|)))
(assert (forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|)))
(assert (forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|)))
(assert (forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|)))
(assert (forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|)))
(assert (forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|)))
(assert (forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|)))
(assert (forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|)))
(assert (forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|)))
(assert (forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|)))
(assert (forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|)))
(assert (forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|)))
(assert (forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|)))
(assert (forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|)))
(assert %lbl%+6)
(assert (! true :lblpos +6))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (! true :lblpos +4) a!2 a!4))))
(assert (or (! true :lblpos +4) %lbl%+5))
(assert (or (! true :lblpos +4) (! true :lblpos +5)))
(assert (or (! true :lblpos +4) (<= |a#0| 10)))
(assert (or (! true :lblpos +4) (>= |a#0| 10)))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (or a!2 a!4) (or a!2 a!4)))))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 %lbl%+5))))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (! true :lblpos +5)))))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (<= |a#0| 10)))))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (>= |a#0| 10)))))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) a!2 a!4))))
(assert (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) %lbl%+5))
(assert (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (! true :lblpos +5)))
(assert (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (<= |a#0| 10)))
(assert (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (>= |a#0| 10)))
(assert (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or %lbl%+4 a!2 a!4))))
(assert (or %lbl%+4 %lbl%+5))
(assert (or %lbl%+4 (! true :lblpos +5)))
(assert (or %lbl%+4 (<= |a#0| 10)))
(assert (or %lbl%+4 (>= |a#0| 10)))
(assert %lbl%@1)

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
(<= (Ctor intType) 0)
(>= (Ctor intType) 0)
(<= (Ctor realType) 1)
(>= (Ctor realType) 1)
(<= (Ctor boolType) 2)
(>= (Ctor boolType) 2)
(<= (Ctor rmodeType) 3)
(>= (Ctor rmodeType) 3)
(<= (Ctor stringType) 4)
(>= (Ctor stringType) 4)
(<= (Ctor regexType) 5)
(>= (Ctor regexType) 5)
(forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|))
(forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|))
(forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|))
(forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|))
(forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|))
(forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|))
(forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|))
(forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|))
(forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|))
(forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|))
(forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|))
(forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|))
(forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|))
(forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|))
(forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|))
(forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|))
(forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|))
(forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|))
(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|))
(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))
(forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))
%lbl%+6
(! true :lblpos +6)
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (! true :lblpos +4) a!2 a!4)))
(or (! true :lblpos +4) %lbl%+5)
(or (! true :lblpos +4) (! true :lblpos +5))
(or (! true :lblpos +4) (<= |a#0| 10))
(or (! true :lblpos +4) (>= |a#0| 10))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (or a!2 a!4) (or a!2 a!4))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 %lbl%+5)))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (! true :lblpos +5))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (<= |a#0| 10))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (>= |a#0| 10))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) a!2 a!4)))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) %lbl%+5)
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (! true :lblpos +5))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (<= |a#0| 10))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (>= |a#0| 10))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or %lbl%+4 a!2 a!4)))
(or %lbl%+4 %lbl%+5)
(or %lbl%+4 (! true :lblpos +5))
(or %lbl%+4 (<= |a#0| 10))
(or %lbl%+4 (>= |a#0| 10))
[HEAD] ==>
%lbl%@1
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
(<= (Ctor intType) 0)
(>= (Ctor intType) 0)
(<= (Ctor realType) 1)
(>= (Ctor realType) 1)
(<= (Ctor boolType) 2)
(>= (Ctor boolType) 2)
(<= (Ctor rmodeType) 3)
(>= (Ctor rmodeType) 3)
(<= (Ctor stringType) 4)
(>= (Ctor stringType) 4)
(<= (Ctor regexType) 5)
(>= (Ctor regexType) 5)
(forall ((arg0 Int))
  (! (let ((a!1 (+ arg0 (* (- 1) (U_2_int (int_2_U arg0))))))
       (not (or (not (>= a!1 0)) (not (<= a!1 0)))))
     :pattern ((int_2_U arg0))
     :qid |typeInv:U_2_int|))
(forall ((x T@U))
  (! (or (not (= (type x) intType)) (= (int_2_U (U_2_int x)) x))
     :pattern ((U_2_int x))
     :qid |cast:U_2_int|))
(forall ((arg0@@0 Int))
  (! (= (type (int_2_U arg0@@0)) intType)
     :pattern ((int_2_U arg0@@0))
     :qid |funType:int_2_U|))
(forall ((arg0@@1 Real))
  (! (let ((a!1 (+ arg0@@1 (* (- 1.0) (U_2_real (real_2_U arg0@@1))))))
       (not (or (not (>= a!1 0.0)) (not (<= a!1 0.0)))))
     :pattern ((real_2_U arg0@@1))
     :qid |typeInv:U_2_real|))
(forall ((x@@0 T@U))
  (! (or (not (= (type x@@0) realType)) (= (real_2_U (U_2_real x@@0)) x@@0))
     :pattern ((U_2_real x@@0))
     :qid |cast:U_2_real|))
(forall ((arg0@@2 Real))
  (! (= (type (real_2_U arg0@@2)) realType)
     :pattern ((real_2_U arg0@@2))
     :qid |funType:real_2_U|))
(forall ((arg0@@3 Bool))
  (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
     :pattern ((bool_2_U arg0@@3))
     :qid |typeInv:U_2_bool|))
(forall ((x@@1 T@U))
  (! (or (not (= (type x@@1) boolType)) (= (bool_2_U (U_2_bool x@@1)) x@@1))
     :pattern ((U_2_bool x@@1))
     :qid |cast:U_2_bool|))
(forall ((arg0@@4 Bool))
  (! (= (type (bool_2_U arg0@@4)) boolType)
     :pattern ((bool_2_U arg0@@4))
     :qid |funType:bool_2_U|))
(forall ((arg0@@5 RoundingMode))
  (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
     :pattern ((rmode_2_U arg0@@5))
     :qid |typeInv:U_2_rmode|))
(forall ((x@@2 T@U))
  (! (or (not (= (type x@@2) rmodeType)) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
     :pattern ((U_2_rmode x@@2))
     :qid |cast:U_2_rmode|))
(forall ((arg0@@6 RoundingMode))
  (! (= (type (rmode_2_U arg0@@6)) rmodeType)
     :pattern ((rmode_2_U arg0@@6))
     :qid |funType:rmode_2_U|))
(forall ((arg0@@7 String))
  (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
     :pattern ((string_2_U arg0@@7))
     :qid |typeInv:U_2_string|))
(forall ((x@@3 T@U))
  (! (or (not (= (type x@@3) stringType))
         (= (string_2_U (U_2_string x@@3)) x@@3))
     :pattern ((U_2_string x@@3))
     :qid |cast:U_2_string|))
(forall ((arg0@@8 String))
  (! (= (type (string_2_U arg0@@8)) stringType)
     :pattern ((string_2_U arg0@@8))
     :qid |funType:string_2_U|))
(forall ((arg0@@9 (RegEx String)))
  (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
     :pattern ((regex_2_U arg0@@9))
     :qid |typeInv:U_2_regex|))
(forall ((x@@4 T@U))
  (! (or (not (= (type x@@4) regexType)) (= (regex_2_U (U_2_regex x@@4)) x@@4))
     :pattern ((U_2_regex x@@4))
     :qid |cast:U_2_regex|))
(forall ((arg0@@10 (RegEx String)))
  (! (= (type (regex_2_U arg0@@10)) regexType)
     :pattern ((regex_2_U arg0@@10))
     :qid |funType:regex_2_U|))
(forall ((x@@5 T@U))
  (! (UOrdering2 x@@5 x@@5)
     :pattern ((UOrdering2 x@@5 x@@5))
     :qid |bg:subtype-refl|))
(forall ((x@@6 T@U) (y T@U) (z T@U))
  (! (or (UOrdering2 x@@6 z)
         (not (= (type y) (type x@@6)))
         (not (= (type z) (type x@@6)))
         (not (UOrdering2 x@@6 y))
         (not (UOrdering2 y z)))
     :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z))
     :qid |bg:subtype-trans|))
(forall ((x@@7 T@U) (y@@0 T@U))
  (! (or (= x@@7 y@@0)
         (not (= (type y@@0) (type x@@7)))
         (not (UOrdering2 x@@7 y@@0))
         (not (UOrdering2 y@@0 x@@7)))
     :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
     :qid |bg:subtype-antisymm|))
%lbl%+6
(! true :lblpos +6)
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (! true :lblpos +4) a!2 a!4)))
(or (! true :lblpos +4) %lbl%+5)
(or (! true :lblpos +4) (! true :lblpos +5))
(or (! true :lblpos +4) (<= |a#0| 10))
(or (! true :lblpos +4) (>= |a#0| 10))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (or a!2 a!4) (or a!2 a!4))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 %lbl%+5)))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (! true :lblpos +5))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (<= |a#0| 10))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or a!2 a!4 (>= |a#0| 10))))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or (not (<= |a#0| 10)) (not (>= |a#0| 10)) a!2 a!4)))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) %lbl%+5)
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (! true :lblpos +5))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (<= |a#0| 10))
(or (not (<= |a#0| 10)) (not (>= |a#0| 10)) (>= |a#0| 10))
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!3 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
(let ((a!2 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+3)
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not (! true :lblpos +3))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11)))))
      (a!4 (not (or %lbl%@1
                    (not (! true :lblpos @1))
                    (not %lbl%+0)
                    (not (! true :lblpos +0))
                    (not a!1)
                    (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))
                    a!3
                    (not %lbl%+2)
                    (not (! true :lblpos +2))))))
  (or %lbl%+4 a!2 a!4)))
(or %lbl%+4 %lbl%+5)
(or %lbl%+4 (! true :lblpos +5))
(or %lbl%+4 (<= |a#0| 10))
(or %lbl%+4 (>= |a#0| 10))
[HEAD] ==>
%lbl%@1
inconsistent: 0

after internalize_assertions()...
Logical context:
scope-lvl: 1
base-lvl:  1
search-lvl:  1
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
#1 := true
#22 := (tickleBool true)
#2 := false
#23 := (tickleBool false)
#27 := 0
#25 := intType
#26 := (Ctor intType)
#221 := (<= #26 0)
#220 := (>= #26 0)
#31 := 1
#29 := realType
#30 := (Ctor realType)
#228 := (<= #30 1)
#227 := (>= #30 1)
#36 := 2
#34 := boolType
#35 := (Ctor boolType)
#235 := (<= #35 2)
#234 := (>= #35 2)
#41 := 3
#39 := rmodeType
#40 := (Ctor rmodeType)
#242 := (<= #40 3)
#241 := (>= #40 3)
#46 := 4
#44 := stringType
#45 := (Ctor stringType)
#249 := (<= #45 4)
#248 := (>= #45 4)
#51 := 5
#49 := regexType
#50 := (Ctor regexType)
#256 := (<= #50 5)
#255 := (>= #50 5)
#54 := (:var 0 Int)
#55 := (int_2_U #54)
#58 := (pattern #55)
#56 := (U_2_int #55)
#265 := -1
#268 := (* -1 #56)
#269 := (+ #54 #268)
#267 := (<= #269 0)
#271 := (not #267)
#266 := (>= #269 0)
#270 := (not #266)
#272 := (or #270 #271)
#273 := (not #272)
#274 := (forall (vars (arg0 Int)) (:pat #58) #273)
#61 := (:var 0 T@U)
#64 := (U_2_int #61)
#68 := (pattern #64)
#65 := (int_2_U #64)
#66 := (= #65 #61)
#62 := (type #61)
#63 := (= #62 intType)
#169 := (not #63)
#170 := (or #169 #66)
#171 := (forall (vars (x T@U)) (:pat #68) #170)
#71 := (type #55)
#72 := (= #71 intType)
#73 := (forall (vars (arg0@@0 Int)) (:pat #58) #72)
#6 := (:var 0 Real)
#75 := (real_2_U #6)
#78 := (pattern #75)
#277 := 0.0
#76 := (U_2_real #75)
#275 := -1.0
#279 := (* -1.0 #76)
#280 := (+ #6 #279)
#278 := (<= #280 0.0)
#282 := (not #278)
#276 := (>= #280 0.0)
#281 := (not #276)
#283 := (or #281 #282)
#284 := (not #283)
#285 := (forall (vars (arg0@@1 Real)) (:pat #78) #284)
#82 := (U_2_real #61)
#86 := (pattern #82)
#83 := (real_2_U #82)
#84 := (= #83 #61)
#81 := (= #62 realType)
#172 := (not #81)
#173 := (or #172 #84)
#174 := (forall (vars (x@@0 T@U)) (:pat #86) #173)
#89 := (type #75)
#90 := (= #89 realType)
#91 := (forall (vars (arg0@@2 Real)) (:pat #78) #90)
#93 := (:var 0 Bool)
#94 := (bool_2_U #93)
#97 := (pattern #94)
#95 := (U_2_bool #94)
#96 := (= #95 #93)
#98 := (forall (vars (arg0@@3 Bool)) (:pat #97) #96)
#101 := (U_2_bool #61)
#105 := (pattern #101)
#102 := (bool_2_U #101)
#103 := (= #102 #61)
#100 := (= #62 boolType)
#175 := (not #100)
#176 := (or #175 #103)
#177 := (forall (vars (x@@1 T@U)) (:pat #105) #176)
#108 := (type #94)
#109 := (= #108 boolType)
#110 := (forall (vars (arg0@@4 Bool)) (:pat #97) #109)
#112 := (:var 0 RoundingMode)
#113 := (rmode_2_U #112)
#116 := (pattern #113)
#114 := (U_2_rmode #113)
#115 := (= #114 #112)
#117 := (forall (vars (arg0@@5 RoundingMode)) (:pat #116) #115)
#120 := (U_2_rmode #61)
#124 := (pattern #120)
#121 := (rmode_2_U #120)
#122 := (= #121 #61)
#119 := (= #62 rmodeType)
#178 := (not #119)
#179 := (or #178 #122)
#180 := (forall (vars (x@@2 T@U)) (:pat #124) #179)
#127 := (type #113)
#128 := (= #127 rmodeType)
#129 := (forall (vars (arg0@@6 RoundingMode)) (:pat #116) #128)
#131 := (:var 0 String[bv[8]])
#132 := (string_2_U #131)
#135 := (pattern #132)
#133 := (U_2_string #132)
#134 := (= #133 #131)
#136 := (forall (vars (arg0@@7 String[bv[8]])) (:pat #135) #134)
#139 := (U_2_string #61)
#143 := (pattern #139)
#140 := (string_2_U #139)
#141 := (= #140 #61)
#138 := (= #62 stringType)
#181 := (not #138)
#182 := (or #181 #141)
#183 := (forall (vars (x@@3 T@U)) (:pat #143) #182)
#146 := (type #132)
#147 := (= #146 stringType)
#148 := (forall (vars (arg0@@8 String[bv[8]])) (:pat #135) #147)
#150 := (:var 0 RegEx[String[bv[8]]])
#151 := (regex_2_U #150)
#154 := (pattern #151)
#152 := (U_2_regex #151)
#153 := (= #152 #150)
#155 := (forall (vars (arg0@@9 RegEx[String[bv[8]]])) (:pat #154) #153)
#158 := (U_2_regex #61)
#162 := (pattern #158)
#159 := (regex_2_U #158)
#160 := (= #159 #61)
#157 := (= #62 regexType)
#184 := (not #157)
#185 := (or #184 #160)
#186 := (forall (vars (x@@4 T@U)) (:pat #162) #185)
#165 := (type #151)
#166 := (= #165 regexType)
#167 := (forall (vars (arg0@@10 RegEx[String[bv[8]]])) (:pat #154) #166)
#187 := (UOrdering2 #61 #61)
#216 := (pattern #187)
#219 := (forall (vars (x@@5 T@U)) (:pat #216) #187)
#190 := (:var 1 T@U)
#197 := (UOrdering2 #190 #61)
#189 := (:var 2 T@U)
#196 := (UOrdering2 #189 #190)
#202 := (pattern #196 #197)
#286 := (not #197)
#264 := (not #196)
#191 := (type #189)
#194 := (= #62 #191)
#263 := (not #194)
#192 := (type #190)
#193 := (= #192 #191)
#262 := (not #193)
#200 := (UOrdering2 #189 #61)
#288 := (or #200 #262 #263 #264 #286)
#287 := (forall (vars (x@@6 T@U) (y T@U) (z T@U)) (:pat #202) #288)
#209 := (UOrdering2 #61 #190)
#214 := (pattern #197 #209)
#289 := (not #209)
#208 := (= #62 #192)
#218 := (not #208)
#211 := (= #190 #61)
#292 := (or #211 #218 #286 #289)
#293 := (forall (vars (x@@7 T@U) (y@@0 T@U)) (:pat #214) #292)
#298 := %lbl%+6
#312 := lbl-lit[+6]
#353 := lbl-lit[+4]
#226 := %lbl%@1
#337 := lbl-lit[@1]
#250 := %lbl%+3
#223 := %lbl%+0
#340 := lbl-lit[+0]
#342 := lbl-lit[+3]
#246 := 21
#232 := b#0
#222 := a#0
#245 := (+ a#0 b#0)
#316 := (<= #245 21)
#315 := (>= #245 21)
#338 := (not #315)
#322 := (not #316)
#341 := (or #322 #338)
#230 := 10
#307 := (<= a#0 10)
#306 := (>= a#0 10)
#233 := 11
#311 := (<= b#0 11)
#310 := (>= b#0 11)
#348 := (not #310)
#347 := (not #311)
#346 := (not #306)
#344 := (not #307)
#343 := (not #341)
#327 := (not lbl-lit[+3])
#325 := (not lbl-lit[+0])
#324 := (not %lbl%+0)
#323 := (not %lbl%+3)
#309 := (not lbl-lit[@1])
#328 := (or %lbl%@1 #309 #323 #324 #325 #327 #343 #344 #346 #347 #348)
#319 := (or #344 #346 #347 #348)
#261 := %lbl%+2
#345 := lbl-lit[+2]
#352 := (not lbl-lit[+2])
#351 := (not %lbl%+2)
#349 := (not #319)
#354 := (or %lbl%@1 #309 #324 #325 #343 #344 #346 #347 #348 #349 #351 #352)
#355 := (not #354)
#326 := (not #328)
#356 := (or #326 #355)
#291 := %lbl%+5
#350 := lbl-lit[+5]
#335 := (or #344 #346)
#236 := %lbl%+4
#403 := (or lbl-lit[+4] #356)
#404 := (or lbl-lit[+4] %lbl%+5)
#405 := (or lbl-lit[+4] lbl-lit[+5])
#393 := (or lbl-lit[+4] #307)
#406 := (or lbl-lit[+4] #306)
#407 := (or #356 #356)
#408 := (or #356 %lbl%+5)
#409 := (or #356 lbl-lit[+5])
#410 := (or #356 #307)
#411 := (or #356 #306)
#412 := (or #335 #356)
#413 := (or #335 %lbl%+5)
#414 := (or #335 lbl-lit[+5])
#415 := (or #335 #307)
#416 := (or #335 #306)
#417 := (or %lbl%+4 #356)
#418 := (or %lbl%+4 %lbl%+5)
#419 := (or %lbl%+4 lbl-lit[+5])
#420 := (or %lbl%+4 #307)
#421 := (or %lbl%+4 #306)
asserted formulas:
#22 #23 #221 #220 #228 #227 #235 #234 #242 #241 #249 #248 #256 #255 #274 #171 #73 #285 #174 #91 #98 #177 #110 #117 #180 #129 #136 #183 #148 #155 #186 #167 #219 #287 #293 #298 #312 #403 #404 #405 #393 #406 #407 #408 #409 #410 #411 #412 #413 #414 #415 #416 #417 #418 #419 #420 #421 #226 
auxiliary clauses:
(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 
(<= (+ |a#0| |b#0|) 21) 

(>= (+ |a#0| |b#0|) 21) 
(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 

(not (<= (+ |a#0| |b#0|) 21)) 
(not (>= (+ |a#0| |b#0|) 21)) 
(not (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))) 

(not %lbl%@1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(! true :lblpos @1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

%lbl%+3 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

%lbl%+0 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(! true :lblpos +0) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(! true :lblpos +3) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(<= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(>= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(<= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(>= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11)))) 

(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))))) 
(not (! true :lblpos @1)) 
(not %lbl%+3) 
(not %lbl%+0) 
(not (! true :lblpos +0)) 
(not (! true :lblpos +3)) 
(not (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))) 
(not (<= |a#0| 10)) 
(not (>= |a#0| 10)) 
(not (<= |b#0| 11)) 
(not (>= |b#0| 11)) 
%lbl%@1 

(<= |a#0| 10) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(>= |a#0| 10) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(<= |b#0| 11) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(>= |b#0| 11) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

(not (or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11)))) 
(not (>= |a#0| 10)) 
(not (<= |b#0| 11)) 
(not (>= |b#0| 11)) 
(not (<= |a#0| 10)) 

(not %lbl%@1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(! true :lblpos @1) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

%lbl%+0 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(! true :lblpos +0) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(<= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(>= |a#0| 10) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(<= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(>= |b#0| 11) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 
(or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11))) 

%lbl%+2 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(! true :lblpos +2) 
(let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2)))) 

(not (or (not (<= |a#0| 10))
    (not (>= |a#0| 10))
    (not (<= |b#0| 11))
    (not (>= |b#0| 11)))) 
(not %lbl%+2) 
(not %lbl%+0) 
(not (! true :lblpos +0)) 
(not (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))) 
(not (<= |a#0| 10)) 
(not (>= |a#0| 10)) 
(not (<= |b#0| 11)) 
(not (>= |b#0| 11)) 
%lbl%@1 
(not (! true :lblpos @1)) 
(not (! true :lblpos +2)) 
(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2))))) 

(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21)))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+3)
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not (! true :lblpos +3))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))))) 
(not (let ((a!1 (or (not (<= (+ |a#0| |b#0|) 21)) (not (>= (+ |a#0| |b#0|) 21))))
      (a!2 (not (or (not (<= |a#0| 10))
                    (not (>= |a#0| 10))
                    (not (<= |b#0| 11))
                    (not (>= |b#0| 11))))))
  (or %lbl%@1
      (not (! true :lblpos @1))
      (not %lbl%+0)
      (not (! true :lblpos +0))
      (not a!1)
      (not (<= |a#0| 10))
      (not (>= |a#0| 10))
      (not (<= |b#0| 11))
      (not (>= |b#0| 11))
      a!2
      (not %lbl%+2)
      (not (! true :lblpos +2))))) 

(! true :lblpos +4) 
%lbl%+5 

(! true :lblpos +4) 
(! true :lblpos +5) 

(! true :lblpos +4) 
(<= |a#0| 10) 

(! true :lblpos +4) 
(>= |a#0| 10) 

(<= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(>= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(not (or (not (<= |a#0| 10)) (not (>= |a#0| 10)))) 
(not (>= |a#0| 10)) 
(not (<= |a#0| 10)) 

%lbl%+5 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(! true :lblpos +5) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(<= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

(>= |a#0| 10) 
(or (not (<= |a#0| 10)) (not (>= |a#0| 10))) 

%lbl%+5 
%lbl%+4 

(! true :lblpos +5) 
%lbl%+4 

(<= |a#0| 10) 
%lbl%+4 

(>= |a#0| 10) 
%lbl%+4 

current assignment:
#22: (tickleBool true)
#23: (tickleBool false)
#221: (<= (Ctor intType) 0)
#220: (>= (Ctor intType) 0)
#228: (<= (Ctor realType) 1)
#227: (>= (Ctor realType) 1)
#235: (<= (Ctor boolType) 2)
#234: (>= (Ctor boolType) 2)
#242: (<= (Ctor rmodeType) 3)
#241: (>= (Ctor rmodeType) 3)
#249: (<= (Ctor stringType) 4)
#248: (>= (Ctor stringType) 4)
#256: (<= (Ctor regexType) 5)
#255: (>= (Ctor regexType) 5)
#274: #274
#171: #171
#73: #73
#285: #285
#174: #174
#91: #91
#98: #98
#177: #177
#110: #110
#117: #117
#180: #180
#129: #129
#136: #136
#183: #183
#148: #148
#155: #155
#186: #186
#167: #167
#219: #219
#287: #287
#293: #293
#298: %lbl%+6
#312: lbl-lit[+6]
#356: (or (not (or %lbl%@1 #309 #323 #324 #325 #327 #343 #344 #346 #347 #348)) (not (or %lbl%@1 #309 #324 #325 #343 #344 #346 #347 #348 #349 #351 #352)))
#226: %lbl%@1
case-splits:
#403 [HEAD2]=> #404 #405 #393 #406 #407 #356 #408 #409 #410 #411 #412 #413 #414 #415 #416 #417 #418 #419 #420 #421 
expression -> bool_var:
(#1 -> true) (#22 -> p1) (#23 -> p2) (#221 -> p3) (#220 -> p4) (#228 -> p5) (#227 -> p6) (#235 -> p7) (#234 -> p8) (#242 -> p9) (#241 -> p10) (#249 -> p11) (#248 -> p12) (#256 -> p13) (#255 -> p14) (#274 -> p15) (#171 -> p16) (#73 -> p17) (#285 -> p18) (#174 -> p19) (#91 -> p20) (#98 -> p21) (#177 -> p22) (#110 -> p23) (#117 -> p24) (#180 -> p25) (#129 -> p26) (#136 -> p27) (#183 -> p28) (#148 -> p29) (#155 -> p30) (#186 -> p31) (#167 -> p32) (#219 -> p33) (#287 -> p34) (#293 -> p35) (#298 -> p36) (#312 -> p37) (#353 -> p38) (#226 -> p39) (#337 -> p40) (#250 -> p41) (#223 -> p42) (#340 -> p43) (#342 -> p44) (#316 -> p45) (#315 -> p46) (#341 -> p47) (#307 -> p48) (#306 -> p49) (#311 -> p50) (#310 -> p51) (#328 -> p52) (#319 -> p53) (#261 -> p54) (#345 -> p55) (#354 -> p56) (#356 -> p57) (#291 -> p58) (#350 -> p59) (#335 -> p60) (#236 -> p61) 
expression -> enode:
(#1 -> e!0) (#2 -> e!1) (#22 -> e!2) (#23 -> e!3) (#27 -> e!4) (#25 -> e!5) (#26 -> e!6) (#29 -> e!7) (#30 -> e!8) (#34 -> e!9) (#35 -> e!10) (#39 -> e!11) (#40 -> e!12) (#44 -> e!13) (#45 -> e!14) (#49 -> e!15) (#50 -> e!16) (#222 -> e!17) (#232 -> e!18) (#245 -> e!19) (#246 -> e!20) (#316 -> e!21) (#315 -> e!22) 
relevant exprs:
#22 #1 #23 #2 #221 #27 #26 #25 #220 #228 #31 #30 #29 #227 #235 #36 #35 #34 #234 #242 #41 #40 #39 #241 #249 #46 #45 #44 #248 #256 #51 #50 #49 #255 #274 #171 #73 #285 #174 #91 #98 #177 #110 #117 #180 #129 #136 #183 #148 #155 #186 #167 #219 #287 #293 #298 #312 #403 #404 #405 #393 #406 #407 #356 #408 #409 #410 #411 #412 #413 #414 #415 #416 #417 #418 #419 #420 #421 #226 
	Theory Display
5
Theory dense difference logic:
v0 -> #27
v1 -> #26
v2 -> #30
v3 -> #35
v4 -> #40
v5 -> #45
v6 -> #50
v7 -> #246
v8 -> #222
v9 -> #232
#27    -- 0          : id1     --> #26
#27    -- 1          : id3     --> #30
#27    -- 2          : id5     --> #35
#27    -- 3          : id7     --> #40
#27    -- 4          : id9     --> #45
#27    -- 5          : id11    --> #50
#27    -- 21         : id13    --> #246
#26    -- 0          : id2     --> #27
#26    -- 1          : id3     --> #30
#26    -- 2          : id5     --> #35
#26    -- 3          : id7     --> #40
#26    -- 4          : id9     --> #45
#26    -- 5          : id11    --> #50
#26    -- 21         : id13    --> #246
#30    -- -1         : id4     --> #27
#30    -- -1         : id4     --> #26
#30    -- 1          : id5     --> #35
#30    -- 2          : id7     --> #40
#30    -- 3          : id9     --> #45
#30    -- 4          : id11    --> #50
#30    -- 20         : id13    --> #246
#35    -- -2         : id6     --> #27
#35    -- -2         : id6     --> #26
#35    -- -1         : id6     --> #30
#35    -- 1          : id7     --> #40
#35    -- 2          : id9     --> #45
#35    -- 3          : id11    --> #50
#35    -- 19         : id13    --> #246
#40    -- -3         : id8     --> #27
#40    -- -3         : id8     --> #26
#40    -- -2         : id8     --> #30
#40    -- -1         : id8     --> #35
#40    -- 1          : id9     --> #45
#40    -- 2          : id11    --> #50
#40    -- 18         : id13    --> #246
#45    -- -4         : id10    --> #27
#45    -- -4         : id10    --> #26
#45    -- -3         : id10    --> #30
#45    -- -2         : id10    --> #35
#45    -- -1         : id10    --> #40
#45    -- 1          : id11    --> #50
#45    -- 17         : id13    --> #246
#50    -- -5         : id12    --> #27
#50    -- -5         : id12    --> #26
#50    -- -4         : id12    --> #30
#50    -- -3         : id12    --> #35
#50    -- -2         : id12    --> #40
#50    -- -1         : id12    --> #45
#50    -- 16         : id13    --> #246
#246   -- -21        : id14    --> #27
#246   -- -21        : id14    --> #26
#246   -- -20        : id14    --> #30
#246   -- -19        : id14    --> #35
#246   -- -18        : id14    --> #40
#246   -- -17        : id14    --> #45
#246   -- -16        : id14    --> #50
atoms:
#26    - #27    <= 0                 assignment: l_true
#27    - #26    <= 0                 assignment: l_true
#30    - #27    <= 1                 assignment: l_true
#27    - #30    <= -1                assignment: l_true
#35    - #27    <= 2                 assignment: l_true
#27    - #35    <= -2                assignment: l_true
#40    - #27    <= 3                 assignment: l_true
#27    - #40    <= -3                assignment: l_true
#45    - #27    <= 4                 assignment: l_true
#27    - #45    <= -4                assignment: l_true
#50    - #27    <= 5                 assignment: l_true
#27    - #50    <= -5                assignment: l_true
#222   - #27    <= 10                assignment: l_undef
#27    - #222   <= -10               assignment: l_undef
#232   - #27    <= 11                assignment: l_undef
#27    - #232   <= -11               assignment: l_undef
8
7
6
9
recfun
disabled guards:

13
10
12
11
decl2enodes:
id 16 -> #316
id 17 -> #315
id 25 -> #245
id 136 -> #22 #23
id 137 -> #26 #30 #35 #40 #45 #50
hot bool vars:

(smt.preprocessing :time 0.34 :before-memory 0.80 :after-memory 0.80)
(smt.searching)
(smt.stats :time 0.00 :before-memory 0.80 :after-memory 0.80)
unsat
