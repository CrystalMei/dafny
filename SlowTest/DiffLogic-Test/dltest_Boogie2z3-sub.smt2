(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; (set-option :model_compress false)
; done setting options

(set-option :smt.arith.solver 1) ; set diff logic solver
(set-logic DLA) 

;(declare-fun tickleBool (Bool) Bool)
;(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%+3 () Bool)
(set-info :boogie-vc-id P1)
(assert (not
(let ((anon0_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (and (! (or %lbl%@1  (=> (< x y) (< (* 2 x) (* 2 y)))) :lblneg @1) (=> (=> (< x y) (< (* 2 x) (* 2 y))) (! (or %lbl%@2  (=> (<= (* 2 x) (* 2 y)) (<= (* 3 x) (* 3 y)))) :lblneg @2))))))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+3 true) :lblpos +3) anon0_correct)))
PreconditionGeneratedEntry_correct))
))
(check-sat)