(QF-LIA probe check)
(QF-AUFLIA probe check)
(QF-LRA probe check)
(QF-LIRA probe check)
(ILP probe check)
(QF-NIA probe check)
(QF-NRA probe check)
(NIA probe check)
(NRA probe check)
(NIRA probe check)
(LIA probe check)
(LRA probe check)
(LIRA probe check)
(AF-UFNRA probe check)
	(Quantifier Probe)
	(mk DLA tactic)
	(mk-lia2pb-tactic)
	(mk SMT tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
mk_bool_var: creating boolean variable: 0 for: true, its ID: 1
mk_bool_var: mk_var_bug - mk_bool: 0
	(DLA logic setup)
	(unknown logic setup)
	(setup arith to Diff Logic)
	(setup arith: Dense Diff Logic)
	(setup arith: Dense Diff Logic - theory_dense_mi)
(smt.simplifier-start)
(smt.simplifier-start)
	(call solver...)
	(solver_na2as check_sat_core)
	(smt_solver check_sat_core)
(smt.simplifier-start)
(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.refine-injectivity)
(smt.pattern-inference)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)

internalize_assertion:
(not %lbl%@1)
(not %lbl%@1)

assert_default: expr = (not %lbl%@1), its ID: 45

internalize_rec:
(not %lbl%@1)
(not %lbl%@1)


internalize_formula:
(not %lbl%@1)
(not %lbl%@1)


internalize_rec:
%lbl%@1
%lbl%@1


internalize_formula:
%lbl%@1
%lbl%@1


internalize_theory_atom:
%lbl%@1
%lbl%@1

mk_bool_var: creating boolean variable: 1 for: %lbl%@1, its ID: 22
mk_bool_var: mk_var_bug - mk_bool: 1

internalize_assertion:
(or (not (<= (+ a b) 21)) (not (>= (+ a b) 21)))
#31 := (+ a b)
#38 := (>= #31 21)
#39 := (not #38)
#40 := (<= #31 21)
#44 := (not #40)
(or #44 #39)


internalize_rec:
(not (<= (+ a b) 21))
#31 := (+ a b)
#40 := (<= #31 21)
(not #40)


internalize_formula:
(not (<= (+ a b) 21))
#31 := (+ a b)
#40 := (<= #31 21)
(not #40)


internalize_rec:
(<= (+ a b) 21)
#31 := (+ a b)
(<= #31 21)


internalize_formula:
(<= (+ a b) 21)
#31 := (+ a b)
(<= #31 21)


internalize_theory_atom:
(<= (+ a b) 21)
#31 := (+ a b)
(<= #31 21)

DDL: internalize_atom: (<= (+ a b) 21)
DDL: internalize_atom: LHS = (+ a b)
DDL: internalize_atom: RHS = 21
(smt.diff_logic: non-diff logic expression (<= (+ a b) 21))

internalize_rec:
(+ a b)
(+ a b)

DDL: internalize_term:
(+ a b)
DDL: internalize_term_core:
(+ a b)

internalize_rec:
a
a


internalize_rec:
b
b


internalize_rec:
21
21

DDL: internalize_term:
21
DDL: internalize_term_core:
21
DDL: enode mk_var: 0
DDL: internalize_term_core:
0
DDL: enode mk_var: 1
	DDL: add_edge
DDL: trying adding edge:
#47 -- 21 --> #32
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#32 -- -21 --> #47
	DDL: update_cells
mk_bool_var: creating boolean variable: 2 for: (<= (+ a b) 21), its ID: 40
mk_bool_var: mk_var_bug - mk_bool: 2

internalize_rec:
(not (>= (+ a b) 21))
#31 := (+ a b)
#38 := (>= #31 21)
(not #38)


internalize_formula:
(not (>= (+ a b) 21))
#31 := (+ a b)
#38 := (>= #31 21)
(not #38)


internalize_rec:
(>= (+ a b) 21)
#31 := (+ a b)
(>= #31 21)


internalize_formula:
(>= (+ a b) 21)
#31 := (+ a b)
(>= #31 21)


internalize_theory_atom:
(>= (+ a b) 21)
#31 := (+ a b)
(>= #31 21)

DDL: internalize_atom: (>= (+ a b) 21)
DDL: internalize_atom: LHS = (+ a b)
DDL: internalize_atom: RHS = 21

internalize_rec:
(+ a b)
(+ a b)

DDL: internalize_term:
(+ a b)
DDL: internalize_term_core:
(+ a b)

internalize_rec:
21
21

mk_bool_var: creating boolean variable: 3 for: (>= (+ a b) 21), its ID: 38
mk_bool_var: mk_var_bug - mk_bool: 3

internalize_assertion:
(<= a 10)
(<= a 10)

assert_default: expr = (<= a 10), its ID: 49

internalize_rec:
(<= a 10)
(<= a 10)


internalize_formula:
(<= a 10)
(<= a 10)


internalize_theory_atom:
(<= a 10)
(<= a 10)

DDL: internalize_atom: (<= a 10)
DDL: internalize_atom: LHS = a
DDL: internalize_atom: RHS = 10
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = a, a
DDL: internalize_term_core:
0
DDL: internalize_term_core:
a
DDL: enode mk_var: 2
mk_bool_var: creating boolean variable: 4 for: (<= a 10), its ID: 49
mk_bool_var: mk_var_bug - mk_bool: 4

internalize_assertion:
(>= a 10)
(>= a 10)

assert_default: expr = (>= a 10), its ID: 48

internalize_rec:
(>= a 10)
(>= a 10)


internalize_formula:
(>= a 10)
(>= a 10)


internalize_theory_atom:
(>= a 10)
(>= a 10)

DDL: internalize_atom: (>= a 10)
DDL: internalize_atom: LHS = a
DDL: internalize_atom: RHS = 10
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = a, a
DDL: internalize_term_core:
0
DDL: internalize_term_core:
a
mk_bool_var: creating boolean variable: 5 for: (>= a 10), its ID: 48
mk_bool_var: mk_var_bug - mk_bool: 5

internalize_assertion:
(<= b 11)
(<= b 11)

assert_default: expr = (<= b 11), its ID: 56

internalize_rec:
(<= b 11)
(<= b 11)


internalize_formula:
(<= b 11)
(<= b 11)


internalize_theory_atom:
(<= b 11)
(<= b 11)

DDL: internalize_atom: (<= b 11)
DDL: internalize_atom: LHS = b
DDL: internalize_atom: RHS = 11
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = b, b
DDL: internalize_term_core:
0
DDL: internalize_term_core:
b
DDL: enode mk_var: 3
mk_bool_var: creating boolean variable: 6 for: (<= b 11), its ID: 56
mk_bool_var: mk_var_bug - mk_bool: 6

internalize_assertion:
(>= b 11)
(>= b 11)

assert_default: expr = (>= b 11), its ID: 55

internalize_rec:
(>= b 11)
(>= b 11)


internalize_formula:
(>= b 11)
(>= b 11)


internalize_theory_atom:
(>= b 11)
(>= b 11)

DDL: internalize_atom: (>= b 11)
DDL: internalize_atom: LHS = b
DDL: internalize_atom: RHS = 11
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = b, b
DDL: internalize_term_core:
0
DDL: internalize_term_core:
b
mk_bool_var: creating boolean variable: 7 for: (>= b 11), its ID: 55
mk_bool_var: mk_var_bug - mk_bool: 7

internalize_assertion:
(! true :lblpos @1)
lbl-lit[@1]

assert_default: expr = (! true :lblpos @1), its ID: 43

internalize_rec:
(! true :lblpos @1)
lbl-lit[@1]


internalize_formula:
(! true :lblpos @1)
lbl-lit[@1]


internalize_theory_atom:
(! true :lblpos @1)
lbl-lit[@1]

mk_bool_var: creating boolean variable: 8 for: (! true :lblpos @1), its ID: 43
mk_bool_var: mk_var_bug - mk_bool: 8
(smt.searching)
	DDL: add_edge
DDL: trying adding edge:
#47 -- 10 --> #24
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#24 -- -10 --> #47
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#47 -- 11 --> #27
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#27 -- -11 --> #47
	DDL: update_cells
(smt.simplifying-clause-set :num-deleted-clauses 0)
(smt.simplifier-start)
propagate_bool_var_enode - var: 3 #38
(smt.simplifier-start)
unknown
(:reason-unknown "(incomplete (theory difference-logic))")
