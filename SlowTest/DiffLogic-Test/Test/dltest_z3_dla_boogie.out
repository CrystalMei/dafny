(QF-LIA probe check)
(QF-AUFLIA probe check)
(QF-LRA probe check)
(QF-LIRA probe check)
(ILP probe check)
(QF-NIA probe check)
(QF-NRA probe check)
(NIA probe check)
(NRA probe check)
(NIRA probe check)
(LIA probe check)
(LRA probe check)
(LIRA probe check)
(AF-UFNRA probe check)
	(mk DLA tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
func-decl AST: (declare-fun tickleBool (Bool) Bool)
(smt.simplifying :time 0.00 :before-memory 0.66 :after-memory 0.66)
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun x () Int)
func-decl AST: (declare-fun y () Int)
func-decl AST: (declare-fun %lbl%@2 () Bool)
func-decl AST: (declare-fun %lbl%+3 () Bool)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.86 :after-memory 0.86)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (=> (< x y) (< (* 2 x) (* 2 y))))
      (a!2 (or %lbl%@2 (=> (<= (* 2 x) (* 2 y)) (<= (* 3 x) (* 3 y))))))
(let ((a!3 (=> (! (and %lbl%+0 true) :lblpos +0)
               (and (! (or %lbl%@1 a!1) :lblneg @1) (=> a!1 (! a!2 :lblneg @2))))))
  (not (=> (! (and %lbl%+3 true) :lblpos +3) a!3))))

	(call solver...)

combined solver check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+3 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (< x y) (< (* 2 x) (* 2 y))))
      (a!2 (or %lbl%@2 (=> (<= (* 2 x) (* 2 y)) (<= (* 3 x) (* 3 y))))))
(let ((a!3 (=> (! (and %lbl%+0 true) :lblpos +0)
               (and (! (or %lbl%@1 a!1) :lblneg @1) (=> a!1 (! a!2 :lblneg @2))))))
  (not (=> (! (and %lbl%+3 true) :lblpos +3) a!3)))))

(combined-solver "using solver 2 (without a timeout)")

before solver2 check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+3 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (< x y) (< (* 2 x) (* 2 y))))
      (a!2 (or %lbl%@2 (=> (<= (* 2 x) (* 2 y)) (<= (* 3 x) (* 3 y))))))
(let ((a!3 (=> (! (and %lbl%+0 true) :lblpos +0)
               (and (! (or %lbl%@1 a!1) :lblneg @1) (=> a!1 (! a!2 :lblneg @2))))))
  (not (=> (! (and %lbl%+3 true) :lblpos +3) a!3)))))

	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+3 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (not (and (! true :lblneg @1) (! true :lblneg @2))))
(assert (! %lbl%+0 :lblpos +0))
(assert (! %lbl%+3 :lblpos +3))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(not (and (! true :lblneg @1) (! true :lblneg @2)))
(! %lbl%+0 :lblpos +0)
(! %lbl%+3 :lblpos +3)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
unsat
	(mk DLA tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
func-decl AST: (declare-fun tickleBool (Bool) Bool)
(smt.simplifying :time 0.00 :before-memory 0.67 :after-memory 0.67)
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun x () Int)
func-decl AST: (declare-fun y () Int)
func-decl AST: (declare-fun %lbl%+2 () Bool)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.86 :after-memory 0.86)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (! (or %lbl%@1 (= (* x y) (* y x))) :lblneg @1)))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0) a!1))))
  (not a!2)))

	(call solver...)

combined solver check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (! (or %lbl%@1 (= (* x y) (* y x))) :lblneg @1)))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0) a!1))))
  (not a!2))))

(combined-solver "using solver 2 (without a timeout)")

before solver2 check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (! (or %lbl%@1 (= (* x y) (* y x))) :lblneg @1)))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0) a!1))))
  (not a!2))))

	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (not (! true :lblneg @1)))
(assert (! %lbl%+0 :lblpos +0))
(assert (! %lbl%+2 :lblpos +2))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(not (! true :lblneg @1))
(! %lbl%+0 :lblpos +0)
(! %lbl%+2 :lblpos +2)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
unsat
	(mk DLA tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
func-decl AST: (declare-fun tickleBool (Bool) Bool)
(smt.simplifying :time 0.00 :before-memory 0.67 :after-memory 0.67)
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun x () Int)
func-decl AST: (declare-fun y () Int)
func-decl AST: (declare-fun %lbl%+2 () Bool)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.86 :after-memory 0.86)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (=> (and (< 0 (* x y)) (< (* x y) 10)) (< x 10))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2)))

	(call solver...)

combined solver check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (< 0 (* x y)) (< (* x y) 10)) (< x 10))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

(combined-solver "using solver 2 (without a timeout)")

before solver2 check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (< 0 (* x y)) (< (* x y) 10)) (< x 10))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (let ((a!1 (and (not (<= (* x y) 0)) (not (>= (* x y) 10)))))
(let ((a!2 (! (or %lbl%@1 (not (>= x 10)) (not a!1)) :lblneg @1)))
  (not a!2))))
(assert (! %lbl%+0 :lblpos +0))
(assert (! %lbl%+2 :lblpos +2))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(let ((a!1 (and (not (<= (* x y) 0)) (not (>= (* x y) 10)))))
(let ((a!2 (! (or %lbl%@1 (not (>= x 10)) (not a!1)) :lblneg @1)))
  (not a!2)))
(! %lbl%+0 :lblpos +0)
(! %lbl%+2 :lblpos +2)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(not %lbl%@1)
(>= x 10)
(not (<= (* x y) 0))
(not (>= (* x y) 10))
(! true :lblpos @1)
%lbl%+0
(! true :lblpos +0)
%lbl%+2
(! true :lblpos +2)
inconsistent: 0

(smt.diff_logic: non-diff logic expression (* x y))
(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 0.86 :after-memory 0.86)
(combined-solver "solver 2 failed, trying solver1")
(combined-solver "using solver 1")
	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (< 0 (* x y)) (< (* x y) 10)) (< x 10))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

(simplifier :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(simplifier :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(fix-dl-var :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(propagate-values :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(ctx-simplify :num-steps 146)
(ctx-simplify :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(simplifier :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(solve_eqs :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(elim-uncnstr :num-exprs 26 :num-asts 214 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(simplifier :num-exprs 26 :num-asts 211 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(propagate-values :num-exprs 26 :num-asts 211 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(normalize-bounds :num-exprs 26 :num-asts 211 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(solve_eqs :num-exprs 26 :num-asts 211 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.tactic start)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
(! %lbl%+0 :lblpos +0)
(let ((a!1 (and (not (<= (* x y) 0)) (not (>= (* x y) 10)))))
(let ((a!2 (! (or %lbl%@1 (not (>= x 10)) (not a!1)) :lblneg @1)))
  (not a!2)))
(! %lbl%+2 :lblpos +2)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
%lbl%+0
(! true :lblpos +0)
(not %lbl%@1)
(>= x 10)
(not (<= (* x y) 0))
(not (>= (* x y) 10))
(! true :lblpos @1)
%lbl%+2
(! true :lblpos +2)
inconsistent: 0

(smt.diff_logic: non-diff logic expression (* x y))
(smt.preprocessing :time 0.00 :before-memory 1.26 :after-memory 1.26)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 1.26 :after-memory 1.26)
(smt :num-exprs 26 :num-asts 211 :time 0.00 :before-memory 0.86 :after-memory 0.92)
(tactic-exception "smt tactic failed to show goal to be sat/unsat (incomplete (theory difference-logic))")
unknown
	(mk DLA tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
func-decl AST: (declare-fun tickleBool (Bool) Bool)
(smt.simplifying :time 0.00 :before-memory 0.67 :after-memory 0.67)
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun y () Int)
func-decl AST: (declare-fun x () Int)
func-decl AST: (declare-fun %lbl%+2 () Bool)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.86 :after-memory 0.86)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (=> (and (>= y 0) (> (- x y) 0)) (> x 0))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2)))

	(call solver...)

combined solver check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (>= y 0) (> (- x y) 0)) (> x 0))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

(combined-solver "using solver 2 (without a timeout)")

before solver2 check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (>= y 0) (> (- x y) 0)) (> x 0))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (let ((a!1 (not (>= (+ y (* (- 1) x)) 0))))
(let ((a!2 (or %lbl%@1 (not (<= x 0)) (not (and (>= y 0) a!1)))))
  (not (! a!2 :lblneg @1)))))
(assert (! %lbl%+0 :lblpos +0))
(assert (! %lbl%+2 :lblpos +2))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(let ((a!1 (not (>= (+ y (* (- 1) x)) 0))))
(let ((a!2 (or %lbl%@1 (not (<= x 0)) (not (and (>= y 0) a!1)))))
  (not (! a!2 :lblneg @1))))
(! %lbl%+0 :lblpos +0)
(! %lbl%+2 :lblpos +2)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(not %lbl%@1)
(<= x 0)
(>= y 0)
(not (>= (+ y (* (- 1) x)) 0))
(! true :lblpos @1)
%lbl%+0
(! true :lblpos +0)
%lbl%+2
(! true :lblpos +2)
inconsistent: 0

(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.searching)
(smt.stats :time 0.00 :before-memory 0.86 :after-memory 0.86)
unsat
	(mk DLA tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
func-decl AST: (declare-fun tickleBool (Bool) Bool)
(smt.simplifying :time 0.00 :before-memory 0.67 :after-memory 0.67)
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun x () Int)
func-decl AST: (declare-fun y () Int)
func-decl AST: (declare-fun %lbl%+2 () Bool)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
inconsistent: 0

(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.86 :after-memory 0.86)
(started "check-sat")
check_sat AST:

(and (tickleBool true) (tickleBool false))

(let ((a!1 (=> (and (> (+ x y) 10) (> y 0)) (> (+ (+ x y) y) 9))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2)))

	(call solver...)

combined solver check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (> (+ x y) 10) (> y 0)) (> (+ (+ x y) y) 9))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

(combined-solver "using solver 2 (without a timeout)")

before solver2 check_sat
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (> (+ x y) 10) (> y 0)) (> (+ (+ x y) y) 9))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (tickleBool true))
(assert (tickleBool false))
(assert (let ((a!1 (not (<= (+ x (* 2 y)) 9)))
      (a!2 (and (not (<= (+ x y) 10)) (not (<= y 0)))))
  (not (! (or %lbl%@1 a!1 (not a!2)) :lblneg @1))))
(assert (! %lbl%+0 :lblpos +0))
(assert (! %lbl%+2 :lblpos +2))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(let ((a!1 (not (<= (+ x (* 2 y)) 9)))
      (a!2 (and (not (<= (+ x y) 10)) (not (<= y 0)))))
  (not (! (or %lbl%@1 a!1 (not a!2)) :lblneg @1)))
(! %lbl%+0 :lblpos +0)
(! %lbl%+2 :lblpos +2)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
(tickleBool true)
(tickleBool false)
[HEAD] ==>
(not %lbl%@1)
(<= (+ x (* 2 y)) 9)
(not (<= (+ x y) 10))
(not (<= y 0))
(! true :lblpos @1)
%lbl%+0
(! true :lblpos +0)
%lbl%+2
(! true :lblpos +2)
inconsistent: 0

(smt.diff_logic: non-diff logic expression (+ x (* 2 y)))
(smt.preprocessing :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 0.86 :after-memory 0.86)
(combined-solver "solver 2 failed, trying solver1")
(combined-solver "using solver 1")
	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun tickleBool (Bool) Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+2 () Bool)
(assert (and (tickleBool true) (tickleBool false)))
(assert (let ((a!1 (=> (and (> (+ x y) 10) (> y 0)) (> (+ (+ x y) y) 9))))
(let ((a!2 (=> (! (and %lbl%+2 true) :lblpos +2)
               (=> (! (and %lbl%+0 true) :lblpos +0)
                   (! (or %lbl%@1 a!1) :lblneg @1)))))
  (not a!2))))

(simplifier :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(simplifier :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(fix-dl-var :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(propagate-values :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(ctx-simplify :num-steps 146)
(ctx-simplify :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(simplifier :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(solve_eqs :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(elim-uncnstr :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(simplifier :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(propagate-values :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(normalize-bounds :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(solve_eqs :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.86)
(smt.tactic start)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
(smt.simplifying :time 0.00 :before-memory 1.16 :after-memory 1.16)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
(let ((a!1 (not (<= (+ x (* 2 y)) 9)))
      (a!2 (and (not (<= (+ x y) 10)) (not (<= y 0)))))
  (not (! (or %lbl%@1 a!1 (not a!2)) :lblneg @1)))
(! %lbl%+0 :lblpos +0)
(! %lbl%+2 :lblpos +2)
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(tickleBool true)
(tickleBool false)
(not %lbl%@1)
(<= (+ x (* 2 y)) 9)
(not (<= (+ x y) 10))
(not (<= y 0))
(! true :lblpos @1)
%lbl%+0
(! true :lblpos +0)
%lbl%+2
(! true :lblpos +2)
inconsistent: 0

(smt.diff_logic: non-diff logic expression (+ x (* 2 y)))
(smt.preprocessing :time 0.00 :before-memory 1.26 :after-memory 1.26)
(smt.searching)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 1.26 :after-memory 1.26)
(smt :num-exprs 30 :num-asts 218 :time 0.00 :before-memory 0.86 :after-memory 0.92)
(tactic-exception "smt tactic failed to show goal to be sat/unsat (incomplete (theory difference-logic))")
unknown
