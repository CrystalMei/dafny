(QF-LIA probe check)
(QF-AUFLIA probe check)
(QF-LRA probe check)
(QF-LIRA probe check)
(ILP probe check)
(QF-NIA probe check)
(QF-NRA probe check)
(NIA probe check)
(NRA probe check)
(NIRA probe check)
(LIA probe check)
(LRA probe check)
(LIRA probe check)
(AF-UFNRA probe check)
	(Quantifier Probe)
	(mk DLA tactic)
	(mk-lia2pb-tactic)
	(mk SMT tactic)
	(mk SMT tactic)
mk_combined_solver...
	(mk SMT solver)
mk_bool_var: creating boolean variable: 0 for: true, its ID: 1
mk_bool_var: mk_var_bug - mk_bool: 0
func-decl AST: (declare-fun %lbl%+0 () Bool)
func-decl AST: (declare-fun %lbl%@1 () Bool)
func-decl AST: (declare-fun a () Int)
func-decl AST: (declare-fun b () Int)
func-decl AST: (declare-fun %lbl%+2 () Bool)
	(DLA logic setup)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
	(setup arith: Dense Diff Logic)
	(setup arith: Dense Diff Logic - theory_dense_mi)
(smt.simplifier-start)
after internalize_assertions()...
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
#1 := true
#2 := false
expression -> bool_var:
(#1 -> true) 
expression -> enode:
(#1 -> e!0) (#2 -> e!1) 
	Theory Display
5
Theory dense difference logic:
atoms:
8
7
6
9
recfun
disabled guards:

13
10
12
11
decl2enodes:
hot bool vars:

(smt.preprocessing :time 0.00 :before-memory 0.46 :after-memory 0.46)
(smt.simplifier-start)
(smt.simplifying :time 0.00 :before-memory 0.46 :after-memory 0.46)
(started "check-sat")
check_sat AST:

(let ((a!1 (or %lbl%@1 (=> (and (= a 10) (= b 11)) (= (+ a b) 21)))))
  (not (! a!1 :lblneg @1)))

	(call solver...)
(combined-solver "using solver 2 (without a timeout)")
	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun b () Int)
(declare-fun a () Int)
(declare-fun %lbl%@1 () Bool)
(assert (let ((a!1 (or %lbl%@1 (= (+ a b) 21) (not (and (= a 10) (= b 11))))))
  (not (! a!1 :lblneg @1))))

	(smt_solver check_sat_core)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(let ((a!1 (or %lbl%@1 (= (+ a b) 21) (not (and (= a 10) (= b 11))))))
  (not (! a!1 :lblneg @1)))
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
(smt.reduce-asserted)
(smt.maximizing-bv-sharing)
(smt.reduce-asserted)
(smt.flatten-clauses)
(smt.simplifier-done)

after reduce
asserted formulas:
[HEAD] ==>
(not %lbl%@1)
(or (not (<= (+ a b) 21)) (not (>= (+ a b) 21)))
(<= a 10)
(>= a 10)
(<= b 11)
(>= b 11)
(! true :lblpos @1)
inconsistent: 0


internalize_assertion:
(not %lbl%@1)
(not %lbl%@1)

assert_default: expr = (not %lbl%@1), its ID: 44

internalize_rec:
(not %lbl%@1)
(not %lbl%@1)


internalize_formula:
(not %lbl%@1)
(not %lbl%@1)


internalize_rec:
%lbl%@1
%lbl%@1


internalize_formula:
%lbl%@1
%lbl%@1


internalize_theory_atom:
%lbl%@1
%lbl%@1

mk_bool_var: creating boolean variable: 1 for: %lbl%@1, its ID: 22
mk_bool_var: mk_var_bug - mk_bool: 1

internalize_assertion:
(or (not (<= (+ a b) 21)) (not (>= (+ a b) 21)))
#30 := (+ a b)
#37 := (>= #30 21)
#38 := (not #37)
#39 := (<= #30 21)
#43 := (not #39)
(or #43 #38)


internalize_rec:
(not (<= (+ a b) 21))
#30 := (+ a b)
#39 := (<= #30 21)
(not #39)


internalize_formula:
(not (<= (+ a b) 21))
#30 := (+ a b)
#39 := (<= #30 21)
(not #39)


internalize_rec:
(<= (+ a b) 21)
#30 := (+ a b)
(<= #30 21)


internalize_formula:
(<= (+ a b) 21)
#30 := (+ a b)
(<= #30 21)


internalize_theory_atom:
(<= (+ a b) 21)
#30 := (+ a b)
(<= #30 21)

DDL: internalize_atom: (<= (+ a b) 21)
DDL: internalize_atom: LHS = (+ a b)
DDL: internalize_atom: RHS = 21
(smt.diff_logic: non-diff logic expression (<= (+ a b) 21))

internalize_rec:
(+ a b)
(+ a b)

DDL: internalize_term:
(+ a b)
DDL: internalize_term_core:
(+ a b)

internalize_rec:
a
a


internalize_rec:
b
b


internalize_rec:
21
21

DDL: internalize_term:
21
DDL: internalize_term_core:
21
DDL: enode mk_var: 0
DDL: internalize_term_core:
0
DDL: enode mk_var: 1
	DDL: add_edge
DDL: trying adding edge:
#46 -- 21 --> #31
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#31 -- -21 --> #46
	DDL: update_cells
mk_bool_var: creating boolean variable: 2 for: (<= (+ a b) 21), its ID: 39
mk_bool_var: mk_var_bug - mk_bool: 2

internalize_rec:
(not (>= (+ a b) 21))
#30 := (+ a b)
#37 := (>= #30 21)
(not #37)


internalize_formula:
(not (>= (+ a b) 21))
#30 := (+ a b)
#37 := (>= #30 21)
(not #37)


internalize_rec:
(>= (+ a b) 21)
#30 := (+ a b)
(>= #30 21)


internalize_formula:
(>= (+ a b) 21)
#30 := (+ a b)
(>= #30 21)


internalize_theory_atom:
(>= (+ a b) 21)
#30 := (+ a b)
(>= #30 21)

DDL: internalize_atom: (>= (+ a b) 21)
DDL: internalize_atom: LHS = (+ a b)
DDL: internalize_atom: RHS = 21

internalize_rec:
(+ a b)
(+ a b)

DDL: internalize_term:
(+ a b)
DDL: internalize_term_core:
(+ a b)

internalize_rec:
21
21

mk_bool_var: creating boolean variable: 3 for: (>= (+ a b) 21), its ID: 37
mk_bool_var: mk_var_bug - mk_bool: 3

internalize_assertion:
(<= a 10)
(<= a 10)

assert_default: expr = (<= a 10), its ID: 48

internalize_rec:
(<= a 10)
(<= a 10)


internalize_formula:
(<= a 10)
(<= a 10)


internalize_theory_atom:
(<= a 10)
(<= a 10)

DDL: internalize_atom: (<= a 10)
DDL: internalize_atom: LHS = a
DDL: internalize_atom: RHS = 10
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = a, a
DDL: internalize_term_core:
0
DDL: internalize_term_core:
a
DDL: enode mk_var: 2
mk_bool_var: creating boolean variable: 4 for: (<= a 10), its ID: 48
mk_bool_var: mk_var_bug - mk_bool: 4

internalize_assertion:
(>= a 10)
(>= a 10)

assert_default: expr = (>= a 10), its ID: 47

internalize_rec:
(>= a 10)
(>= a 10)


internalize_formula:
(>= a 10)
(>= a 10)


internalize_theory_atom:
(>= a 10)
(>= a 10)

DDL: internalize_atom: (>= a 10)
DDL: internalize_atom: LHS = a
DDL: internalize_atom: RHS = 10
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = a, a
DDL: internalize_term_core:
0
DDL: internalize_term_core:
a
mk_bool_var: creating boolean variable: 5 for: (>= a 10), its ID: 47
mk_bool_var: mk_var_bug - mk_bool: 5

internalize_assertion:
(<= b 11)
(<= b 11)

assert_default: expr = (<= b 11), its ID: 55

internalize_rec:
(<= b 11)
(<= b 11)


internalize_formula:
(<= b 11)
(<= b 11)


internalize_theory_atom:
(<= b 11)
(<= b 11)

DDL: internalize_atom: (<= b 11)
DDL: internalize_atom: LHS = b
DDL: internalize_atom: RHS = 11
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = b, b
DDL: internalize_term_core:
0
DDL: internalize_term_core:
b
DDL: enode mk_var: 3
mk_bool_var: creating boolean variable: 6 for: (<= b 11), its ID: 55
mk_bool_var: mk_var_bug - mk_bool: 6

internalize_assertion:
(>= b 11)
(>= b 11)

assert_default: expr = (>= b 11), its ID: 54

internalize_rec:
(>= b 11)
(>= b 11)


internalize_formula:
(>= b 11)
(>= b 11)


internalize_theory_atom:
(>= b 11)
(>= b 11)

DDL: internalize_atom: (>= b 11)
DDL: internalize_atom: LHS = b
DDL: internalize_atom: RHS = 11
DDL: internalize_atom: s = 0, 0
DDL: internalize_atom: t = b, b
DDL: internalize_term_core:
0
DDL: internalize_term_core:
b
mk_bool_var: creating boolean variable: 7 for: (>= b 11), its ID: 54
mk_bool_var: mk_var_bug - mk_bool: 7

internalize_assertion:
(! true :lblpos @1)
lbl-lit[@1]

assert_default: expr = (! true :lblpos @1), its ID: 42

internalize_rec:
(! true :lblpos @1)
lbl-lit[@1]


internalize_formula:
(! true :lblpos @1)
lbl-lit[@1]


internalize_theory_atom:
(! true :lblpos @1)
lbl-lit[@1]

mk_bool_var: creating boolean variable: 8 for: (! true :lblpos @1), its ID: 42
mk_bool_var: mk_var_bug - mk_bool: 8
after internalize_assertions()...
Logical context:
scope-lvl: 1
base-lvl:  1
search-lvl:  1
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
#1 := true
#22 := %lbl%@1
#31 := 21
#26 := b
#23 := a
#30 := (+ a b)
#39 := (<= #30 21)
#37 := (>= #30 21)
#24 := 10
#48 := (<= a 10)
#47 := (>= a 10)
#27 := 11
#55 := (<= b 11)
#54 := (>= b 11)
#42 := lbl-lit[@1]
#2 := false
#46 := 0
#44 := (not %lbl%@1)
#38 := (not #37)
#43 := (not #39)
#40 := (or #43 #38)
asserted formulas:
#44 #40 #48 #47 #55 #54 #42 
auxiliary clauses:
(not (<= (+ a b) 21)) 
(not (>= (+ a b) 21)) 

current assignment:
(not #22): (not %lbl%@1)
#48: (<= a 10)
#47: (>= a 10)
#55: (<= b 11)
#54: (>= b 11)
#42: lbl-lit[@1]
remaining case-splits:
#39 #37 
expression -> bool_var:
(#1 -> true) (#22 -> p1) (#39 -> p2) (#37 -> p3) (#48 -> p4) (#47 -> p5) (#55 -> p6) (#54 -> p7) (#42 -> p8) 
expression -> enode:
(#1 -> e!0) (#2 -> e!1) (#23 -> e!2) (#26 -> e!3) (#30 -> e!4) (#31 -> e!5) (#46 -> e!6) (#39 -> e!7) (#37 -> e!8) 
relevant exprs:
#22 #40 #48 #24 #23 #47 #55 #27 #26 #54 #42 
	Theory Display
5
Theory dense difference logic:
v0 -> #31
v1 -> #46
v2 -> #23
v3 -> #26
#31    -- -21        : id2     --> #46
#46    -- 21         : id1     --> #31
atoms:
#23    - #46    <= 10                assignment: l_true
#46    - #23    <= -10               assignment: l_true
#26    - #46    <= 11                assignment: l_true
#46    - #26    <= -11               assignment: l_true
8
7
6
9
recfun
disabled guards:

13
10
12
11
decl2enodes:
id 16 -> #39
id 17 -> #37
id 25 -> #30
hot bool vars:

(smt.preprocessing :time 0.02 :before-memory 0.55 :after-memory 0.55)
(smt.searching)
	DDL: add_edge
DDL: trying adding edge:
#46 -- 10 --> #23
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#23 -- -10 --> #46
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#46 -- 11 --> #26
	DDL: update_cells
	DDL: add_edge
DDL: trying adding edge:
#26 -- -11 --> #46
	DDL: update_cells
(smt.simplifying-clause-set :num-deleted-clauses 0)
(smt.simplifier-start)
propagate_bool_var_enode - var: 3 #37
(smt.simplifier-start)
(smt.final-check "difference-logic")
(smt.final-check "array")
(smt.final-check "bit-vector")
(smt.final-check "datatype")
(smt.final-check "recfun")
(smt.final-check "datalog")
(smt.final-check "seq")
(smt.final-check "fpa")
(smt.final-check "unknown")
(smt.stats :time 0.00 :before-memory 0.55 :after-memory 0.55)
(combined-solver "solver 2 failed, trying solver1")
(combined-solver "using solver 1")
	(solver_na2as check_sat_core)

solver check_sat_core
(declare-fun b () Int)
(declare-fun a () Int)
(declare-fun %lbl%@1 () Bool)
(assert (let ((a!1 (or %lbl%@1 (=> (and (= a 10) (= b 11)) (= (+ a b) 21)))))
  (not (! a!1 :lblneg @1))))

(simplifier :num-exprs 17 :num-asts 197 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(fix-dl-var :num-exprs 17 :num-asts 197 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(propagate-values :num-exprs 17 :num-asts 197 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(elim-uncnstr :num-exprs 17 :num-asts 197 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(ctx-simplify :num-steps 31)
(ctx-simplify :num-exprs 3 :num-asts 199 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(simplifier :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(solve_eqs :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(simplifier :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(propagate-values :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(normalize-bounds :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(solve_eqs :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(diff-neq :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(lia2pb :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(propagate-ineqs :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(pb2bv :num-exprs 3 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.55)
(smt.tactic start)
mk_bool_var: creating boolean variable: 0 for: true, its ID: 1
mk_bool_var: mk_var_bug - mk_bool: 0
(smt.simplifying :time 0.00 :before-memory 0.79 :after-memory 0.79)
(smt.configuring)
(smt.collecting-features)
	(DLA logic setup)
	(unknown logic setup)
(smt.collecting-features)
	(setup arith to Diff Logic)
	(setup arith: Dense Diff Logic)
	(setup arith: Dense Diff Logic - theory_dense_mi)
(smt.simplifier-start)

before reduce
asserted formulas:
[HEAD] ==>
(not (! true :lblneg @1))
inconsistent: 0

(smt.propagate-values)
(smt.nnf-cnf)
after internalize_assertions()...
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 1
m_asserted_formulas.inconsistent(): 1
#1 := true
#2 := false
asserted formulas:
#2 
expression -> bool_var:
(#1 -> true) 
expression -> enode:
(#1 -> e!0) (#2 -> e!1) 
	Theory Display
5
Theory dense difference logic:
atoms:
8
7
6
9
recfun
disabled guards:

13
10
12
11
decl2enodes:
hot bool vars:

(smt.preprocessing :time 0.00 :before-memory 0.79 :after-memory 0.79)
(smt :num-exprs 1 :num-asts 194 :time 0.00 :before-memory 0.55 :after-memory 0.56)
unsat
(:reason-unknown "")
